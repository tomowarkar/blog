<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on tomowarkarの技術ブログ</title>
        <link>https://tomowarkar.github.io/blog/posts/</link>
        <description>Recent content in Posts on tomowarkarの技術ブログ</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <copyright>tomowarkar</copyright>
        <lastBuildDate>Mon, 04 May 2020 22:19:10 +0900</lastBuildDate>
        <atom:link href="https://tomowarkar.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>spaCyを使ってみた ~レンマ化とステミングの違い~</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp_spacy/</link>
            <pubDate>Mon, 04 May 2020 22:19:10 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp_spacy/</guid>
            <description>2020 年版 言語処理 100 本ノック 第 6 章 で自然言語処理ライブラリのspaCyを使った備忘録 Google Colab では標準で入っているので簡単に試してみるにはおすすめ 参考</description>
            <content type="html"><![CDATA[<p>2020 年版 <a href="https://nlp100.github.io/ja/ch06.html">言語処理 100 本ノック 第 6 章</a> で自然言語処理ライブラリの<code>spaCy</code>を使った備忘録</p>
<p>Google Colab では標準で入っているので簡単に試してみるにはおすすめ</p>
<h3 id="参考">参考</h3>
<p><a href="https://spacy.io/usage/spacy-101">spaCy 101: Everything you need to know</a></p>
<p><a href="https://qiita.com/miorgash/items/0eda4adcc8d9ecd143e6">spaCy 101: Everything you need to know 和訳</a></p>
<h2 id="環境">環境</h2>
<p>Google Colab</p>
<pre><code>! python -V
! pip show spacy
Python 3.6.9
Name: spacy
Version: 2.2.4
Summary: Industrial-strength Natural Language Processing (NLP) in Python
</code></pre><h2 id="トークン化">トークン化</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> spacy
nlp <span style="color:#f92672">=</span> spacy<span style="color:#f92672">.</span>load(<span style="color:#e6db74">&#34;en_core_web_sm&#34;</span>)

doc <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;So foul and fair a day I have not seen.&#34;</span>)

tokens <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc]
<span style="color:#66d9ef">print</span>(tokens) <span style="color:#75715e"># &gt; [So, foul, and, fair, a, day, I, have, not, seen, .]</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">token <span style="color:#f92672">=</span> tokens[<span style="color:#ae81ff">5</span>]
<span style="color:#66d9ef">print</span>(token<span style="color:#f92672">.</span>text, token<span style="color:#f92672">.</span>lemma_, token<span style="color:#f92672">.</span>pos_, token<span style="color:#f92672">.</span>tag_,
    token<span style="color:#f92672">.</span>dep_, token<span style="color:#f92672">.</span>shape_, token<span style="color:#f92672">.</span>is_alpha, token<span style="color:#f92672">.</span>is_stop)
    <span style="color:#75715e"># &gt; day day NOUN NN npadvmod xxx True False</span>
</code></pre></div><p>右から原文, 基本語形, 品詞, 詳細, 統計, 語形, 英字, ストップワードの順</p>
<blockquote>
<p>Text: The original word text.
Lemma: The base form of the word.
POS: The simple part-of-speech tag.
Tag: The detailed part-of-speech tag.
Dep: Syntactic dependency, i.e. the relation between tokens.
Shape: The word shape – capitalization, punctuation, digits.
is alpha: Is the token an alpha character?
is stop: Is the token part of a stop list, i.e. the most common words of the language?
参照: spaCy 101: Everything you need to know より</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># 品詞によるフィルター</span>
token_noun <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc <span style="color:#66d9ef">if</span> e<span style="color:#f92672">.</span>pos_ <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#34;NOUN&#34;</span>]]
<span style="color:#66d9ef">print</span>(token_noun) <span style="color:#75715e"># &gt; [day]</span>

<span style="color:#75715e"># ストップワードを除外</span>
token_excl_sw <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> e<span style="color:#f92672">.</span>is_stop]
<span style="color:#66d9ef">print</span>(token_excl_sw) <span style="color:#75715e"># &gt; [foul, fair, day, seen, .]</span>

<span style="color:#75715e"># 最低限のクリーニングをするなら。</span>
token_tidy <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc <span style="color:#66d9ef">if</span> e<span style="color:#f92672">.</span>pos_ <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#34;PUNCT&#34;</span>, <span style="color:#e6db74">&#34;SYM&#34;</span>, <span style="color:#e6db74">&#34;SPACE&#34;</span>]]
<span style="color:#66d9ef">print</span>(token_tidy) <span style="color:#75715e"># &gt; [So, foul, and, fair, a, day, I, have, not, seen]</span>
</code></pre></div><p>参考: <a href="https://spacy.io/api/annotation#section-pos-tagging">Syntactic Dependency Parsing</a></p>
<h3 id="固有表現">固有表現</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">doc <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;Apple bought 10 apples for 100 billion yen.&#34;</span>)
<span style="color:#66d9ef">for</span> ent <span style="color:#f92672">in</span> doc<span style="color:#f92672">.</span>ents:
    <span style="color:#66d9ef">print</span>(ent<span style="color:#f92672">.</span>text, ent<span style="color:#f92672">.</span>start_char, ent<span style="color:#f92672">.</span>end_char, ent<span style="color:#f92672">.</span>label_)
</code></pre></div><h5 id="out">out</h5>
<p>数字の有意性を図るのに使えそう?</p>
<pre><code>Apple 0 5 ORG
10 13 15 CARDINAL
100 billion yen 27 42 MONEY
</code></pre><h3 id="単語ベクトルと類似性">単語ベクトルと類似性</h3>
<p>末尾に<code>sm</code>とつく<code>en_core_web_sm</code>のような言語モデルでは単語ベクトルが含まれておらず精度が低い。</p>
<p>また実行時に<code>ModelsWarning: [W007] The model you're using has no word vectors loaded, so the ...</code>と警告される。</p>
<p>言語モデルを確認のこと、データ量の大きいモデルをダウンロードすると良い</p>
<pre><code># python -m spacy download en_core_web_md
python -m spacy download en_core_web_lg
</code></pre><p>またさらに上記コードでモデルをダウンロードして、いざ<code>nlp = spacy.load(&quot;en_core_web_lg&quot;)</code>で扱おうとしても
<code>OSError: [E050] Can't find model 'en_core_web_lg'. It doesn't ...</code>モデルみつかんねーよとエラーが出る場合がある(jupyter notebook や google colab で発現?)</p>
<p>参考: <a href="https://github.com/explosion/spaCy/issues/4577">spaCy issues #4577</a></p>
<p>上記 issue にもあるように以下コードで修正した</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> en_core_web_lg
nlp <span style="color:#f92672">=</span> en_core_web_lg<span style="color:#f92672">.</span>load()
</code></pre></div><h4 id="類似性">類似性</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dog <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;dog&#34;</span>)
cat <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;cat&#34;</span>)
apple <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;apple&#34;</span>)

<span style="color:#66d9ef">print</span>(dog<span style="color:#f92672">.</span>text, cat<span style="color:#f92672">.</span>text, dog<span style="color:#f92672">.</span>similarity(cat))
<span style="color:#66d9ef">print</span>(dog<span style="color:#f92672">.</span>text, apple<span style="color:#f92672">.</span>text, dog<span style="color:#f92672">.</span>similarity(apple))
</code></pre></div><p>2 つのモデル(<code>en_core_web_sm</code>, <code>en_core_web_lg</code>)の類似度の結果をそれぞれ載せておく</p>
<pre><code># モデル en_core_web_sm
dog cat 0.6549556828973659
dog apple 0.6209418867452425

# モデル en_core_web_lg
dog cat 0.8016854705531046
dog apple 0.2633902481063797
</code></pre><p><code>sm</code>の方は犬と猫とりんごもそんな変わらない結果となっている。データ量は偉大。</p>
<h2 id="ハッシュ化">ハッシュ化</h2>
<p>自分でやろうとしたら管理が面倒なので, 便利だなーって思ったやつ</p>
<p>文字列にハッシュ 値が割り振られている</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">nlp<span style="color:#f92672">.</span>vocab<span style="color:#f92672">.</span>strings[<span style="color:#e6db74">&#34;apple&#34;</span>] <span style="color:#75715e"># &gt; 8566208034543834098</span>

nlp<span style="color:#f92672">.</span>vocab<span style="color:#f92672">.</span>strings[<span style="color:#ae81ff">3197928453018144401</span>] <span style="color:#75715e"># &gt; &#39;coffee&#39;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">lexeme <span style="color:#f92672">=</span> nlp<span style="color:#f92672">.</span>vocab[apple<span style="color:#f92672">.</span>text]
<span style="color:#66d9ef">print</span>(lexeme<span style="color:#f92672">.</span>text, lexeme<span style="color:#f92672">.</span>orth, lexeme<span style="color:#f92672">.</span>shape_, lexeme<span style="color:#f92672">.</span>prefix_, lexeme<span style="color:#f92672">.</span>suffix_,
            lexeme<span style="color:#f92672">.</span>is_alpha, lexeme<span style="color:#f92672">.</span>is_digit, lexeme<span style="color:#f92672">.</span>is_title, lexeme<span style="color:#f92672">.</span>lang_)
<span style="color:#75715e"># &gt; apple 8566208034543834098 xxxx a ple True False False en</span>
</code></pre></div><blockquote>
<p>Text: The original text of the lexeme.
Orth: The hash value of the lexeme.
Shape: The abstract word shape of the lexeme.
Prefix: By default, the first letter of the word string.
Suffix: By default, the last three letters of the word string.
is alpha: Does the lexeme consist of alphabetic characters?
is digit: Does the lexeme consist of digits?
参照: spaCy 101: Everything you need to know より</p>
</blockquote>
<h2 id="ステミング">ステミング</h2>
<p>spaCy は Stemming(ステミング)に対応しておらず、代わりに レンマ化(Lemmatization)を使うこととなります。</p>
<p>ステミングとレンマ化の違いを説明しろと言われてもまだあまり理解しておらず少し難しいので、<code>nltk</code>のスノーボールステマーと簡単な比較をしてみます。</p>
<h4 id="lemmatization">Lemmatization</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">doc <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;compute computer computed computing computation&#34;</span>)
<span style="color:#66d9ef">for</span> token <span style="color:#f92672">in</span> doc:
    <span style="color:#66d9ef">print</span>(token<span style="color:#f92672">.</span>text<span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; --&gt; &#39;</span> <span style="color:#f92672">+</span> token<span style="color:#f92672">.</span>lemma_)
</code></pre></div><h4 id="stemming">Stemming</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> nltk.stem.snowball <span style="color:#f92672">import</span> SnowballStemmer

stemmer <span style="color:#f92672">=</span> SnowballStemmer(language<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;english&#39;</span>)
tokens <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;compute computer computed computing computation&#34;</span><span style="color:#f92672">.</span>split()

<span style="color:#66d9ef">for</span> token <span style="color:#f92672">in</span> tokens:
    <span style="color:#66d9ef">print</span>(token <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; --&gt; &#39;</span> <span style="color:#f92672">+</span> stemmer<span style="color:#f92672">.</span>stem(token))
</code></pre></div><h5 id="out-1">out</h5>
<pre><code># Lemmatization
compute --&gt; compute
computer --&gt; computer
computed --&gt; compute
computing --&gt; compute
computation --&gt; computation

# Stemming
compute --&gt; comput
computer --&gt; comput
computed --&gt; comput
computing --&gt; comput
computation --&gt; comput
</code></pre><h4 id="ステミングとレンマ化の違い-2">ステミングとレンマ化の違い 2</h4>
<p>判別の難しい<code>saw</code>を使って違いを見てみます。
比較する文は<code>a power saw</code>と<code>I saw the apple</code>で, 結果のみを記します。</p>
<pre><code># a power saw (Lemmatization)
a --&gt; a
power --&gt; power
saw --&gt; see

# a power saw (Stemming)
a --&gt; a
power --&gt; power
saw --&gt; saw

# I saw the apple (Lemmatization)
I --&gt; -PRON-
saw --&gt; see
the --&gt; the
apple --&gt; apple

# I saw the apple (Stemming)
I --&gt; i
saw --&gt; saw
the --&gt; the
apple --&gt; appl
</code></pre><p>レンマ化ではノコギリの方の<code>saw</code>を<code>see</code>と誤認していますし、ステミンングでは<code>saw</code>を<code>see</code>と見抜けていません
。またステミンングでは<code>apple --&gt; appl</code>となっています。</p>
<p>この辺りがステミングとレンマ化の違いと言えるのではないでしょうか。</p>
<p>ステミングでは主に接尾の除去による処理が行われ、レンマ化では辞書参照が行われているという認識でしょうか?</p>
<p>とはいえステミングとレンマ化の違いは手段の違いでしかないので、目的に合わせて判断やチューニングするのが大事でしょう。(自分は目的がうまく達成されるならどっちでもいいと捉えます)</p>
<h4 id="眺めた記事たち">眺めた記事たち</h4>
<ul>
<li><a href="https://stackabuse.com/python-for-nlp-tokenization-stemming-and-lemmatization-with-spacy-library/">Python for NLP: Tokenization, Stemming, and Lemmatization with SpaCy Library</a></li>
<li><a href="https://www.haya-programming.com/entry/2018/03/25/203836">【python】nltk で英語の Stemming と Lemmatization</a></li>
<li><a href="https://stackoverflow.com/questions/1787110/what-is-the-difference-between-lemmatization-vs-stemming">What is the difference between lemmatization vs stemming?</a></li>
<li><a href="https://www.quora.com/What-are-the-advantages-of-Spacy-vs-NLTK">What-are-the-advantages-of-Spacy-vs-NLTK</a></li>
</ul>
<h2 id="おわりに">おわりに</h2>
<p>英語での自然言語処理を始めようとしたとき、機械的に空白で tokenize して、正規表現でクリーニングして、 <code>nltk</code>のスノーボールステマーでステミングして&hellip; と考えていたものが<code>spaCy</code>でほぼ実装できてしまいました。</p>
<p>深いレベル(自分でモデルのチューニングをする)の場合は分かりませんが、とりあえず自然言語処理をやってみるという点でこの<code>spaCy</code>は最高に使いやすかったです。</p>
<p>英語の自然言語処理は進んでるなーって感じです(こなみ)</p>
<ul>
<li><a href="https://sunscrapers.com/blog/8-best-python-natural-language-processing-nlp-libraries/">8 best Python Natural Language Processing (NLP) libraries</a></li>
</ul>
<p>P.S.　いくら<code>spaCy</code>が高速な言語解析ツールだからといって 10000 行を超える処理をさせると数分かかる(処理速度 ms 単位)</p>
]]></content>
        </item>
        
        <item>
            <title>Bashにおけるloopとかブレース展開とか並列行処理とか</title>
            <link>https://tomowarkar.github.io/blog/posts/bash_parallel_brace/</link>
            <pubDate>Sun, 03 May 2020 06:47:36 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/bash_parallel_brace/</guid>
            <description>ブレース展開 # こんなんとか echo {1..10} #&amp;gt; 1 2 3 4 5 6 7 8 9 10 # こんなんとか echo {{a..z},{A..Z}} #&amp;gt; a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H</description>
            <content type="html"><![CDATA[<h2 id="ブレース展開">ブレース展開</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># こんなんとか</span>
echo <span style="color:#f92672">{</span>1..10<span style="color:#f92672">}</span> <span style="color:#75715e">#&gt; 1 2 3 4 5 6 7 8 9 10</span>

<span style="color:#75715e"># こんなんとか</span>
echo <span style="color:#f92672">{{</span>a..z<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>A..Z<span style="color:#f92672">}}</span> <span style="color:#75715e">#&gt; a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span>
</code></pre></div><h4 id="深いディレクトリ操作とかで便利">深いディレクトリ操作とかで便利</h4>
<p>ファイル名を typo した時の変更とかに</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mv content/posts/bash_parallel_<span style="color:#f92672">{</span>braves,brace<span style="color:#f92672">}</span>.md
</code></pre></div><p>以下と同意</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mv content/posts/bash_parallel_braves.md content/posts/bash_parallel_brace.md
</code></pre></div><p>もちろん<code>cp</code> や <code>touch</code>などでも使える</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir -p test/<span style="color:#f92672">{</span>hoga,hige<span style="color:#f92672">}</span>/<span style="color:#f92672">{</span>1..3<span style="color:#f92672">}</span>
$ tree test/
test/
├── hige
│   ├── <span style="color:#ae81ff">1</span>
│   ├── <span style="color:#ae81ff">2</span>
│   └── <span style="color:#ae81ff">3</span>
└── hoga
    ├── <span style="color:#ae81ff">1</span>
    ├── <span style="color:#ae81ff">2</span>
    └── <span style="color:#ae81ff">3</span>
</code></pre></div><h3 id="mac-のブレース展開で詰まったところ">Mac のブレース展開で詰まったところ</h3>
<p>年月を<code>%Y%m</code>で表示したい</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 期待</span>
echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{</span>01..12<span style="color:#f92672">}</span> <span style="color:#75715e">#&gt; 202001 202002 202003 202004 202005 202006 202007 202008 202009 202010 202011 202012</span>

<span style="color:#75715e"># 現実 #&gt; 20201 20202 20203 20204 20205 20206 20207 20208 20209 202010 202011 202012</span>
</code></pre></div><p>0 パディングされなくて悲しい</p>
<h3 id="解決策">解決策</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># ゴリ押し法</span>
echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{{</span>01,02,03,04,05,06,07,08,09<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>10..12<span style="color:#f92672">}}</span>

<span style="color:#75715e"># xargs and printf法</span>
str<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#f92672">{</span>01..12<span style="color:#f92672">}</span> | xargs -n1 -I<span style="color:#f92672">{}</span> printf <span style="color:#e6db74">&#34;%02d,&#34;</span> <span style="color:#f92672">{}</span> | sed -e <span style="color:#e6db74">&#39;s/,$//g&#39;</span><span style="color:#66d9ef">)</span>
eval echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{</span>$str<span style="color:#f92672">}</span>

<span style="color:#75715e"># seq and sed法</span>
str<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>seq -w -s <span style="color:#e6db74">&#39;,&#39;</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">12</span> | sed -e <span style="color:#e6db74">&#39;s/,$//g&#39;</span><span style="color:#66d9ef">)</span>
eval echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{</span>$str<span style="color:#f92672">}</span>

<span style="color:#75715e"># sed法</span>
str<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#f92672">{</span>101..112<span style="color:#f92672">}</span> | sed -e <span style="color:#e6db74">&#39;s/1\([0-9]\{2\}\)/\1/g&#39;</span> -e <span style="color:#e6db74">&#39;s/\ /,/g&#39;</span><span style="color:#66d9ef">)</span>
eval echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{</span>$str<span style="color:#f92672">}</span>
</code></pre></div><h2 id="for-loop-の速度">for loop の速度</h2>
<p>ところで年月を<code>%Y%m</code>で表示したいと考えたときに一番簡単に実装できる方法が<code>for loop</code>を用いた実装ではないだろうか</p>
<p>巷では<code>for loop</code>は遅いと言われているが実際はどうなのか確かめてみる。</p>
<h3 id="0-パディングなし">0 パディングなし</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">f1<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">for</span> yy in <span style="color:#66d9ef">$(</span>seq <span style="color:#ae81ff">2020</span> 2020<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#66d9ef">for</span> m in <span style="color:#66d9ef">$(</span>seq <span style="color:#ae81ff">1</span> 12<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
            echo $yy$m &gt;/dev/null
        <span style="color:#66d9ef">done</span>
    <span style="color:#66d9ef">done</span>
<span style="color:#f92672">}</span>
time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> f1; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># &gt;real 5.02 user 1.53 sys 2.75</span>

f2<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">for</span> yy in <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#66d9ef">for</span> m in <span style="color:#f92672">{</span>1..12<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
            echo $yy$m &gt;/dev/null
        <span style="color:#66d9ef">done</span>
    <span style="color:#66d9ef">done</span>
<span style="color:#f92672">}</span>
time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> f2; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># &gt;real 0.44 user 0.21 sys 0.23</span>

<span style="color:#75715e">## 比較</span>
time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{{</span>01,02,03,04,05,06,07,08,09<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>10..12<span style="color:#f92672">}}</span>&gt;/dev/null; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e">#&gt; real 0.08 user 0.06 sys 0.02</span>
</code></pre></div><h4 id="question">question</h4>
<p>こちらのが比較としてより正しい気がするけどどうなのだろうか(ちなみにものすごく遅い)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{{</span>01,02,03,04,05,06,07,08,09<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>10..12<span style="color:#f92672">}}</span>| xargs -n1 -I<span style="color:#f92672">{}</span> echo <span style="color:#f92672">{}</span> &gt;/dev/null; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># &gt;real 16.82 user 5.57 sys 10.83</span>

<span style="color:#75715e"># 並列処理しても遅い</span>
time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{{</span>01,02,03,04,05,06,07,0
8,09<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>10..12<span style="color:#f92672">}}</span>| xargs -n1 -P4 -I<span style="color:#f92672">{}</span> echo <span style="color:#f92672">{}</span> &gt;/dev/null; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># &gt;real 8.99 user 6.64 sys 14.65</span>
</code></pre></div><h2 id="並列処理">並列処理</h2>
<p>ついでなので<code>xargs</code>での並列処理についてメモを残しておく</p>
<h4 id="基本">基本</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ seq <span style="color:#ae81ff">10</span> | xargs echo
<span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>

$ seq <span style="color:#ae81ff">10</span> | xargs -t echo
echo <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>

$ seq <span style="color:#ae81ff">10</span> | xargs -t -n1 echo
echo <span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">1</span>
echo <span style="color:#ae81ff">2</span>
<span style="color:#ae81ff">2</span>
echo <span style="color:#ae81ff">3</span>
<span style="color:#ae81ff">3</span>
echo <span style="color:#ae81ff">4</span>
<span style="color:#ae81ff">4</span>
echo <span style="color:#ae81ff">5</span>
<span style="color:#ae81ff">5</span>
echo <span style="color:#ae81ff">6</span>
<span style="color:#ae81ff">6</span>
echo <span style="color:#ae81ff">7</span>
<span style="color:#ae81ff">7</span>
echo <span style="color:#ae81ff">8</span>
<span style="color:#ae81ff">8</span>
echo <span style="color:#ae81ff">9</span>
<span style="color:#ae81ff">9</span>
echo <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">10</span>
</code></pre></div><ul>
<li><code>-t</code> 実行コマンドを表示</li>
<li><code>-n</code> 引数の数を指定</li>
</ul>
<h4 id="n-コマンドと-l-コマンドの違い">n コマンドと L コマンドの違い</h4>
<ul>
<li><code>-n</code> 区切り文字 <code>' '</code>(スペース)で分割?</li>
<li><code>-L</code> 区切り文字 <code>\n</code>で分割?</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 以下二つは同様の結果を示す</span>
$ seq <span style="color:#ae81ff">10</span> | xargs -t -n3 echo
$ seq <span style="color:#ae81ff">10</span> | xargs -t -L3 echo

<span style="color:#75715e"># 違い</span>
$ seq  -s <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#ae81ff">10</span> | xargs -t -n3 echo
echo <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span>
<span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span>
echo <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span>
<span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span>
echo <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span>
<span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span>
echo <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">10</span>
$ seq  -s <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#ae81ff">10</span> | xargs -t -L3 echo
echo <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>
</code></pre></div><h4 id="引数の操作">引数の操作</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ seq <span style="color:#ae81ff">10</span> | xargs -t -n2 bash -c <span style="color:#e6db74">&#39;[ $0 -gt $1 ] &amp;&amp; echo $0 || echo $1&#39;</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span>
<span style="color:#ae81ff">2</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span>
<span style="color:#ae81ff">4</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span>
<span style="color:#ae81ff">6</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span>
<span style="color:#ae81ff">8</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">10</span>
</code></pre></div><h4 id="並列処理-1">並列処理</h4>
<p>途中経過より正しく並列処理されていることを確認</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">time -p seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
<span style="color:#75715e"># &gt;real 10.13 user 0.02 sys 0.05</span>
time -p seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> -P2 bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
<span style="color:#75715e"># &gt;real 5.07 user 0.02 sys 0.06</span>
time -p seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> -P10 bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
<span style="color:#75715e"># &gt;real 1.08 user 0.02 sys 0.07</span>
</code></pre></div><p>引数の数をしてして実行</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">time seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> -L2 bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
time seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> -L2 -P2 bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
</code></pre></div><h3 id="使わなかったコード供養">使わなかったコード供養</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">red<span style="color:#f92672">(){</span> echo <span style="color:#e6db74">$&#39;\e[31m&#39;</span>$1<span style="color:#e6db74">$&#39;\e[0m&#39;</span> ;<span style="color:#f92672">}</span>
red hoge
</code></pre></div><p>参考 <a href="https://qiita.com/PruneMazui/items/8a023347772620025ad6">ANSI エスケープシーケンス チートシート</a></p>
<p>参考 <a href="https://sites.google.com/a/tatsuo.jp/programming/Home/bash/hentai-bunpou-saisoku-masuta#TOC--6">https://sites.google.com/a/tatsuo.jp/programming/Home/bash/hentai-bunpou-saisoku-masuta#TOC--6</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">eval echo <span style="color:#66d9ef">$(</span>echo <span style="color:#f92672">{</span><span style="color:#66d9ef">$(</span>seq -w <span style="color:#ae81ff">1</span> 12<span style="color:#66d9ef">)</span><span style="color:#f92672">}</span> | tr <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#e6db74">&#39;,&#39;</span><span style="color:#66d9ef">)</span> <span style="color:#75715e">#&gt; 01 02 03 04 05 06 07 08 09 10 11 12</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">f2<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">for</span> yy in <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#66d9ef">for</span> m in <span style="color:#f92672">{</span>1..12<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
            <span style="color:#f92672">[</span> $m -lt <span style="color:#ae81ff">10</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> printf <span style="color:#e6db74">&#34;%s0%s\n&#34;</span> $yy $m  <span style="color:#f92672">||</span> echo $yy$m
        <span style="color:#66d9ef">done</span>
    <span style="color:#66d9ef">done</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>日付めくりとかだと使えるかもね</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">since<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2020/01/01&#34;</span>
till<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2020/12/01&#34;</span>
dy<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>gdate -d $since +%Y%m<span style="color:#66d9ef">)</span>
ft<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>gdate -d $till +%Y%m<span style="color:#66d9ef">)</span>
monthes<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>

<span style="color:#66d9ef">while</span> <span style="color:#f92672">[</span> $dy -le $ft <span style="color:#f92672">]</span>; <span style="color:#66d9ef">do</span>
    echo $dy
    monthes<span style="color:#f92672">=</span><span style="color:#66d9ef">$((</span><span style="color:#f92672">++</span>monthes<span style="color:#66d9ef">))</span>
    dy<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>gdate -d <span style="color:#e6db74">&#34;</span>$since<span style="color:#e6db74"> </span>$monthes<span style="color:#e6db74"> month&#34;</span> +%Y%m<span style="color:#66d9ef">)</span>
<span style="color:#66d9ef">done</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Pandasの基本操作まとめ</title>
            <link>https://tomowarkar.github.io/blog/posts/ipynb_pandas_tutorial/</link>
            <pubDate>Sat, 02 May 2020 21:09:14 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/ipynb_pandas_tutorial/</guid>
            <description>備忘録的メモ この記事は Python 環境がなくても、Google Colab上で実際に動かすことができます。 実行環境 Google Colab ! cat /etc/issue Ubuntu 18.04.3 LTS \n \l ! python -V Python 3.6.9 ! pip show pandas</description>
            <content type="html"><![CDATA[<p>備忘録的メモ</p>
<p>この記事は Python 環境がなくても、<code>Google Colab</code>上で実際に動かすことができます。</p>
<h2 id="実行環境">実行環境</h2>
<ul>
<li><a href="https://colab.research.google.com/?hl=ja">Google Colab</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">! cat /etc/issue
Ubuntu 18.04.3 LTS <span style="color:#ae81ff">\n</span> <span style="color:#ae81ff">\l</span>

! python -V
Python 3.6.9

! pip show pandas | grep -e Name -e Version
Name: pandas
Version: 1.0.3
</code></pre></div><h3 id="ソースコード">ソースコード</h3>
<p><a href="https://colab.research.google.com/drive/1kodWef1HTaZeffIYQc7uyw4FTyvkr83F#forceEdit=true&amp;sandboxMode=true">https://colab.research.google.com/drive/1kodWef1HTaZeffIYQc7uyw4FTyvkr83F#forceEdit=true&amp;sandboxMode=true</a></p>
<p>ソースコードの実行には Google アカウントが必要です。</p>
<p>また実行時 <code>警告: このノートブックは Google が作成したものではありません。</code> とポップアップが出ます。データや認証情報の読み取りが無いよう留意しておりますが、実行に際しては一度ソースコードを読んでから実行することをお願い申し上げます。</p>
<h2 id="pandas-とは">Pandas とは</h2>
<p>データ操作と分析のための Python ライブラリ</p>
<p>Excel のような 2 次元のテーブルを用いて構造化されたデータへのアクセスを行う。</p>
<p>csv, json, xlsx などに対応していて, インターネット上のソースファイルも利用できる</p>
<h2 id="データセットのダウンロード">データセットのダウンロード</h2>
<p>今回は Titanic データセットを利用します。</p>
<p><a href="https://www.openml.org/d/40945">https://www.openml.org/d/40945</a></p>
<p>Unix コマンドを用いてデータセットのダウンロードと簡単な中身の確認をしていきます。</p>
<pre><code>curl -o titanic.csv https://www.openml.org/data/get_csv/16826755/phpMYEkMl
</code></pre><h3 id="内容確認">内容確認</h3>
<pre><code>head -n 3 titanic.csv &amp;&amp; tail -n 3 titanic.csv

&quot;pclass&quot;,&quot;survived&quot;,&quot;name&quot;,&quot;sex&quot;,&quot;age&quot;,&quot;sibsp&quot;,&quot;parch&quot;,&quot;ticket&quot;,&quot;fare&quot;,&quot;cabin&quot;,&quot;embarked&quot;,&quot;boat&quot;,&quot;body&quot;,&quot;home.dest&quot;
1,1,&quot;Allen, Miss. Elisabeth Walton&quot;,&quot;female&quot;,29,0,0,&quot;24160&quot;,211.3375,&quot;B5&quot;,&quot;S&quot;,&quot;2&quot;,?,&quot;St Louis, MO&quot;
1,1,&quot;Allison, Master. Hudson Trevor&quot;,&quot;male&quot;,0.9167,1,2,&quot;113781&quot;,151.55,&quot;C22 C26&quot;,&quot;S&quot;,&quot;11&quot;,?,&quot;Montreal, PQ / Chesterville, ON&quot;
3,0,&quot;Zakarian, Mr. Mapriededer&quot;,&quot;male&quot;,26.5,0,0,&quot;2656&quot;,7.225,?,&quot;C&quot;,?,304,?
3,0,&quot;Zakarian, Mr. Ortin&quot;,&quot;male&quot;,27,0,0,&quot;2670&quot;,7.225,?,&quot;C&quot;,?,?,?
3,0,&quot;Zimmerman, Mr. Leo&quot;,&quot;male&quot;,29,0,0,&quot;315082&quot;,7.875,?,&quot;S&quot;,?,?,?
</code></pre><h3 id="行数確認">行数確認</h3>
<pre><code>cat titanic.csv | wc -l

1310
</code></pre><h2 id="pandas-の-inport">pandas の inport</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pandas <span style="color:#f92672">as</span> pd
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># バージョン確認</span>
pd<span style="color:#f92672">.</span>__version__ <span style="color:#75715e">#&gt; &#39;1.0.3&#39;</span>
</code></pre></div><h2 id="データのインポート">データのインポート</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">src <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;titanic.csv&#34;</span>
df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(src)
</code></pre></div><p>データソースが<code>json</code>の場合<code>pd.read_json(src)</code>, <code>excel</code>の場合<code>pd.read_excel(src)</code>のように直感的に読み込むことができます。</p>
<p>データソースがインターネット上にある場合(例えば
<a href="https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv">COVID-19</a> )も<code>raw</code>ファイルを指定してあげることで同様に読み込むことができます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">src <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#34;</span>
</code></pre></div><h3 id="内容の確認">内容の確認</h3>
<p>頭 5 行の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>head(<span style="color:#ae81ff">5</span>)
</code></pre></div><p>うしろ 5 行の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>tail(<span style="color:#ae81ff">5</span>)
</code></pre></div><p>カラムを表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>columns
</code></pre></div><p>インデックスを表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>index
</code></pre></div><p>値を表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>values
</code></pre></div><p>各カラムのタイプを表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>dtypes
</code></pre></div><pre><code>pclass        int64
survived      int64
name         object
sex          object
age          object
sibsp         int64
parch         int64
ticket       object
fare         object
cabin        object
embarked     object
boat         object
body         object
home.dest    object
dtype: object
</code></pre><p>さらに詳しい DataFrame の基本情報を表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>info()
</code></pre></div><pre><code>RangeIndex: 1309 entries, 0 to 1308
Data columns (total 14 columns):
 #   Column     Non-Null Count  Dtype
---  ------     --------------  -----
 0   pclass     1309 non-null   int64
 1   survived   1309 non-null   int64
 2   name       1309 non-null   object
 3   sex        1309 non-null   object
 4   age        1309 non-null   object
 5   sibsp      1309 non-null   int64
 6   parch      1309 non-null   int64
 7   ticket     1309 non-null   object
 8   fare       1309 non-null   object
 9   cabin      1309 non-null   object
 10  embarked   1309 non-null   object
 11  boat       1309 non-null   object
 12  body       1309 non-null   object
 13  home.dest  1309 non-null   object
dtypes: int64(4), object(10)
memory usage: 143.3+ KB
</code></pre><h2 id="基本統計">基本統計</h2>
<p>基本統計の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>describe()
</code></pre></div><p>全てのカラムにおける統計の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>describe(include<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;all&#34;</span>)
</code></pre></div><h2 id="行列の抽出">行列の抽出</h2>
<p>行の抽出</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>loc[:, <span style="color:#e6db74">&#39;pclass&#39;</span>]

<span style="color:#75715e"># 以下のコードで同様の結果を得る</span>
df<span style="color:#f92672">.</span>pclass
df[<span style="color:#e6db74">&#34;pclass&#34;</span>]
</code></pre></div><pre><code>0       1
1       1
2       1
3       1
4       1
       ..
1304    3
1305    3
1306    3
1307    3
1308    3
Name: pclass, Length: 1309, dtype: int64
</code></pre><p>列の抽出</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>loc[<span style="color:#ae81ff">0</span>]
</code></pre></div><pre><code>pclass                                   1
survived                                 1
name         Allen, Miss. Elisabeth Walton
sex                                 female
age                                     29
sibsp                                    0
parch                                    0
ticket                               24160
fare                              211.3375
cabin                                   B5
embarked                                 S
boat                                     2
body                                     ?
home.dest                     St Louis, MO
Name: 0, dtype: object
</code></pre><h2 id="特定の行列の抽出">特定の行列の抽出</h2>
<p>行番号(index)が 100 から 104 の&quot;pclass&rdquo;, &ldquo;age&quot;のカラム</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>loc[range(<span style="color:#ae81ff">100</span>,<span style="color:#ae81ff">105</span>), [<span style="color:#e6db74">&#34;pclass&#34;</span>, <span style="color:#e6db74">&#34;age&#34;</span>]]
</code></pre></div><p>単独要素の抜き出し</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>at[<span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;ticket&#34;</span>]
</code></pre></div><pre><code>'367228'
</code></pre><p><code>loc</code>でも同様の結果を得るが、<code>at</code>の方が速い</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">%%</span>timeit
df<span style="color:#f92672">.</span>loc[<span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;ticket&#34;</span>]

    The slowest run took <span style="color:#ae81ff">14.63</span> times longer than the fastest<span style="color:#f92672">.</span> This could mean that an intermediate result <span style="color:#f92672">is</span> being cached<span style="color:#f92672">.</span>
    <span style="color:#ae81ff">100000</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">7.47</span> <span style="color:#960050;background-color:#1e0010">µ</span>s per loop

<span style="color:#f92672">%%</span>timeit
df<span style="color:#f92672">.</span>at[<span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;ticket&#34;</span>]

    The slowest run took <span style="color:#ae81ff">15.20</span> times longer than the fastest<span style="color:#f92672">.</span> This could mean that an intermediate result <span style="color:#f92672">is</span> being cached<span style="color:#f92672">.</span>
    <span style="color:#ae81ff">100000</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">4.26</span> <span style="color:#960050;background-color:#1e0010">µ</span>s per loop
</code></pre></div><h2 id="複雑な抽出">複雑な抽出</h2>
<p><code>survived</code> カラムが <code>1</code> である列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;survived&#34;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>]

df<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;survived == 1&#39;</span>)
</code></pre></div><p><code>embarked</code> カラムが <code>C</code> or <code>S</code> である列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;embarked&#34;</span>]<span style="color:#f92672">.</span>isin([<span style="color:#e6db74">&#34;C&#34;</span>, <span style="color:#e6db74">&#34;S&#34;</span>])]

df<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;embarked in [&#34;C&#34;, &#34;S&#34;]&#39;</span>)
</code></pre></div><p><code>name</code> が <code>A</code> で始まる列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;name&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;A&#34;</span>)]
</code></pre></div><p><code>name</code> が <code>e</code> で終わる列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;name&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>endswith(<span style="color:#e6db74">&#34;e&#34;</span>)]
</code></pre></div><p><code>name</code> に <code>z</code> が含まれる列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;name&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>contains(<span style="color:#e6db74">&#34;z&#34;</span>)]
</code></pre></div><p><code>name</code> に 別称(<code>()</code>で囲まれた名前)が含まれる列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;name&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>match(<span style="color:#e6db74">&#34;._\([^\)]_\).\*&#34;</span>)]
</code></pre></div><h2 id="dtype-の変更">dtype の変更</h2>
<p><code>age</code> カラムは <code>int</code> もしくは <code>float</code> で表されて欲しいが、現状 <code>Object</code> で認識されている</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>dtype <span style="color:#75715e">#&gt; dtype(&#39;O&#39;)</span>
</code></pre></div><p><code>age</code> カラムで数値以外の文字が含まれるものを抽出してみると、<code>?</code>が含まれることがわかった。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">set(df[df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>match(<span style="color:#e6db74">&#34;[^\d]&#34;</span>)][<span style="color:#e6db74">&#34;age&#34;</span>]) <span style="color:#75715e">#&gt; {&#39;?&#39;}</span>
</code></pre></div><p>なので<code>?</code>を<code>NaN</code>に変更してやれば、<code>float</code>への変換ができる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># 数値以外の文字列をNaNで置換</span>
df[<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>replace({<span style="color:#e6db74">&#39;?&#39;</span>: <span style="color:#e6db74">&#39;NaN&#39;</span>})

<span style="color:#75715e"># dtypeの変更</span>
df[<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>astype(float)
</code></pre></div><p>以下のよう<code>mask</code> や <code>where</code> を使う手もある</p>
<p><code>df[&quot;age&quot;] = df[&quot;age&quot;].mask(df[&quot;age&quot;].str.match(&quot;[^\d]&quot;))</code></p>
<p><code>df[&quot;age&quot;] = df[&quot;age&quot;].where(df[&quot;age&quot;].str.match(&quot;\d&quot;))</code></p>
<h2 id="欠損地の扱い">欠損地の扱い</h2>
<p><code>?</code> を <code>NaN</code>に置換して、<code>float</code>データとして扱わせる為、<code>NaN</code>は欠損値として扱われることになる。</p>
<p>欠損値でないものの数</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>count()<span style="color:#f92672">.</span>sum() <span style="color:#75715e">#&gt; 1046</span>
</code></pre></div><p>欠損値の数</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>isnull()<span style="color:#f92672">.</span>sum() <span style="color:#75715e">#&gt; 263</span>
</code></pre></div><p>欠損値がある行の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#39;age&#39;</span>]<span style="color:#f92672">.</span>isnull()]
</code></pre></div><p>欠損値を持つ行の削除 <code>dropna()</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">len(df<span style="color:#f92672">.</span>copy()<span style="color:#f92672">.</span>dropna()<span style="color:#f92672">.</span>index) <span style="color:#75715e">#&gt; 1046</span>
</code></pre></div><p>欠損値を持つ列の削除 <code>dropna(axis=1)</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">len(df<span style="color:#f92672">.</span>copy()<span style="color:#f92672">.</span>dropna(axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>columns) <span style="color:#75715e">#&gt; 13</span>
</code></pre></div><p>欠損値を 0 で置換 <code>fillna(0)</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>fillna(<span style="color:#ae81ff">0</span>)<span style="color:#f92672">.</span>at[<span style="color:#ae81ff">15</span>,<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#75715e">#&gt; 0.0</span>
</code></pre></div><p>欠損値を平均値で置換 <code>df.fillna(df.mean())</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>fillna(df<span style="color:#f92672">.</span>mean())<span style="color:#f92672">.</span>at[<span style="color:#ae81ff">15</span>,<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#75715e">#&gt; 29.8811345124283</span>
</code></pre></div><p>中央値 <code>median()</code></p>
<p>最頻値 <code>mode()</code></p>
<p>欠損値を前の値で置換 <code>df.fillna(method='ffill')</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ffill&#39;</span>)<span style="color:#f92672">.</span>loc[[<span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">16</span>]]

<span style="color:#960050;background-color:#1e0010">欠損値を後ろの値で置換</span> <span style="color:#e6db74">`df.fillna(method=&#39;bfill&#39;)`</span>
<span style="color:#e6db74">``</span><span style="color:#960050;background-color:#1e0010">`</span>python
df<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bfill&#39;</span>)<span style="color:#f92672">.</span>loc[[<span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">16</span>]]
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BashでFizzBuzzとか素数判定とか</title>
            <link>https://tomowarkar.github.io/blog/posts/bash_fizzbuzz/</link>
            <pubDate>Tue, 28 Apr 2020 20:05:19 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/bash_fizzbuzz/</guid>
            <description>オーソドックスな FizzBuzz 数値部を弄るだけで様々なパターンに対応できる. for i in {1..30}; do if (($i % 15 == 0)); then echo FizzBuzz elif (($i % 3 == 0)); then echo Fizz elif (($i % 5 == 0)); then echo Buzz else echo $i fi done awk</description>
            <content type="html"><![CDATA[<h2 id="オーソドックスな-fizzbuzz">オーソドックスな FizzBuzz</h2>
<p>数値部を弄るだけで様々なパターンに対応できる.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..30<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>$i % 15 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span>
        echo FizzBuzz
    <span style="color:#66d9ef">elif</span> <span style="color:#f92672">((</span>$i % 3 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span>
        echo Fizz
    <span style="color:#66d9ef">elif</span> <span style="color:#f92672">((</span>$i % 5 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span>
        echo Buzz
    <span style="color:#66d9ef">else</span>
        echo $i
    <span style="color:#66d9ef">fi</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><h2 id="awk-を用いた-fizzbuzz">awk を用いた FizzBuzz</h2>
<p>テキストを処理でよく用いられる<code>awk</code>を用いた処理.
こちらも処理内容としてはオーソドックス</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">30</span> | awk <span style="color:#e6db74">&#39;{
</span><span style="color:#e6db74">    if($1 % 15 == 0){
</span><span style="color:#e6db74">        print &#34;FizzBuzz&#34;
</span><span style="color:#e6db74">    }else if($1 % 3 == 0){
</span><span style="color:#e6db74">        print &#34;Fizz&#34;
</span><span style="color:#e6db74">    }else if($1 % 5 == 0){
</span><span style="color:#e6db74">        print &#34;Buzz&#34;
</span><span style="color:#e6db74">    }else{
</span><span style="color:#e6db74">        print $1}
</span><span style="color:#e6db74">    }&#39;</span>
</code></pre></div><h2 id="sed-を用いた-fizzbuzz">sed を用いた FizzBuzz</h2>
<p><code>n コマンド</code>を用いた少し特殊な FizzBuzz</p>
<p>短くワンライナーで書けてかっこいいが, パターンが変わる場合少し面倒</p>
<p>実行環境が Mac のため?か<code>3~3</code>(3 行目から 3 行毎)みたいな表記が使えない(方法あれば教えてください 🙇‍♀️)ので以下の実装。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span>
</code></pre></div><h3 id="0-から始まる場合">0 から始まる場合</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span>

<span style="color:#75715e"># きちんと30まで表示するには以下の様にする必要がある</span>
seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">34</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span> | head -n <span style="color:#ae81ff">31</span>
</code></pre></div><h3 id="面倒なところ">面倒なところ</h3>
<p>この表記はうまくいくが&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*$/Buzz/&#39;</span>

ans1<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span><span style="color:#e6db74">`</span>
ans2<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*$/Buzz/&#39;</span><span style="color:#e6db74">`</span>

diff &lt;<span style="color:#f92672">(</span>echo $ans1<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans2<span style="color:#f92672">)</span> <span style="color:#75715e">#&gt;None</span>
</code></pre></div><p>同じ様に<code>n;</code>を<code>N;</code>に変えるだけではうまくいかないこともある</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*$/Buzz/&#39;</span>

ans1<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span><span style="color:#e6db74">`</span>
ans2<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*$/Buzz/&#39;</span><span style="color:#e6db74">`</span>

diff &lt;<span style="color:#f92672">(</span>echo $ans1<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans2<span style="color:#f92672">)</span>
1c1
&lt; FizzBuzz <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> Fizz <span style="color:#ae81ff">4</span> Buzz Fizz <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> Fizz Buzz <span style="color:#ae81ff">11</span> Fizz <span style="color:#ae81ff">13</span> <span style="color:#ae81ff">14</span> FizzBuzz <span style="color:#ae81ff">16</span> <span style="color:#ae81ff">17</span> Fizz <span style="color:#ae81ff">19</span> Buzz Fizz <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> Fizz Buzz <span style="color:#ae81ff">26</span> Fizz <span style="color:#ae81ff">28</span> <span style="color:#ae81ff">29</span>
---
&gt; Fizz <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> Fizz Buzz <span style="color:#ae81ff">5</span> Fizz <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> FizzBuzz <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">11</span> Fizz <span style="color:#ae81ff">13</span> Buzz Fizz <span style="color:#ae81ff">16</span> <span style="color:#ae81ff">17</span> Fizz Buzz <span style="color:#ae81ff">20</span> Fizz <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> FizzBuzz <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">26</span> Fizz <span style="color:#ae81ff">28</span> Buzz
</code></pre></div><p>別に<code>ans1</code>の方で問題ないが上手い書き方はないものか&hellip;</p>
<h3 id="動作確認">動作確認</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ans1<span style="color:#f92672">=</span><span style="color:#e6db74">`</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..30<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>$i % 15 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span> echo FizzBuzz; <span style="color:#66d9ef">elif</span> <span style="color:#f92672">((</span>$i % 3 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span> echo Fizz; <span style="color:#66d9ef">elif</span> <span style="color:#f92672">((</span>$i % 5 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span> echo Buzz; <span style="color:#66d9ef">else</span> echo $i; <span style="color:#66d9ef">fi</span> <span style="color:#66d9ef">done</span><span style="color:#e6db74">`</span>
ans2<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">30</span> | awk <span style="color:#e6db74">&#39;{if($1 % 15 == 0){print &#34;FizzBuzz&#34;}else if($1 % 3 == 0){print &#34;Fizz&#34;}else if($1 % 5 == 0){print &#34;Buzz&#34;}else{print $1}}&#39;</span><span style="color:#e6db74">`</span>
ans3<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span><span style="color:#e6db74">`</span>

<span style="color:#75715e"># デバック用</span>
diff &lt;<span style="color:#f92672">(</span>echo $ans1<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans2<span style="color:#f92672">)</span> <span style="color:#75715e">#&gt; None</span>
diff &lt;<span style="color:#f92672">(</span>echo $ans2<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans3<span style="color:#f92672">)</span> <span style="color:#75715e">#&gt; None</span>
diff &lt;<span style="color:#f92672">(</span>echo $ans3<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans1<span style="color:#f92672">)</span> <span style="color:#75715e">#&gt; None</span>
</code></pre></div><h4 id="memo">memo</h4>
<p>BSD ではなく GNU の<code>sed</code>では以下の様にも描ける様だ(未確認)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;s/.*5$/Buzz/;3~3s/[0-9]*/Fizz/&#39;</span>
</code></pre></div><p>参考: <a href="https://qiita.com/gyu-don/items/f5440b16213200da9775">シェルコマンドで FizzBuzz</a></p>
<h3 id="素数判定">素数判定</h3>
<p>速度を考えないのであれば&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">isprime<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">[</span> $1 -lt <span style="color:#ae81ff">2</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">return</span>
    <span style="color:#f92672">[</span> $1 -eq <span style="color:#ae81ff">2</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $1 <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">for</span> p in <span style="color:#66d9ef">$(</span>seq <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">$(</span>expr $1 - 1<span style="color:#66d9ef">))</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#f92672">((</span>$1 % $p <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">done</span>
    echo $1
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">for</span> i in <span style="color:#66d9ef">$(</span>seq 100<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
    isprime $i
<span style="color:#66d9ef">done</span>
</code></pre></div><p><code>gfactor</code>(もしくは<code>factor</code>)を使う手もある(圧倒的に早い)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">100</span> | gfactor | awk <span style="color:#e6db74">&#39;NF == 2&#39;</span> | cut -d : -f1
</code></pre></div><h4 id="なんか書いたけど使わなかったコード供養">なんか書いたけど使わなかったコード供養</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">max<span style="color:#f92672">(){</span> <span style="color:#f92672">[</span> $1 -gt $2 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $1 <span style="color:#f92672">||</span> echo $2; <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>コマンドラインからyoutubeの再生リストを取得する</title>
            <link>https://tomowarkar.github.io/blog/posts/bash_youtube/</link>
            <pubDate>Tue, 28 Apr 2020 12:26:31 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/bash_youtube/</guid>
            <description>チャンネル ID 抜き出し $ echo https://www.youtube.com/user/HikakinTV/videos | cut -d &amp;#34;/&amp;#34; -f 5 HikakinTV タイトルを取得 $ curl -s https://www.youtube.com/user/HikakinTV/videos | grep &amp;#34;yt-lockup-title&amp;#34; | sed -e &amp;#34;s/.*title=\&amp;#34;\([^\&amp;#34;]*\)\&amp;#34;.*/\1/g&amp;#34; 【悲報】新iPhone SE全色自分ごと水没！４万円台で買えるコス</description>
            <content type="html"><![CDATA[<h3 id="チャンネル-id-抜き出し">チャンネル ID 抜き出し</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ echo https://www.youtube.com/user/HikakinTV/videos | cut -d <span style="color:#e6db74">&#34;/&#34;</span> -f <span style="color:#ae81ff">5</span>
HikakinTV
</code></pre></div><h3 id="タイトルを取得">タイトルを取得</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s https://www.youtube.com/user/HikakinTV/videos | grep <span style="color:#e6db74">&#34;yt-lockup-title&#34;</span> | sed -e <span style="color:#e6db74">&#34;s/.*title=\&#34;\([^\&#34;]*\)\&#34;.*/\1/g&#34;</span>
【悲報】新iPhone SE全色自分ごと水没！４万円台で買えるコスパ抜群のiphone!【開封レビュー】【カメラ比較】【ヒカキンTV】
スーパー店員時代のヤバい話・変なお客さん【金隠しおじさん&amp;amp;クーラーおじさん】
国からもらったマスク誕生日に開封レビューしてみたw【31歳】
【悲報】ヒカキン、斉藤さんでブチギレられる…コロナのこと聞いたら危機感ないので注意してみた
ヒカキン×香取慎吾の質問コーナーで裏話や突っ込んだこと沢山聞けましたwww
1000万円のヒカキンゲームスタジオついに完成！【ゲーミングPC】
小池都知事にコロナのこと質問しまくってみた【ヒカキンTV】【新型コロナウイルス】
【開封】ニンテンドースイッチどうぶつの森セット&amp;amp;スイッチライトコーラル！【Nintendo Switch】
僕の地元でコロナが。緊急事態宣言が出ても帰省は控えよう【拡散希望】
店員さんに優しくしてあげよう。
【削除覚悟】きりたんぽ同士で無理やり共食いさせてみた…【衝撃映像】
自宅で本気の味噌ラーメン作ったらお店レベルにwww【麺処くるり】【ヒカキン&amp;amp;セイキン】
LINEでビデオ通話したら香取慎吾さんドッキリ【後編】ユーチューバーにかけまくるw【ヒカキンTV】
若いみんなへ、ヒカキンより。
LINEでビデオ通話したら香取慎吾さんドッキリ【前編】ユーチューバーにかけまくるw【ヒカキンTV】
【ドッキリ】デカキンUUUM加入！サプライズで大号泣!?【UUUM新オフィス紹介】
【ドッキリ】デカキンに無断で２人一緒に金髪にしてみたら発狂w【ヒカキンも金髪】
【費用????万円】渋谷に超巨大ヒカキントラック走らせてみたwww
BTSに間違われて空港がパニックになりました…【ヒカキンTV】
卒業式が出来なかったみんなへ、ヒカキンより。
【感動】まるおともふこがもう一匹の兄弟と再会！もふこに超ソックリでビックリ!?【家族再会】
【拡散希望】マスク詐欺が許せない。その手口と被害防止について【家族を守ろう】【注意喚起】
炎上中に質問100個答えますw【登録者800万人記念生配信】
【デマで炎上】トイレットペーパー不足はヒカキンが買い占めたせい【マスク不足について】
人間より大きい超巨大わたあめ作ったら大変すぎたwww
【旅動画】総額120万円の高級ニューヨーク旅 &amp;amp; ヒカキン流緊急パッキング！【NewYork旅行】
【ランキング】ヒカキンが選ぶマジでウマいセブンのおにぎりTOP５発表！
ママと初めてのウーバーイーツ食べ放題で大パニックwww【Uber Eats】
【わたあめ王決定戦】わたあめ作り＆ 大食いバトルで１位は誰だ!!!【ヒカキンvs関根りさvsマスオ】
【超簡単】カップヌードルチャーハンを７種類作って1位を決めたらまさかの結果に!!【炒飯】
</code></pre></div><h3 id="動画-url-を取得">動画 URL を取得</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s https://www.youtube.com/user/HikakinTV/videos | grep <span style="color:#e6db74">&#34;yt-lockup-title&#34;</span> | sed -e <span style="color:#e6db74">&#34;s/.*href=\&#34;\([^\&#34;]*\)\&#34;.*/https:\/\/www.youtube.com\1/g&#34;</span>
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>zPHERhDPIJM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>KAfULYulCJM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>RlVB-Q8eLHk
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>b0k-fdXk28c
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>DEuruU-doQM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>cEdeotYQMCM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>ofCsslfc-So
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>rzziAEhCJhI
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>YybcDn5BJAg
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>o_lfRo1_52c
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>Qq0_H0Zx51E
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>VRovUa1ioOw
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>lWEb0E1LmjE
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>ThfRyRj_1KI
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>V27iErwCs2E
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>iI7Nx3nXrdk
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>YvCQ1UZeHnA
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>E0jUYAfFHIM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>D5gd_0dhQ00
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>VbHHk-Qw_nw
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>55dkC87QFU8
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>pqQDCOWtcZY
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>g8c0psnuDc8
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>rPTKNk1vU5w
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>WtYprWCWaVA
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>1LaaEldNh0Q
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>Np0xscEb3Dw
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>W5r3Y2TPZHo
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>anWsme7SRSs
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>jGbevSbPwOI
</code></pre></div>
    <img src="https://i.imgur.com/ZE6z532.png"  alt="blog top page"  class="center"  />


<p>うまくいってそう</p>
<h4 id="memo">memo</h4>
<ul>
<li>変更差分を取れば新規動画投稿のトリガーになりそう</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s https://www.youtube.com/user/HikakinTV/videos | grep -c <span style="color:#e6db74">&#34;yt-lockup-title&#34;</span>
<span style="color:#ae81ff">30</span>
</code></pre></div><ul>
<li>最新 30 件以上の動画の取得は<code>JavaScript</code>を用いた通信が用いられているためコマンドラインだけでは無理?</li>
<li>Chrome driver とか使う方が良さそう</li>
<li>grep 　正規表現の最短一致の記述がわからない <code>&quot;</code>内の最短一致を今回は<code>\&quot;\([^\&quot;]*\)\&quot;</code>この様に実装</li>
<li>python だと<code>\&quot;(.*?)\&quot;</code>これでいけた気がする</li>
<li>バックスラッシュの使い方が癖あるなぁ</li>
</ul>
<p>参考: <a href="https://qiita.com/hirohiro77/items/771ffb64dddceabf69a3">grep でこういう時はどうする?</a></p>
<h3 id="変更差分の取得例">変更差分の取得例</h3>
<p>簡単化のためテキストファイルを 5 行にして示す.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s https://www.youtube.com/user/HikakinTV/videos | grep <span style="color:#e6db74">&#34;yt-lockup-title&#34;</span> | sed -e <span style="color:#e6db74">&#34;s/.*href=\&#34;\([^\&#34;]*\)\&#34;.*/https:\/\/www.youtube.com\1/g&#34;</span> &gt; hikakin<span style="color:#e6db74">`</span>date +%y%m%d<span style="color:#e6db74">`</span>.txt

$ cat -b hikakin200427.txt hikakin200428.txt
     1	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>KAfULYulCJM
     2	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>RlVB-Q8eLHk
     3	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>b0k-fdXk28c
     4	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>DEuruU-doQM
     5	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>cEdeotYQMCM
     1	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>anWsme7SRSs
     2	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>jGbevSbPwOI
     3	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>KAfULYulCJM
     4	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>RlVB-Q8eLHk
     5	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>b0k-fdXk28c

$ diff hikakin200427.txt hikakin200428.txt | grep <span style="color:#e6db74">&#34;^&gt;\ &#34;</span> | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span>
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>anWsme7SRSs
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>jGbevSbPwOI
</code></pre></div><p>本件関係ないけど<code>diff</code>に関して 1 へぇ<a href="https://qiita.com/wingedtw/items/2f05c5d0c37d71f209f4">diff でコマンドの出力の結果を直接比較する。</a></p>
]]></content>
        </item>
        
        <item>
            <title>BashからLINE botにメッセージを送る</title>
            <link>https://tomowarkar.github.io/blog/posts/bash_line/</link>
            <pubDate>Tue, 28 Apr 2020 00:49:59 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/bash_line/</guid>
            <description>Mac で LINE を開くのすら面倒くさい時用 LINE Messaging API send push message line.sh #!/bin/bash # @(#) Send message to line bot. TOKEN=&amp;#34;your token&amp;#34; TO=&amp;#34;your userId on bot&amp;#34; pushMsg() { curl -s -X POST https://api.line.me/v2/bot/message/push \ -H &amp;#34;Content-Type: application/json&amp;#34; \ -H &amp;#34;Authorization: Bearer $TOKEN&amp;#34; \ -d &amp;#34;{ \&amp;#34;to\&amp;#34;: \&amp;#34;$TO\&amp;#34;, \&amp;#34;messages\&amp;#34;:[ { \&amp;#34;type\&amp;#34;:\&amp;#34;text\&amp;#34;, \&amp;#34;text\&amp;#34;:\&amp;#34;$1\&amp;#34; } ] }&amp;#34; } res=$(pushMsg &amp;#34;$1&amp;#34; | jq</description>
            <content type="html"><![CDATA[<p>Mac で LINE を開くのすら面倒くさい時用</p>
<ul>
<li><a href="https://developers.line.biz/ja/services/messaging-api/">LINE Messaging API</a></li>
<li><a href="https://developers.line.biz/ja/docs/messaging-api/sending-messages/#methods-of-sending-message">send push message</a></li>
</ul>
<h4 id="linesh">line.sh</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># @(#) Send message to line bot.</span>

TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your token&#34;</span>
TO<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your userId on bot&#34;</span>

pushMsg<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    curl -s -X POST https://api.line.me/v2/bot/message/push <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        -H <span style="color:#e6db74">&#34;Content-Type: application/json&#34;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        -H <span style="color:#e6db74">&#34;Authorization: Bearer </span>$TOKEN<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        -d <span style="color:#e6db74">&#34;{
</span><span style="color:#e6db74">        \&#34;to\&#34;: \&#34;</span>$TO<span style="color:#e6db74">\&#34;,
</span><span style="color:#e6db74">        \&#34;messages\&#34;:[
</span><span style="color:#e6db74">            {
</span><span style="color:#e6db74">                \&#34;type\&#34;:\&#34;text\&#34;,
</span><span style="color:#e6db74">                \&#34;text\&#34;:\&#34;</span>$1<span style="color:#e6db74">\&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">        ]
</span><span style="color:#e6db74">    }&#34;</span>
<span style="color:#f92672">}</span>

res<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>pushMsg <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> | jq <span style="color:#e6db74">&#34;.message&#34;</span><span style="color:#66d9ef">)</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$res<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;null&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    echo <span style="color:#e6db74">&#34;done!&#34;</span>
<span style="color:#66d9ef">else</span>
    echo $res
<span style="color:#66d9ef">fi</span>
exit <span style="color:#ae81ff">0</span>
</code></pre></div><h3 id="usage">Usage</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ <span style="color:#75715e"># 成功した場合</span>
$ sh line.sh こんにちは
<span style="color:#66d9ef">done</span>!

$ <span style="color:#75715e"># 不正なToを指定した場合(例)</span>
$ sh line.sh こんにちは
<span style="color:#e6db74">&#34;The property, &#39;to&#39;, in the request body is invalid (line: -, column: -)&#34;</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Gmail API 受信フォルダの内容確認</title>
            <link>https://tomowarkar.github.io/blog/posts/gmail_api/</link>
            <pubDate>Tue, 28 Apr 2020 00:01:07 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/gmail_api/</guid>
            <description>コロナウイルス拡大に伴い、普段使っている UQ モバイルで学生向け（25 歳以下）に UQ mobile データ容量 30GB まで無償提供が発表された。 新型コロナウイルス感染</description>
            <content type="html"><![CDATA[<p>コロナウイルス拡大に伴い、普段使っている UQ モバイルで学生向け（25 歳以下）に UQ mobile データ容量 30GB まで無償提供が発表された。</p>
<p><a href="https://www.uqwimax.jp/annai/news_release/202004061.html">新型コロナウイルス感染症の影響拡大に伴う支援措置について</a></p>
<p>説明をよく読んでみると</p>
<blockquote>
<p>このたび、新型コロナウィルス感染症の拡大による学校・教育機関等の休校措置を踏まえ、学生のオンライン授業の利用等を支援するため、2020 年 4 月 1 日から 2020 年 4 月 30 日まで、25 歳以下のお客さまを対象（注 2）に、UQ mobile サービス(スマートフォンサービス)において、月間データ容量超過後に追加した 30GB までのデータ容量を無償で提供します（注 3）。</p>
</blockquote>
<blockquote>
<p>お客さまが「UQ mobile ポータルアプリ」または「データチャージサイト」より、追加でチャージしていただく必要がございます（注 5） 。データチャージによる追加購入手続き時の画面等には無償化対象となることが記載されませんが、本支援措置の適用条件を満たしたお客さまは、自動的に割引対象となります。</p>
</blockquote>
<blockquote>
<p>（注 5）最大 30GB を無償でご利用いただくためには、「500MB 単位」でのご購入手続きが必要となります。</p>
</blockquote>
<p>などとあり、かなりわかりづらく使いづらい仕様になっていることがわかる。最大 30GB 使うのには 60 回チャージしないとダメで、さらにそれが本当に割引されているかは引き落としまで分からないという恐怖である。やってるよっていう建前だけな気がしないでもない。</p>
<p>そもそも引き落としされるまで追加分が割引されるのかされないのか分からない仕様ってどうなんだろうか。ミスチャージによる課金を誘っている感が物すごい。（注 5）を読まずに 500MB 以上の単位で最大 30GB 分の追加チャージをすれば 30,000 円分の請求が来るのだろうか.そうなれば支援どころかコロナでお金を稼ぐ手段が限られる学生をより窮地に立たせることになる気がするのだが&hellip;</p>
<p>まあそれは置いておいて、この支援をより効率よく使いたいなということで Gmail API を使って自動化してしまおうという試み。</p>
<h2 id="前提">前提</h2>
<ul>
<li>UQ モバイルではデータ通信量が制限に近づくと自動メールが送られる</li>
<li>そのメールを元に UQ モバイルのデータチャージサイトへログイン, 500MB 分のチャージを行う</li>
</ul>
<p>以上二つのサイクルを月間 60 回(30GB 分)の制限をつけて自動化</p>
<p>今回は Gmail API の部分のみ</p>
<h2 id="セットアップ">セットアップ</h2>
<p><a href="https://developers.google.com/gmail/api/quickstart/python">https://developers.google.com/gmail/api/quickstart/python</a></p>
<h2 id="main">main</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pickle
<span style="color:#f92672">import</span> os.path
<span style="color:#f92672">from</span> googleapiclient.discovery <span style="color:#f92672">import</span> build
<span style="color:#f92672">from</span> google_auth_oauthlib.flow <span style="color:#f92672">import</span> InstalledAppFlow
<span style="color:#f92672">from</span> google.auth.transport.requests <span style="color:#f92672">import</span> Request

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GmailBase</span>:
    <span style="color:#75715e"># If modifying these scopes, delete the file token.pickle.</span>
    SCOPES <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;https://www.googleapis.com/auth/gmail.readonly&#34;</span>]
    <span style="color:#66d9ef">def</span> __init__(self, credentials_path):
        self<span style="color:#f92672">.</span>credentials_path <span style="color:#f92672">=</span> credentials_path
        self<span style="color:#f92672">.</span>service <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>build()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">build</span>(self):
        creds <span style="color:#f92672">=</span> None
        <span style="color:#75715e"># The file token.pickle stores the user&#39;s access and refresh tokens, and is</span>
        <span style="color:#75715e"># created automatically when the authorization flow completes for the first</span>
        <span style="color:#75715e"># time.</span>
        <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#34;token.pickle&#34;</span>):
            <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;token.pickle&#34;</span>, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> token:
                creds <span style="color:#f92672">=</span> pickle<span style="color:#f92672">.</span>load(token)
        <span style="color:#75715e"># If there are no (valid) credentials available, let the user log in.</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> creds <span style="color:#f92672">or</span> <span style="color:#f92672">not</span> creds<span style="color:#f92672">.</span>valid:
            <span style="color:#66d9ef">if</span> creds <span style="color:#f92672">and</span> creds<span style="color:#f92672">.</span>expired <span style="color:#f92672">and</span> creds<span style="color:#f92672">.</span>refresh_token:
                creds<span style="color:#f92672">.</span>refresh(Request())
            <span style="color:#66d9ef">else</span>:
                flow <span style="color:#f92672">=</span> InstalledAppFlow<span style="color:#f92672">.</span>from_client_secrets_file(
                    self<span style="color:#f92672">.</span>credentials_path, self<span style="color:#f92672">.</span>SCOPES)
                creds <span style="color:#f92672">=</span> flow<span style="color:#f92672">.</span>run_local_server(port<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
            <span style="color:#75715e"># Save the credentials for the next run</span>
            <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;token.pickle&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> token:
                pickle<span style="color:#f92672">.</span>dump(creds, token)

        <span style="color:#66d9ef">return</span> build(<span style="color:#e6db74">&#34;gmail&#34;</span>, <span style="color:#e6db74">&#34;v1&#34;</span>, credentials<span style="color:#f92672">=</span>creds)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GmailApiHandler</span>(GmailBase):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">list_labels</span>(self, userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;me&#34;</span>):
        <span style="color:#e6db74">&#34;&#34;&#34;Lists the user&#39;s Gmail labels.&#34;&#34;&#34;</span>
        results <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>labels()<span style="color:#f92672">.</span>list(
            userId<span style="color:#f92672">=</span>userId)<span style="color:#f92672">.</span>execute()
        labels <span style="color:#f92672">=</span> results<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;labels&#39;</span>, [])

        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> labels:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;No labels found.&#39;</span>)
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Labels:&#39;</span>)
            <span style="color:#66d9ef">for</span> label <span style="color:#f92672">in</span> labels:
                <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>, label[<span style="color:#e6db74">&#39;name&#39;</span>])

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find_messages</span>(self, userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;me&#34;</span>, count<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, query<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>):
        <span style="color:#e6db74">&#34;&#34;&#34;Returns the user&#39;s Gmail ids.&#34;&#34;&#34;</span>
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>messages()<span style="color:#f92672">.</span>list(
            userId<span style="color:#f92672">=</span>userId, maxResults<span style="color:#f92672">=</span>count, q<span style="color:#f92672">=</span>query)<span style="color:#f92672">.</span>execute()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">message_detail</span>(self, message_id, userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;me&#34;</span>):
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>messages()<span style="color:#f92672">.</span>get(userId<span style="color:#f92672">=</span>userId, id<span style="color:#f92672">=</span>message_id)<span style="color:#f92672">.</span>execute()
</code></pre></div><h2 id="usage">usage</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">gmail <span style="color:#f92672">=</span> GmailApiHandler(<span style="color:#e6db74">&#34;credentials.json&#34;</span>)
gmail_ids <span style="color:#f92672">=</span> gmail<span style="color:#f92672">.</span>find_messages(count<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, query<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UQ mobile データ通信量のご案内&#34;</span>)
gmail_id <span style="color:#f92672">=</span> gmail_ids<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;messages&#34;</span>)[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;id&#34;</span>)
message_details <span style="color:#f92672">=</span> gmail<span style="color:#f92672">.</span>message_detail(gmail_id)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_mail</span>(message_details):
    [subject] <span style="color:#f92672">=</span> list(filter(
        <span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;name&#34;</span>)<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;Subject&#34;</span>,
        message_details<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;payload&#34;</span>)<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;headers&#34;</span>)
    ))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;title:&#34;</span>, subject<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;value&#34;</span>))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;text: &#34;</span>, message_details<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;snippet&#34;</span>))

show_mail(message_details)
</code></pre></div><h4 id="out">out</h4>
<pre><code>title: UQ mobile データ通信量のご案内（自動送信メール）
text:  2020/04/27 21:05:31 ID：hogehoge 様日頃よりUQ mobileをご利用いただき誠にありがとうございます。 ご契約回線のデータ通信量のご利用状況について、お知らせいたします。 データ残量がなくなった場合、月末までデータ通信の速度に制限がかかります。 【電話番号】 08000000000 【データプラン】 データ高速（999GB） 【基本データ残量※】 0 MB ※上記
</code></pre><h3 id="日時とかデータ量とかの抽出">日時とかデータ量とかの抽出</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">extract</span>(text):
    date <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\d{4}/\d{2}/\d{2}\ \d{2}:\d{2}:\d{2}&#34;</span>, text)
    amount <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;【基本データ残量※】\ (\d)*&#34;</span>, text)
    <span style="color:#66d9ef">return</span> date, amount

text <span style="color:#f92672">=</span> message_details<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;snippet&#34;</span>)

<span style="color:#66d9ef">try</span>:
    [date], [amount] <span style="color:#f92672">=</span> extract(text)
<span style="color:#66d9ef">except</span>:
    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(f<span style="color:#e6db74">&#34;Undefined format: </span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">{text}&#34;</span>)

<span style="color:#66d9ef">print</span>(date, amount) <span style="color:#75715e">#&gt; 2020/04/27 21:05:31 0</span>
</code></pre></div><p>この本文内容を元にデータチャージ実行を行うかを判定し、データチャージの実行をさせると良さげ。</p>
<p>Gmail API の(初めてさわる)部分ができればあとは難しくないので、気が向けば続き描きます(多分書かない)</p>
<h3 id="uq-モバイルデータチャージサイト">UQ モバイルデータチャージサイト</h3>
<p>追加データが 0 になった時即時にデータチャージをするのであればメールをトリガーにするのがいいが、定時実行であれば以下のが楽かも。</p>
<h3 id="-注意">※ 注意</h3>
<p><a href="https://www.uqwimax.jp/signup/term/files/myuqmobile_service.pdf">my UQ mobile 利用規約</a>第８条の以下の部分に該当, 抵触する可能性があります。</p>
<blockquote>
<p>(12) 逆アセンブル、逆コンパイル、リバースエンジニアリング等、またはその他ソースコ
ード、構造、アイディア等を解析するような行為</p>
</blockquote>
<p>また該当しない場合においても、本来想定された利用法とは異なる操作を行っています。
いかなる損害が生じたとしても、当方は一切責任を負いませんのでコードの流用は自己責任でお願いします。</p>
<h4 id="追加データ残量の取得">追加データ残量の取得</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -F <span style="color:#e6db74">&#34;username=your username&#34;</span> -F <span style="color:#e6db74">&#34;password=your pass&#34;</span><span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  -sL https://dc.uqmobile.jp/login.action | grep -A <span style="color:#ae81ff">1</span> <span style="color:#e6db74">&#34;追加データ残量&#34;</span> | grep <span style="color:#e6db74">&#34;info-value&#34;</span> | sed -e <span style="color:#e6db74">&#34;s/.*&gt;\(.*\)&lt;\/span&gt;.*/\1/g&#34;</span> -e <span style="color:#e6db74">&#34;s/&amp;nbsp;//g&#34;</span>
0.16GB

<span style="color:#75715e"># テンプレート</span>
$ echo; echo <span style="color:#e6db74">&#34;UQモバイル 追加データの残量を表示します。ユーザー名とパスワードを入力してください&#34;</span>;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>read -sp <span style="color:#e6db74">&#34;username: &#34;</span> username; echo; read -sp <span style="color:#e6db74">&#34;password: &#34;</span> password; echo;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>curl -F <span style="color:#e6db74">&#34;username=</span>$username<span style="color:#e6db74">&#34;</span> -F <span style="color:#e6db74">&#34;password=</span>$password<span style="color:#e6db74">&#34;</span> -sL https://dc.uqmobile.jp/login.action |<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>grep -A <span style="color:#ae81ff">1</span> <span style="color:#e6db74">&#34;追加データ残量&#34;</span> | grep <span style="color:#e6db74">&#34;info-value&#34;</span> |<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sed -e <span style="color:#e6db74">&#34;s/.*&gt;\(.*\)&lt;\/span&gt;.*/追加データ残量: \1/g&#34;</span> -e <span style="color:#e6db74">&#34;s/&amp;nbsp;//g&#34;</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #05 前半</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-05/</link>
            <pubDate>Fri, 24 Apr 2020 10:51:15 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-05/</guid>
            <description>言語処理 100 本ノック(第 5 章: 係り受け解析) 夏目漱石の小説『吾輩は猫である』の文章（neko.txt）を CaboCha を使って係り受け解析し，その結果を neko.txt.cabocha</description>
            <content type="html"><![CDATA[<h2 id="言語処理-100-本ノック第-5-章-係り受け解析httpsnlp100githubiojach05html"><a href="https://nlp100.github.io/ja/ch05.html">言語処理 100 本ノック(第 5 章: 係り受け解析)</a></h2>
<blockquote>
<p>夏目漱石の小説『吾輩は猫である』の文章（neko.txt）を CaboCha を使って係り受け解析し，その結果を neko.txt.cabocha というファイルに保存せよ．このファイルを用いて，以下の問に対応するプログラムを実装せよ．</p>
</blockquote>
<h3 id="環境">環境</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ python3 -V
Python 3.6.8

$ cabocha --version
cabocha of 0.69
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat neko.txt | cabocha -f1 &gt; neko.txt.cabocha
$ more neko.txt.cabocha
* <span style="color:#ae81ff">0</span> -1D 0/0 0.000000
一      名詞,数,*,*,*,*,一,イチ,イチ
EOS
EOS
* <span style="color:#ae81ff">0</span> -1D 1/1 0.000000
　      記号,空白,*,*,*,*,　,　,　
吾輩は猫である  名詞,固有名詞,一般,*,*,*,吾輩は猫である,ワガハイハネコデアル,ワガハイワネコデアル
。      記号,句点,*,*,*,*,。,。,。
EOS
* <span style="color:#ae81ff">0</span> 2D 0/1 -1.911675
名前    名詞,一般,*,*,*,*,名前,ナマエ,ナマエ
は      助詞,係助詞,*,*,*,*,は,ハ,ワ
* <span style="color:#ae81ff">1</span> 2D 0/0 -1.911675
まだ    副詞,助詞類接続,*,*,*,*,まだ,マダ,マダ
* <span style="color:#ae81ff">2</span> -1D 0/0 0.000000
無い    形容詞,自立,*,*,形容詞・アウオ段,基本形,無い,ナイ,ナイ
。      記号,句点,*,*,*,*,。,。,。
EOS
</code></pre></div><h3 id="40-係り受け解析結果の読み込み形態素">40. 係り受け解析結果の読み込み（形態素）</h3>
<p>形態素を表すクラス Morph を実装せよ．このクラスは表層形（surface），基本形（base），品詞（pos），品詞細分類 1（pos1）をメンバ変数に持つこととする．さらに，CaboCha の解析結果（neko.txt.cabocha）を読み込み，各文を Morph オブジェクトのリストとして表現し，3 文目の形態素列を表示せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Morph</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;cabochaの形態素解析結果
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">        line (str): e.x. &#39;名前</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">名詞,一般,*,*,*,*,名前,ナマエ,ナマエ&#39;
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">        surface (str): 表層形
</span><span style="color:#e6db74">        base (str): 基本形
</span><span style="color:#e6db74">        pos (str): 品詞
</span><span style="color:#e6db74">        pos1 (str): 品詞細分類1
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">def</span> __init__(self, line):
        pattern <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;^([^,]*?)\t([^,]*?),([^,]*?)(?:,[^,]*?){4},([^,]*?)(?:(?:,[^,]*?){2})?$&#34;</span>
        <span style="color:#66d9ef">try</span>:
            [(self<span style="color:#f92672">.</span>surface, self<span style="color:#f92672">.</span>pos, self<span style="color:#f92672">.</span>pos1, self<span style="color:#f92672">.</span>base)] <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(pattern, line)
        <span style="color:#66d9ef">except</span>:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(f<span style="color:#e6db74">&#34;Invalid line pattern: </span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">{repr(line)}&#34;</span>, )

    <span style="color:#66d9ef">def</span> __str__(self):
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>surface

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_cabocha</span>(file_name):
    <span style="color:#66d9ef">with</span> open(file_name) <span style="color:#66d9ef">as</span> f:
        lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

    p <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>compile(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;^\*\ \d+\ (?:-1|\d+)D\ \d+\/\d+\ -?\d+\.\d+$&#34;</span>)
    sentence<span style="color:#f92672">=</span>[]
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
        <span style="color:#66d9ef">if</span> line <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;EOS&#34;</span>:
            <span style="color:#66d9ef">if</span> sentence:
                <span style="color:#66d9ef">yield</span> sentence
            sentence <span style="color:#f92672">=</span> []
            <span style="color:#66d9ef">continue</span>
        <span style="color:#66d9ef">elif</span> p<span style="color:#f92672">.</span>match(line):
            <span style="color:#66d9ef">continue</span>
        sentence<span style="color:#f92672">.</span>append(Morph(line))

sentences <span style="color:#f92672">=</span> list(read_cabocha(<span style="color:#e6db74">&#34;neko.txt.cabocha&#34;</span>))
<span style="color:#66d9ef">print</span>(list(map(str, sentences[<span style="color:#ae81ff">2</span>]))) <span style="color:#75715e">#&gt; [&#39;名前&#39;, &#39;は&#39;, &#39;まだ&#39;, &#39;無い&#39;, &#39;。&#39;]</span>
</code></pre></div><p>参考: <a href="http://taku910.github.io/cabocha/">係り受け解析レイヤの出力フォーマット</a></p>
<p>sentences ⊃ sentence = chunks ⊃ chunk = morphs ⊃ morph</p>
<h5 id="memo">memo</h5>
<ul>
<li>attributes は<code>'名前\t名詞,一般,*,*,*,*,名前,ナマエ,ナマエ\n'</code>のように(surface を除く)9 つがデフォ</li>
<li><code>'頸筋\t名詞,一般,*,*,*,*,*\n'</code>この様に attributes が 7 つしかないものもある</li>
</ul>
<h3 id="41-係り受け解析結果の読み込み文節係り受け">41. 係り受け解析結果の読み込み（文節・係り受け）</h3>
<p>40 に加えて，文節を表すクラス Chunk を実装せよ．このクラスは形態素（Morph オブジェクト）のリスト（morphs），係り先文節インデックス番号（dst），係り元文節インデックス番号のリスト（srcs）をメンバ変数に持つこととする．さらに，入力テキストの CaboCha の解析結果を読み込み，１文を Chunk オブジェクトのリストとして表現し，8 文目の文節の文字列と係り先を表示せよ．第 5 章の残りの問題では，ここで作ったプログラムを活用せよ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Chunk</span>:
    <span style="color:#66d9ef">def</span> __init__(self, dst):
        self<span style="color:#f92672">.</span>morphs <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>srcs <span style="color:#f92672">=</span> []
        self<span style="color:#f92672">.</span>dst <span style="color:#f92672">=</span> dst

    <span style="color:#66d9ef">def</span>  __str__(self):
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(list(map(str, self<span style="color:#f92672">.</span>morphs)))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_cabocha_v2</span>(file):
    <span style="color:#66d9ef">with</span> open(file) <span style="color:#66d9ef">as</span> f:
        sentences <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;EOS</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

    p <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>compile(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\*\ (\d+)\ (-1|\d+)D\ \d+\/\d+\ -?\d+\.\d+&#34;</span>)
    <span style="color:#66d9ef">for</span> sentence <span style="color:#f92672">in</span> sentences:
        dep <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>findall(sentence)
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> dep:
            <span style="color:#66d9ef">continue</span>

        chunks <span style="color:#f92672">=</span> []
        <span style="color:#66d9ef">for</span> (index, dst) <span style="color:#f92672">in</span> dep:
            c <span style="color:#f92672">=</span> Chunk(int(dst))
            c<span style="color:#f92672">.</span>srcs <span style="color:#f92672">=</span> [int(f) <span style="color:#66d9ef">for</span> f, t <span style="color:#f92672">in</span> dep <span style="color:#66d9ef">if</span> t <span style="color:#f92672">==</span> index]
            chunks<span style="color:#f92672">.</span>append(c)

        cnt <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> sentence<span style="color:#f92672">.</span>splitlines():
            <span style="color:#66d9ef">if</span> p<span style="color:#f92672">.</span>match(line):
                cnt <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
                <span style="color:#66d9ef">continue</span>
            <span style="color:#66d9ef">else</span>:
                chunks[cnt]<span style="color:#f92672">.</span>morphs<span style="color:#f92672">.</span>append(Morph(line))
        <span style="color:#66d9ef">yield</span> chunks

sentences <span style="color:#f92672">=</span> list(read_cabocha_v2(<span style="color:#e6db74">&#34;neko.txt.cabocha&#34;</span>))
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sentence <span style="color:#f92672">=</span> sentences[<span style="color:#ae81ff">5</span>] <span style="color:#75715e"># 空文を除しているので6行目が該当部</span>
<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{i}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{chunk.dst}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>, chunk)
</code></pre></div><h4 id="out">out</h4>
<pre><code>0	5	 吾輩 は
1	2	 ここ で
2	3	 始め て
3	4	 人間 という
4	5	 もの を
5	-1	 見 た 。
</code></pre><h3 id="42-係り元と係り先の文節の表示">42. 係り元と係り先の文節の表示</h3>
<p>係り元の文節と係り先の文節のテキストをタブ区切り形式ですべて抽出せよ．ただし，句読点などの記号は出力しないようにせよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sentence <span style="color:#f92672">=</span> sentences[<span style="color:#ae81ff">5</span>]
<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: list(filter(<span style="color:#66d9ef">lambda</span> y: y<span style="color:#f92672">.</span>pos <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;記号&#34;</span> , x))
    dst <span style="color:#f92672">=</span> i <span style="color:#66d9ef">if</span> chunk<span style="color:#f92672">.</span>dst <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">else</span> chunk<span style="color:#f92672">.</span>dst
    <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>f(chunk<span style="color:#f92672">.</span>morphs),<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">*</span>f(sentence[dst]<span style="color:#f92672">.</span>morphs))
</code></pre></div><h4 id="out-1">out</h4>
<pre><code>吾輩 は 	 見 た
ここ で 	 始め て
始め て 	 人間 という
人間 という 	 もの を
もの を 	 見 た
見 た 	 見 た
</code></pre><h3 id="43-名詞を含む文節が動詞を含む文節に係るものを抽出">43. 名詞を含む文節が動詞を含む文節に係るものを抽出</h3>
<p>名詞を含む文節が，動詞を含む文節に係るとき，これらをタブ区切り形式で抽出せよ．ただし，句読点などの記号は出力しないようにせよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sentence <span style="color:#f92672">=</span> sentences[<span style="color:#ae81ff">5</span>]
<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    <span style="color:#66d9ef">if</span> chunk<span style="color:#f92672">.</span>dst <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
        <span style="color:#66d9ef">continue</span>
    f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y: any([m<span style="color:#f92672">.</span>pos<span style="color:#f92672">==</span>y <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> x])
    a, b <span style="color:#f92672">=</span> chunk<span style="color:#f92672">.</span>morphs, sentence[chunk<span style="color:#f92672">.</span>dst]<span style="color:#f92672">.</span>morphs
    <span style="color:#66d9ef">if</span> f(a, <span style="color:#e6db74">&#34;名詞&#34;</span>) <span style="color:#f92672">and</span> f(b, <span style="color:#e6db74">&#34;動詞&#34;</span>):
        f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: list(filter(<span style="color:#66d9ef">lambda</span> y: y<span style="color:#f92672">.</span>pos <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;記号&#34;</span> , x))
        <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>f(a),<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">*</span>f(b))
</code></pre></div><h4 id="out-2">out</h4>
<pre><code>吾輩 は 	 見 た
ここ で 	 始め て
もの を 	 見 た
</code></pre><h3 id="44-係り受け木の可視化">44. 係り受け木の可視化</h3>
<p>与えられた文の係り受け木を有向グラフとして可視化せよ．可視化には，係り受け木を DOT 言語に変換し，Graphviz を用いるとよい．また，Python から有向グラフを直接的に可視化するには，pydot を使うとよい．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pydot <span style="color:#f92672">import</span> Dot, Edge, Node
graph <span style="color:#f92672">=</span> Dot(graph_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;digraph&#39;</span>)

<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    node <span style="color:#f92672">=</span> Node(i, label <span style="color:#f92672">=</span> chunk)
    graph<span style="color:#f92672">.</span>add_node(node)

<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    <span style="color:#66d9ef">if</span> chunk<span style="color:#f92672">.</span>dst <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
        edge <span style="color:#f92672">=</span> Edge(i, chunk<span style="color:#f92672">.</span>dst)
        graph<span style="color:#f92672">.</span>add_edge(edge)

<span style="color:#f92672">from</span> PIL <span style="color:#f92672">import</span> Image
<span style="color:#f92672">from</span> io <span style="color:#f92672">import</span> BytesIO
img <span style="color:#f92672">=</span> Image<span style="color:#f92672">.</span>open(BytesIO(graph<span style="color:#f92672">.</span>create_png()))
img<span style="color:#f92672">.</span>show()
</code></pre></div>
    <img src="https://i.imgur.com/HnpGEwK.png"  alt="blog top page"  class="center"  />


]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #04</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-04/</link>
            <pubDate>Fri, 24 Apr 2020 07:07:28 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-04/</guid>
            <description>言語処理 100 本ノック(第 4 章: 形態素解析) 夏目漱石の小説『吾輩は猫である』の文章（[neko.txt](https://nlp100.gith</description>
            <content type="html"><![CDATA[<h2 id="言語処理-100-本ノック第-4-章-形態素解析httpsnlp100githubiojach04html"><a href="https://nlp100.github.io/ja/ch04.html">言語処理 100 本ノック(第 4 章: 形態素解析)</a></h2>
<blockquote>
<p>夏目漱石の小説『吾輩は猫である』の文章（[neko.txt](<a href="https://nlp100.github.io/data/neko.txt">https://nlp100.github.io/data/neko.txt</a>）を MeCab を使って形態素解析し，その結果を neko.txt.mecab というファイルに保存せよ．このファイルを用いて，以下の問に対応するプログラムを実装せよ．</p>
<p>なお，問題 37, 38, 39 は matplotlib もしくは Gnuplot を用いるとよい．</p>
</blockquote>
<h3 id="環境">環境</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ python3 -V
Python 3.6.8
</code></pre></div><h4 id="mecab">mecab</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mecab --version
mecab of 0.996

$ more /usr/local/etc/mecabrc
;
; Configuration file of MeCab
;
; $Id: mecabrc.in,v 1.3 2006/05/29 15:36:08 taku-ku Exp $;
;
;dicdir <span style="color:#f92672">=</span>  /usr/local/lib/mecab/dic/ipadic
dicdir <span style="color:#f92672">=</span> /usr/local/lib/mecab/dic/mecab-ipadic-neologd
userdic <span style="color:#f92672">=</span> /path/to/user.dic

; output-format-type <span style="color:#f92672">=</span> wakati
; input-buffer-size <span style="color:#f92672">=</span> <span style="color:#ae81ff">8192</span>

; node-format <span style="color:#f92672">=</span> %m<span style="color:#ae81ff">\n</span>
; bos-format <span style="color:#f92672">=</span> %S<span style="color:#ae81ff">\n</span>
; eos-format <span style="color:#f92672">=</span> EOS<span style="color:#ae81ff">\n</span>
</code></pre></div><h5 id="memo">memo</h5>
<ul>
<li>mecab を通すと<code>surface\tpos,pos1,pos2,pos3,conjugation,form,base,read,spell\n</code>の形に解析結果が出力される</li>
</ul>
<p>久しぶりに mecab を触ったら以下のエラーが出た。どうやら昔定義したユーザー辞書が見つからないらしい。</p>
<p>なので mecab の設定ファイル(<code>/usr/local/etc/mecabrc</code>(Mac OS X))から<code>userdic = /path/to/user.dic</code>の 1 行を消してあげれば問題なく動く。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mecab
viterbi.cpp<span style="color:#f92672">(</span>50<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>tokenizer_-&gt;open<span style="color:#f92672">(</span>param<span style="color:#f92672">)]</span> tokenizer.cpp<span style="color:#f92672">(</span>127<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>d-&gt;open<span style="color:#f92672">(</span>dicfile<span style="color:#f92672">[</span>i<span style="color:#f92672">])]</span> dictionary.cpp<span style="color:#f92672">(</span>79<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>dmmap_-&gt;open<span style="color:#f92672">(</span>file, mode<span style="color:#f92672">)]</span> no such file or directory: /path/to/user.dic
</code></pre></div><h3 id="30-形態素解析結果の読み込み">30. 形態素解析結果の読み込み)</h3>
<p>形態素解析結果（neko.txt.mecab）を読み込むプログラムを実装せよ．ただし，各形態素は表層形（surface），基本形（base），品詞（pos），品詞細分類 1（pos1）をキーとするマッピング型に格納し，1 文を形態素（マッピング型）のリストとして表現せよ．第 4 章の残りの問題では，ここで作ったプログラムを活用せよ．</p>
<h4 id="download-nekotxt">Download neko.txt</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -Os https://nlp100.github.io/data/neko.txt
$ :&gt; neko.txt.mecab <span style="color:#f92672">&amp;&amp;</span> mecab &lt; neko.txt &gt; neko.txt.mecab
$ more neko.txt.mecab
一      名詞,数,*,*,*,*,一,イチ,イチ
EOS
EOS
　      記号,空白,*,*,*,*,　,　,　
吾輩は猫である  名詞,固有名詞,一般,*,*,*,吾輩は猫である,ワガハイハネコデアル,ワ
ガハイワネコデアル
。      記号,句点,*,*,*,*,。,。,。
EOS
名前    名詞,一般,*,*,*,*,名前,ナマエ,ナマエ
は      助詞,係助詞,*,*,*,*,は,ハ,ワ
まだ    副詞,助詞類接続,*,*,*,*,まだ,マダ,マダ
無い    形容詞,自立,*,*,形容詞・アウオ段,基本形,無い,ナイ,ナイ
。      記号,句点,*,*,*,*,。,。,。
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> MeCab

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_mecab</span>(file_name):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">      file_name (str): path to txt file.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Returns:
</span><span style="color:#e6db74">      Generator ([[word_shape]]): 一文毎のword_shapeの配列が返される.
</span><span style="color:#e6db74">      word_shape (dict): keys=[&#34;surface&#34;, &#34;base&#34;, &#34;pos&#34;, &#34;pos1&#34;]
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">with</span> open(file_name) <span style="color:#66d9ef">as</span> f:
        lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

    sentence <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        <span style="color:#66d9ef">if</span> line <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;EOS</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>:
            <span style="color:#66d9ef">if</span> sentence:
                <span style="color:#66d9ef">yield</span> sentence
            sentence <span style="color:#f92672">=</span> []
            <span style="color:#66d9ef">continue</span>

        surface, attr <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)
        cols <span style="color:#f92672">=</span> attr<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)
        sentence<span style="color:#f92672">.</span>append({
            <span style="color:#e6db74">&#39;surface&#39;</span>: surface,
            <span style="color:#e6db74">&#39;base&#39;</span>: cols[<span style="color:#ae81ff">6</span>],
            <span style="color:#e6db74">&#39;pos&#39;</span>: cols[<span style="color:#ae81ff">0</span>],
            <span style="color:#e6db74">&#39;pos1&#39;</span>: cols[<span style="color:#ae81ff">1</span>]
        })


wss  <span style="color:#f92672">=</span> list(read_mecab(<span style="color:#e6db74">&#34;neko.txt.mecab&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>wss[:<span style="color:#ae81ff">3</span>], sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out">out</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;一&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;一&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;名詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;数&#39;</span><span style="color:#f92672">}]</span>
<span style="color:#f92672">[{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;\u3000&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;\u3000&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;記号&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;空白&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;吾輩は猫である&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;吾輩は猫である&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;名詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;固有名詞&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;。&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;。&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;記号&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;句点&#39;</span><span style="color:#f92672">}]</span>
<span style="color:#f92672">[{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;名前&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;名前&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;名詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;一般&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;は&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;は&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;助詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;係助詞&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;まだ&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;まだ&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;副詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;助詞類接続&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;無い&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;無い&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;形容詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;自立&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;。&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;。&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;記号&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;句点&#39;</span><span style="color:#f92672">}]</span>
</code></pre></div><h3 id="functions">functions</h3>
<p>今回使うプログラムに対応した関数群.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filter_</span>(sentences, <span style="color:#f92672">*</span>, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x, target<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>, flatten<span style="color:#f92672">=</span>False):
    <span style="color:#e6db74">&#34;&#34;&#34;辞書型の配列を内包する配列に特化したフィルタ&#34;&#34;&#34;</span>
    out <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> sentence <span style="color:#f92672">in</span> sentences:
        filtered <span style="color:#f92672">=</span> list(filter(f, sentence))
        <span style="color:#66d9ef">if</span> target:
            filtered <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(target), filtered))
        <span style="color:#66d9ef">if</span> flatten:
            out<span style="color:#f92672">+=</span>filtered
        <span style="color:#66d9ef">else</span>:
            out<span style="color:#f92672">.</span>append(filtered)
    <span style="color:#66d9ef">return</span> out

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">frequency</span>(sentences):
    <span style="color:#e6db74">&#34;&#34;&#34;辞書型の配列を内包する配列の単語出現頻度を返す&#34;&#34;&#34;</span>
    dic <span style="color:#f92672">=</span> dict()
    <span style="color:#66d9ef">for</span> sentence <span style="color:#f92672">in</span> sentences:
        <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> sentence:
            surface <span style="color:#f92672">=</span> word<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;surface&#34;</span>)
            <span style="color:#66d9ef">if</span> dic<span style="color:#f92672">.</span>get(surface):
                dic[surface] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
            <span style="color:#66d9ef">else</span>:
                dic[surface] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">return</span> dic

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">top_n</span>(frequency, n<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>):
    <span style="color:#e6db74">&#34;&#34;&#34;単語出現頻度をソートし, 上位n件を返す&#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> sorted(frequency<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span>True)[:n]

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wc_plot</span>(freq):
    <span style="color:#e6db74">&#34;&#34;&#34;出現頻度を棒グラフでプロット&#34;&#34;&#34;</span>
    plt<span style="color:#f92672">.</span>bar(range(<span style="color:#ae81ff">1</span>, len(freq)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>), list(dict(freq)<span style="color:#f92672">.</span>values()))
    plt<span style="color:#f92672">.</span>show()
</code></pre></div><h3 id="31-動詞">31. 動詞</h3>
<p>動詞の表層形をすべて抽出せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">verb_surfaces <span style="color:#f92672">=</span> filter_(wss, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;動詞&#34;</span>, target<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;surface&#34;</span>, flatten<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(verb_surfaces) <span style="color:#75715e">#&gt; [&#39;生れ&#39;, &#39;つか&#39;, &#39;泣い&#39;, &#39;し&#39;, &#39;いる&#39;, &#39;始め&#39;, &#39;見&#39;, &#39;聞く&#39;, ...</span>
</code></pre></div><h3 id="32-動詞の原形">32. 動詞の原形</h3>
<p>動詞の原形をすべて抽出せよ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">verb_bases <span style="color:#f92672">=</span> filter_(wss, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;動詞&#34;</span>, target<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;base&#34;</span>, flatten<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(verb_bases) <span style="color:#75715e">#&gt; [&#39;生れる&#39;, &#39;つく&#39;, &#39;泣く&#39;, &#39;する&#39;, &#39;いる&#39;, &#39;始める&#39;, &#39;見る&#39;, &#39;聞く&#39;, ...</span>
</code></pre></div><h3 id="33-a-の-b">33. 「A の B」</h3>
<p>2 つの名詞が「の」で連結されている名詞句を抽出せよ．</p>
<h5 id="memo-1">memo</h5>
<ul>
<li>文意的に連体修飾格の「の」でありそうだが, trigram で実装する</li>
</ul>
<p>参考: <a href="https://dictionary.goo.ne.jp/word/%E3%81%AE/#jn-171157">の の意味</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> ws <span style="color:#f92672">in</span> wss:
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(ws) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>):
        n1, no, n2 <span style="color:#f92672">=</span> ws[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>]
        <span style="color:#66d9ef">if</span> no<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;surface&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;の&#34;</span> <span style="color:#f92672">and</span>\
            n1<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;名詞&#34;</span> <span style="color:#f92672">and</span>\
            n2<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;名詞&#34;</span>:

            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{n1.get(&#39;surface&#39;)}の{n2.get(&#39;surface&#39;)}&#34;</span>)
</code></pre></div><h4 id="out-1">out</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">彼の掌
掌の上
書生の顔
はずの顔
顔の真中
穴の中
書生の掌
...
</code></pre></div><h3 id="34-名詞の連接">34. 名詞の連接</h3>
<p>名詞の連接（連続して出現する名詞）を最長一致で抽出せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">norn_series</span>(word_shapes):
    words <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> ws <span style="color:#f92672">in</span> word_shapes:
        <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> ws:
            <span style="color:#66d9ef">if</span> e<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;名詞&#34;</span>:
                words<span style="color:#f92672">.</span>append(e<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;surface&#34;</span>))
            <span style="color:#66d9ef">else</span>:
                <span style="color:#66d9ef">if</span> len(words) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
                    <span style="color:#66d9ef">yield</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(words)
                words <span style="color:#f92672">=</span> []
ns <span style="color:#f92672">=</span> list(norn_series(wss))
<span style="color:#66d9ef">print</span>(ns) <span style="color:#75715e">#&gt; [&#39;した所&#39;, &#39;人間中&#39;, &#39;一番獰悪&#39;, &#39;時妙&#39;, &#39;一毛&#39;, &#39;その後猫&#39;, &#39;一度&#39;, ...</span>
</code></pre></div><h3 id="35-単語の出現頻度">35. 単語の出現頻度</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">foa <span style="color:#f92672">=</span> frequency(wss)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>top_n(foa, <span style="color:#ae81ff">10</span>), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out-2">out</h4>
<p>品詞毎に分けずに出すので当然助詞が上位を占めている</p>
<pre><code>('の', 9101)
('。', 7484)
('、', 6772)
('て', 6697)
('は', 6384)
('に', 6145)
('を', 6068)
('と', 5474)
('が', 5259)
('た', 3916)
</code></pre><h3 id="36-頻度上位-10-語">36. 頻度上位 10 語</h3>
<p>出現頻度が高い 10 語とその出現頻度をグラフ（例えば棒グラフなど）で表示せよ．</p>
<h5 id="memo-2">memo</h5>
<ul>
<li>せっかくなので名詞で出現頻度が高い 10 語とその出現頻度をグラフにする</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#f92672">as</span> plt

foa <span style="color:#f92672">=</span> top_n(frequency(filter_(wss, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>)<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;名詞&#34;</span>)), <span style="color:#ae81ff">10</span>)
<span style="color:#66d9ef">print</span>(list(map(<span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">0</span>], foa)))

wc_plot(foa)
</code></pre></div>
    <img src="https://i.imgur.com/ltYSxbZ.png"  alt="blog top page"  class="center"  />


<h3 id="37-猫と共起頻度の高い上位-10-語">37. 「猫」と共起頻度の高い上位 10 語</h3>
<p>「猫」とよく共起する（共起頻度が高い）10 語とその出現頻度をグラフ（例えば棒グラフなど）で表示せよ．</p>
<h5 id="memo-3">memo</h5>
<ul>
<li>共起の定義が不明瞭だが、今回は「猫」と同一文中に出現する物を共起すると定義する</li>
<li>せっかくなので動詞で出現頻度が高い 10 語とその出現頻度をグラフにする</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cat_rerations <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> ws <span style="color:#f92672">in</span> wss:
    <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> ws:
        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;猫&#34;</span> <span style="color:#f92672">in</span>  e<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;surface&#34;</span>):
            cat_rerations<span style="color:#f92672">.</span>append(ws)
            <span style="color:#66d9ef">break</span>
cat_rerations <span style="color:#f92672">=</span> top_n(frequency(filter_(cat_rerations, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>)<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;動詞&#34;</span>)), <span style="color:#ae81ff">10</span>)
<span style="color:#66d9ef">print</span>(cat_rerations)
wc_plot(cat_rerations)
</code></pre></div>
    <img src="https://i.imgur.com/dqbrtCT.png"  alt="blog top page"  class="center"  />


<h3 id="38-ヒストグラム">38. ヒストグラム</h3>
<p>単語の出現頻度のヒストグラム（横軸に出現頻度，縦軸に出現頻度をとる単語の種類数を棒グラフで表したもの）を描け．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">arr <span style="color:#f92672">=</span> list(dict(sorted(foa<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span>True))<span style="color:#f92672">.</span>values())
plt<span style="color:#f92672">.</span>hist(arr, bins<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, range<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>))
plt<span style="color:#f92672">.</span>show()
</code></pre></div>
    <img src="https://i.imgur.com/SxRTS3A.png"  alt="blog top page"  class="center"  />


<h3 id="39-zipf-の法則">39. Zipf の法則</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plt<span style="color:#f92672">.</span>plot(range(<span style="color:#ae81ff">1</span>, len(arr)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>), arr,marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.&#39;</span>)
plt<span style="color:#f92672">.</span>xscale(<span style="color:#e6db74">&#39;log&#39;</span>)
plt<span style="color:#f92672">.</span>yscale(<span style="color:#e6db74">&#39;log&#39;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div>
    <img src="https://i.imgur.com/XUSWFbE.png"  alt="blog top page"  class="center"  />


]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #03</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-03/</link>
            <pubDate>Thu, 23 Apr 2020 14:16:41 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-03/</guid>
            <description>言語処理 100 本ノック(第 3 章: 正規表現) Wikipedia の記事を以下のフォーマットで書き出したファイルjawiki-country.json.gzがある． 1</description>
            <content type="html"><![CDATA[<h2 id="言語処理-100-本ノック第-3-章-正規表現httpsnlp100githubiojach03html"><a href="https://nlp100.github.io/ja/ch03.html">言語処理 100 本ノック(第 3 章: 正規表現)</a></h2>
<blockquote>
<p>Wikipedia の記事を以下のフォーマットで書き出したファイル<a href="https://nlp100.github.io/data/jawiki-country.json.gz">jawiki-country.json.gz</a>がある．
1 行に 1 記事の情報が JSON 形式で格納される
各行には記事名が”title”キーに，記事本文が”text”キーの辞書オブジェクトに格納され，そのオブジェクトが JSON 形式で書き出される
ファイル全体は gzip で圧縮される
以下の処理を行うプログラムを作成せよ．</p>
</blockquote>
<h3 id="環境">環境</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ python3 -V
Python 3.6.8
</code></pre></div><h3 id="20-json-データの読み込み">20. JSON データの読み込み</h3>
<p>Wikipedia 記事の JSON ファイルを読み込み，「イギリス」に関する記事本文を表示せよ．問題 21-29 では，ここで抽出した記事本文に対して実行せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gzip
<span style="color:#f92672">import</span> json

<span style="color:#66d9ef">with</span> gzip<span style="color:#f92672">.</span>open(<span style="color:#e6db74">&#34;jawiki-country.json.gz&#34;</span>, <span style="color:#e6db74">&#34;rt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

lines <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: json<span style="color:#f92672">.</span>loads(x), lines))
uk, <span style="color:#f92672">*</span>_ <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;title&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;イギリス&#34;</span>, lines))

uk_text <span style="color:#f92672">=</span> uk<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;text&#34;</span>)
<span style="color:#66d9ef">print</span>(uk_text)
</code></pre></div><h4 id="out">out</h4>
<pre><code>{{redirect|UK}}
{{redirect|英国|春秋時代の諸侯国|英 (春秋)}}
{{Otheruses|ヨーロッパの国|長崎県・熊本県の郷土料理|いぎりす}}
{{基礎情報 国
|略名  =イギリス
...
</code></pre><h3 id="21-カテゴリ名を含む行を抽出">21. カテゴリ名を含む行を抽出</h3>
<p>記事中でカテゴリ名を宣言している行を抽出せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re
category_lines <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x:re<span style="color:#f92672">.</span>search(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[Category:.*?\]\]&#34;</span>, x), uk_text<span style="color:#f92672">.</span>splitlines()))
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>category_lines, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out-1">out</h4>
<pre><code>[[Category:イギリス|*]]
[[Category:イギリス連邦加盟国]]
[[Category:英連邦王国|*]]
[[Category:G8加盟国]]
[[Category:欧州連合加盟国|元]]
[[Category:海洋国家]]
[[Category:現存する君主国]]
[[Category:島国]]
[[Category:1801年に成立した国家・領域]]
</code></pre><h3 id="22-カテゴリ名の抽出-permalink">22. カテゴリ名の抽出 Permalink</h3>
<p>記事のカテゴリ名を（行単位ではなく名前で）抽出せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">categories <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[Category:(.*?)\]\]&#34;</span>, uk_text)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>categories, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out-2">out</h4>
<pre><code>イギリス|*
イギリス連邦加盟国
英連邦王国|*
G8加盟国
欧州連合加盟国|元
海洋国家
現存する君主国
島国
1801年に成立した国家・領域
</code></pre><h4 id="純粋なカテゴリ名を取得">純粋なカテゴリ名を取得</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">categories <span style="color:#f92672">=</span> [c <span style="color:#66d9ef">for</span> c, _ <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[Category:(.*?)(\|.*)?\]\]&#34;</span>, uk_text)]
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>categories, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out-3">out</h4>
<pre><code>イギリス
イギリス連邦加盟国
英連邦王国
G8加盟国
欧州連合加盟国
海洋国家
現存する君主国
島国
1801年に成立した国家・領域
</code></pre><h3 id="23-セクション構造-permalink">23. セクション構造 Permalink</h3>
<p>記事中に含まれるセクション名とそのレベル（例えば”== セクション名 ==”なら 1）を表示せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sections <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x: re<span style="color:#f92672">.</span>search(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;^=(.+)=$&#34;</span>, x), uk_text<span style="color:#f92672">.</span>splitlines()))
section_levels <span style="color:#f92672">=</span> [(section<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;=&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>), section<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;=&#34;</span>)<span style="color:#f92672">//</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> section <span style="color:#f92672">in</span> sections]
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>section_levels, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="きれいに書くならこう">きれいに書くならこう?</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> section_structure <span style="color:#f92672">=</span> [(j, len(i) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> i, j <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;(=+)(.*?)\1\n&#34;</span>, uk_text)]
 <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>section_structure, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out-4">out</h4>
<pre><code>('国名', 1)
('歴史', 1)
('地理', 1)
('主要都市', 2)
('気候', 2)
('政治', 1)
('元首', 2)
('法', 2)
('内政', 2)
('地方行政区分', 2)
('外交・軍事', 2)
('経済', 1)
('鉱業', 2)
('農業', 2)
('貿易', 2)
('不動産', 2)
('エネルギー政策', 2)
('通貨', 2)
('企業', 2)
('通信', 3)
('交通', 1)
('道路', 2)
('鉄道', 2)
('海運', 2)
('航空', 2)
('科学技術', 1)
('国民', 1)
('言語', 2)
('宗教', 2)
('婚姻', 2)
('移住', 2)
('教育', 2)
('医療', 2)
('文化', 1)
('食文化', 2)
('文学', 2)
('哲学', 2)
('音楽', 2)
('ポピュラー音楽', 3)
('映画', 2)
('コメディ', 2)
('国花', 2)
('世界遺産', 2)
('祝祭日', 2)
('スポーツ', 2)
('サッカー', 3)
('クリケット', 3)
('競馬', 3)
('モータースポーツ', 3)
('野球', 3)
(' カーリング ', 3)
(' 自転車競技 ', 3)
('脚注', 1)
('関連項目', 1)
('外部リンク', 1)
</code></pre><h5 id="memo">memo</h5>
<ul>
<li>空白対処しないとなぁ</li>
</ul>
<h3 id="24-ファイル参照の抽出">24. ファイル参照の抽出</h3>
<p>記事から参照されているメディアファイルをすべて抜き出せ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">media_files <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[ファイル:([^|\]]*)&#34;</span>, uk_text)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>media_files, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out-5">out</h4>
<pre><code>Royal Coat of Arms of the United Kingdom.svg
United States Navy Band - God Save the Queen.ogg
Descriptio Prime Tabulae Europae.jpg
Lenepveu, Jeanne d'Arc au siège d'Orléans.jpg
London.bankofengland.arp.jpg
Battle of Waterloo 1815.PNG
Uk topo en.jpg
BenNevis2005.jpg
Population density UK 2011 census.png
2019 Greenwich Peninsula &amp; Canary Wharf.jpg
Birmingham Skyline from Edgbaston Cricket Ground crop.jpg
Leeds CBD at night.jpg
Glasgow and the Clyde from the air (geograph 4665720).jpg
Palace of Westminster, London - Feb 2007.jpg
Scotland Parliament Holyrood.jpg
Donald Trump and Theresa May (33998675310) (cropped).jpg
Soldiers Trooping the Colour, 16th June 2007.jpg
City of London skyline from London City Hall - Oct 2008.jpg
Oil platform in the North SeaPros.jpg
Eurostar at St Pancras Jan 2008.jpg
Heathrow Terminal 5C Iwelumo-1.jpg
Airbus A380-841 G-XLEB British Airways (10424102995).jpg
UKpop.svg
Anglospeak.svg
Royal Aberdeen Children's Hospital.jpg
CHANDOS3.jpg
The Fabs.JPG
Wembley Stadium, illuminated.jpg
</code></pre><h3 id="25-テンプレートの抽出">25. テンプレートの抽出</h3>
<p>記事中に含まれる「基礎情報」テンプレートのフィールド名と値を抽出し，辞書オブジェクトとして格納せよ．</p>
<h5 id="memo-1">memo</h5>
<ul>
<li>何が正解かわからん&hellip;</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">num <span style="color:#f92672">=</span> <span style="color:#ae81ff">999999</span>
<span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>finditer(<span style="color:#e6db74">&#34;{{基礎情報|{{|}}&#34;</span>,uk_text):
    <span style="color:#66d9ef">if</span> item<span style="color:#f92672">.</span>group() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;{{基礎情報&#34;</span>:
        start <span style="color:#f92672">=</span> item<span style="color:#f92672">.</span>end()
        num<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">elif</span> item<span style="color:#f92672">.</span>group() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;{{&#34;</span>:
        num<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">elif</span> item<span style="color:#f92672">.</span>group() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;}}&#34;</span>:
        num<span style="color:#f92672">-=</span><span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">if</span> num <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1</span>:
        end <span style="color:#f92672">=</span> item<span style="color:#f92672">.</span>start()
        <span style="color:#66d9ef">break</span>

ans <span style="color:#f92672">=</span> dict(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\|(.*?)\ *?=\ ?(.*?)\n&#34;</span>, uk_text[start:end]))
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>ans<span style="color:#f92672">.</span>items(), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out-6">out</h4>
<pre><code>('略名', 'イギリス')
('日本語国名', 'グレートブリテン及び北アイルランド連合王国')
('公式国名', '{{lang|en|United Kingdom of Great Britain and Northern Ireland}}&lt;ref&gt;英語以外での正式国名:&lt;br /&gt;')
('国旗画像', 'Flag of the United Kingdom.svg')
('国章画像', '[[ファイル:Royal Coat of Arms of the United Kingdom.svg|85px|イギリスの国章]]')
('国章リンク', '（[[イギリスの国章|国章]]）')
('標語', '{{lang|fr|[[Dieu et mon droit]]}}&lt;br /&gt;（[[フランス語]]:[[Dieu et mon droit|神と我が権利]]）')
('国歌', &quot;[[女王陛下万歳|{{lang|en|God Save the Queen}}]]{{en icon}}&lt;br /&gt;''神よ女王を護り賜え''&lt;br /&gt;{{center|[[ファイル:United States Navy Band - God Save the Queen.ogg]]}}&quot;)
('地図画像', 'Europe-UK.svg')
('位置画像', 'United Kingdom (+overseas territories) in the World (+Antarctica claims).svg')
('公用語', '[[英語]]')
('首都', '[[ロンドン]]（事実上）')
('最大都市', 'ロンドン')
('元首等肩書', '[[イギリスの君主|女王]]')
('元首等氏名', '[[エリザベス2世]]')
('首相等肩書', '[[イギリスの首相|首相]]')
('首相等氏名', '[[ボリス・ジョンソン]]')
('他元首等肩書1', '[[貴族院 (イギリス)|貴族院議長]]')
('他元首等氏名1', '[[:en:Norman Fowler, Baron Fowler|ノーマン・ファウラー]]')
('他元首等肩書2', '[[庶民院 (イギリス)|庶民院議長]]')
('他元首等氏名2', '{{仮リンク|リンゼイ・ホイル|en|Lindsay Hoyle}}')
('他元首等肩書3', '[[連合王国最高裁判所|最高裁判所長官]]')
('他元首等氏名3', '[[:en:Brenda Hale, Baroness Hale of Richmond|ブレンダ・ヘイル]]')
('面積順位', '76')
('面積大きさ', '1 E11')
('面積値', '244,820')
('水面積率', '1.3%')
('人口統計年', '2018')
('人口順位', '22')
('人口大きさ', '1 E7')
('人口値', '6643万5600&lt;ref&gt;{{Cite web|url=https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates|title=Population estimates - Office for National Statistics|accessdate=2019-06-26|date=2019-06-26}}&lt;/ref&gt;')
('人口密度値', '271')
('GDP統計年元', '2012')
('GDP値元', '1兆5478億&lt;ref name=&quot;imf-statistics-gdp&quot;&gt;[http://www.imf.org/external/pubs/ft/weo/2012/02/weodata/weorept.aspx?pr.x=70&amp;pr.y=13&amp;sy=2010&amp;ey=2012&amp;scsm=1&amp;ssd=1&amp;sort=country&amp;ds=.&amp;br=1&amp;c=112&amp;s=NGDP%2CNGDPD%2CPPPGDP%2CPPPPC&amp;grp=0&amp;a=IMF&gt;Data and Statistics&gt;World Economic Outlook Databases&gt;By Countrise&gt;United Kingdom]&lt;/ref&gt;')
('GDP統計年MER', '2012')
('GDP順位MER', '6')
('GDP値MER', '2兆4337億&lt;ref name=&quot;imf-statistics-gdp&quot; /&gt;')
('GDP統計年', '2012')
('GDP順位', '6')
('GDP値', '2兆3162億&lt;ref name=&quot;imf-statistics-gdp&quot; /&gt;')
('GDP/人', '36,727&lt;ref name=&quot;imf-statistics-gdp&quot; /&gt;')
('建国形態', '建国')
('確立形態1', '[[イングランド王国]]／[[スコットランド王国]]&lt;br /&gt;（両国とも[[合同法 (1707年)|1707年合同法]]まで）')
('確立年月日1', '927年／843年')
('確立形態2', '[[グレートブリテン王国]]成立&lt;br /&gt;（1707年合同法）')
('確立年月日2', '1707年{{0}}5月{{0}}1日')
('確立形態3', '[[グレートブリテン及びアイルランド連合王国]]成立&lt;br /&gt;（[[合同法 (1800年)|1800年合同法]]）')
('確立年月日3', '1801年{{0}}1月{{0}}1日')
('確立形態4', &quot;現在の国号「'''グレートブリテン及び北アイルランド連合王国'''」に変更&quot;)
('確立年月日4', '1927年{{0}}4月12日')
('通貨', '[[スターリング・ポンド|UKポンド]] (£)')
('通貨コード', 'GBP')
('時間帯', '±0')
('夏時間', '+1')
('ISO 3166-1', 'GB / GBR')
('ccTLD', '[[.uk]] / [[.gb]]&lt;ref&gt;使用は.ukに比べ圧倒的少数。&lt;/ref&gt;')
('国際電話番号', '44')
('注記', '&lt;references/&gt;')
</code></pre><h4 id="debug">debug</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">len(list(filter(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;|&#34;</span>), uk_text[start:end]<span style="color:#f92672">.</span>splitlines()))) <span style="color:#f92672">==</span> len(ans)
<span style="color:#f92672">&gt;&gt;</span> True
</code></pre></div><h5 id="memo-2">memo</h5>
<ul>
<li>正規表現だけで空白削除頑張った</li>
</ul>
<h3 id="26-強調マークアップの除去-permalink">26. 強調マークアップの除去 Permalink</h3>
<p>25 の処理時に，テンプレートの値から MediaWiki の強調マークアップ（弱い強調，強調，強い強調のすべて）を除去してテキストに変換せよ（参考: マークアップ早見表）．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">new_ans <span style="color:#f92672">=</span> dict((k, re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;&#39;{2,3}|&#39;{5}&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, v)) <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> ans<span style="color:#f92672">.</span>items())
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;before: &#34;</span>, ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;確立形態4&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;after : &#34;</span>, new_ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;確立形態4&#34;</span>))
</code></pre></div><h4 id="out-7">out</h4>
<pre><code>before:  現在の国号「'''グレートブリテン及び北アイルランド連合王国'''」に変更
after :  現在の国号「グレートブリテン及び北アイルランド連合王国」に変更
</code></pre><h3 id="27-内部リンクの除去">27. 内部リンクの除去</h3>
<p>26 の処理に加えて，テンプレートの値から MediaWiki の内部リンクマークアップを除去し，テキストに変換せよ（参考: <a href="https://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8">マークアップ早見表</a>）．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">new_ans <span style="color:#f92672">=</span> dict((k, re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[(?!.*ファイル)(?!.*Category)([^|\]]+\|)*(.*?)\]\]&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">2&#34;</span>, v)) <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> ans<span style="color:#f92672">.</span>items())
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;before: &#34;</span>, ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;通貨&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;after : &#34;</span>, new_ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;通貨&#34;</span>))
<span style="color:#66d9ef">print</span>()
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;before: &#34;</span>, ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;確立形態3&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;after : &#34;</span>, new_ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;確立形態3&#34;</span>))
</code></pre></div><h4 id="out-8">out</h4>
<pre><code>before:  [[スターリング・ポンド|UKポンド]] (£)
after :  UKポンド (£)

before:  [[グレートブリテン及びアイルランド連合王国]]成立&lt;br /&gt;（[[合同法 (1800年)|1800年合同法]]）
after :  グレートブリテン及びアイルランド連合王国成立&lt;br /&gt;（1800年合同法）
</code></pre><h5 id="memo-3">memo</h5>
<ul>
<li>漏れてる部分</li>
<li><code>{{}}</code>が干渉してそうだから先にこれを置換するのがいいか?</li>
</ul>
<pre><code>before:  [[女王陛下万歳|{{lang|en|God Save the Queen}}]]{{en icon}}&lt;br /&gt;''神よ女王を護り賜え''&lt;br /&gt;{{center|[[ファイル:United States Navy Band - God Save the Queen.ogg]]}}
after :  [[女王陛下万歳|{{lang|en|God Save the Queen}}]]{{en icon}}&lt;br /&gt;''神よ女王を護り賜え''&lt;br /&gt;{{center|[[ファイル:United States Navy Band - God Save the Queen.ogg]]}}
</code></pre><h3 id="28-mediawiki-マークアップの除去">28. MediaWiki マークアップの除去</h3>
<p>27 の処理に加えて，テンプレートの値から MediaWiki マークアップを可能な限り除去し，国の基本情報を整形せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">new_ans <span style="color:#f92672">=</span> dict()
<span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> ans<span style="color:#f92672">.</span>items():
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;&#39;{2,3}|&#39;{5}&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, v) <span style="color:#75715e"># 26</span>
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;{{(.*)\||:?(.*?)}}&#34;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">2&#39;</span>, v) <span style="color:#75715e"># {{}} 置換</span>
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;&lt;br\s*?/&gt;&#34;</span>, <span style="color:#e6db74">&#39; &#39;</span>, v) <span style="color:#75715e"># &lt;br /&gt;</span>
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;&lt;ref[^&gt;]*?/&gt;|&lt;ref[^&gt;]*?&gt;.*?/ref&gt;&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, v) <span style="color:#75715e"># &lt;ref&gt;&lt;/ref&gt;, &lt;ref /&gt;</span>
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[([^|\]]+\|)*(.*?)\]\]&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">2&#34;</span>, v) <span style="color:#75715e"># 27改 ファイルもカテゴリーも置換</span>
  new_ans[k] <span style="color:#f92672">=</span> v
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>new_ans<span style="color:#f92672">.</span>items(), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h4 id="out-9">out</h4>
<pre><code>('略名', 'イギリス')
('日本語国名', 'グレートブリテン及び北アイルランド連合王国')
('公式国名', 'United Kingdom of Great Britain and Northern Ireland&lt;ref&gt;英語以外での正式国名: ')
('国旗画像', 'Flag of the United Kingdom.svg')
('国章画像', 'イギリスの国章')
('国章リンク', '（国章）')
('標語', '神と我が権利]]）')
('国歌', 'God Save the Queen{{en icon 神よ女王を護り賜え {{center|ファイル:United States Navy Band - God Save the Queen.ogg')
('地図画像', 'Europe-UK.svg')
('位置画像', 'United Kingdom (+overseas territories) in the World (+Antarctica claims).svg')
('公用語', '英語')
('首都', 'ロンドン（事実上）')
('最大都市', 'ロンドン')
('元首等肩書', '女王')
('元首等氏名', 'エリザベス2世')
('首相等肩書', '首相')
('首相等氏名', 'ボリス・ジョンソン')
('他元首等肩書1', '貴族院議長')
('他元首等氏名1', 'ノーマン・ファウラー')
('他元首等肩書2', '庶民院議長')
('他元首等氏名2', 'Lindsay Hoyle')
('他元首等肩書3', '最高裁判所長官')
('他元首等氏名3', 'ブレンダ・ヘイル')
('面積順位', '76')
('面積大きさ', '1 E11')
('面積値', '244,820')
('水面積率', '1.3%')
('人口統計年', '2018')
('人口順位', '22')
('人口大きさ', '1 E7')
('人口値', '6643万5600')
('人口密度値', '271')
('GDP統計年元', '2012')
('GDP値元', '1兆5478億')
('GDP統計年MER', '2012')
('GDP順位MER', '6')
('GDP値MER', '2兆4337億')
('GDP統計年', '2012')
('GDP順位', '6')
('GDP値', '2兆3162億')
('GDP/人', '36,727')
('建国形態', '建国')
('確立形態1', 'イングランド王国／スコットランド王国 （両国とも1707年合同法まで）')
('確立年月日1', '927年／843年')
('確立形態2', 'グレートブリテン王国成立 （1707年合同法）')
('確立年月日2', '1707年{{05月{{01日')
('確立形態3', 'グレートブリテン及びアイルランド連合王国成立 （1800年合同法）')
('確立年月日3', '1801年{{01月{{01日')
('確立形態4', '現在の国号「グレートブリテン及び北アイルランド連合王国」に変更')
('確立年月日4', '1927年{{04月12日')
('通貨', 'UKポンド (£)')
('通貨コード', 'GBP')
('時間帯', '±0')
('夏時間', '+1')
('ISO 3166-1', 'GB / GBR')
('ccTLD', '.uk / .gb')
('国際電話番号', '44')
('注記', '')
</code></pre><h5 id="memo-4">memo</h5>
<ul>
<li>１行に複数該当がある場合に実装もれがある</li>
<li>該当を loop で置換するのがいいか?</li>
<li>疲れたのでここまで</li>
</ul>
<h3 id="29-国旗画像の-url-を取得する">29. 国旗画像の URL を取得する</h3>
<p>テンプレートの内容を利用し，国旗画像の URL を取得せよ．（ヒント: <a href="https://www.mediawiki.org/wiki/API:Main_page/ja">MediaWiki API</a>の<a href="https://www.mediawiki.org/wiki/API:**Imageinfo**">imageinfo</a>を呼び出して，ファイル参照を URL に変換すればよい）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> requests
URL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://en.wikipedia.org/w/api.php&#34;</span>
params <span style="color:#f92672">=</span> {
    <span style="color:#e6db74">&#34;action&#34;</span>: <span style="color:#e6db74">&#34;query&#34;</span>,
    <span style="color:#e6db74">&#34;format&#34;</span>: <span style="color:#e6db74">&#34;json&#34;</span>,
    <span style="color:#e6db74">&#34;prop&#34;</span>: <span style="color:#e6db74">&#34;imageinfo&#34;</span>,
    <span style="color:#e6db74">&#34;titles&#34;</span>: <span style="color:#e6db74">&#34;File:&#34;</span><span style="color:#f92672">+</span>ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;国旗画像&#34;</span>),
     <span style="color:#e6db74">&#39;iiprop&#39;</span> : <span style="color:#e6db74">&#39;url&#39;</span>,
}
r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(URL, params<span style="color:#f92672">=</span>params)
pages <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>json()[<span style="color:#e6db74">&#34;query&#34;</span>][<span style="color:#e6db74">&#34;pages&#34;</span>]
out <span style="color:#f92672">=</span> list(pages<span style="color:#f92672">.</span>values())[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;imageinfo&#34;</span>)[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;url&#34;</span>)
<span style="color:#66d9ef">print</span>(out)
</code></pre></div><h4 id="out-10">out</h4>
<pre><code>https://upload.wikimedia.org/wikipedia/en/a/ae/Flag_of_the_United_Kingdom.svg
</code></pre>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #02-bash</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-02/</link>
            <pubDate>Wed, 22 Apr 2020 13:01:34 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-02/</guid>
            <description>言語処理 100 本ノック(第 2 章: UNIX コマンド) popular-names.txtは，アメリカで生まれた赤ちゃんの「名前」「性別」「人数」「年」をタ</description>
            <content type="html"><![CDATA[<h2 id="言語処理-100-本ノック第-2-章-unix-コマンドhttpsnlp100githubiojach02html"><a href="https://nlp100.github.io/ja/ch02.html">言語処理 100 本ノック(第 2 章: UNIX コマンド)</a></h2>
<blockquote>
<p><a href="https://nlp100.github.io/data/popular-names.txt">popular-names.txt</a>は，アメリカで生まれた赤ちゃんの「名前」「性別」「人数」「年」をタブ区切り形式で格納したファイルである．以下の処理を行うプログラムを作成し，<a href="https://nlp100.github.io/data/popular-names.txt">popular-names.txt</a>を入力ファイルとして実行せよ．さらに，同様の処理を UNIX コマンドでも実行し，プログラムの実行結果を確認せよ．</p>
</blockquote>
<h3 id="環境">環境</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ sh --version
GNU bash, version 3.2.57<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>-release <span style="color:#f92672">(</span>x86_64-apple-darwin19<span style="color:#f92672">)</span>
Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2007</span> Free Software Foundation, Inc.
</code></pre></div><h5 id="popular-namestxt">popular-names.txt</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> popular-names.txt
Mary    F       <span style="color:#ae81ff">7065</span>    <span style="color:#ae81ff">1880</span>
Anna    F       <span style="color:#ae81ff">2604</span>    <span style="color:#ae81ff">1880</span>
Emma    F       <span style="color:#ae81ff">2003</span>    <span style="color:#ae81ff">1880</span>
Elizabeth       F       <span style="color:#ae81ff">1939</span>    <span style="color:#ae81ff">1880</span>
Minnie  F       <span style="color:#ae81ff">1746</span>    <span style="color:#ae81ff">1880</span>
</code></pre></div><h3 id="10-行数のカウント">10. 行数のカウント</h3>
<p>行数をカウントせよ．確認には wc コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ wc -l popular-names.txt
    <span style="color:#ae81ff">2780</span> popular-names.txt

$ more popular-names.txt | wc -l
    <span style="color:#ae81ff">2780</span>
</code></pre></div><h5 id="参考">参考</h5>
<p><a href="https://www.atmarkit.co.jp/ait/articles/1611/07/news026.html#sample3">【 wc 】コマンド――テキストファイルの文字数や行数を数える</a></p>
<h3 id="11-タブをスペースに置換">11. タブをスペースに置換</h3>
<p>タブ 1 文字につきスペース 1 文字に置換せよ．確認には sed コマンド，tr コマンド，もしくは expand コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sed -e <span style="color:#e6db74">&#39;s/[[:cntrl:]]/\ /g&#39;</span> popular-names.txt &gt; popular-names-11.txt

cat -t popular-names.txt | sed -e <span style="color:#e6db74">&#34;s/\^I/\ /g&#34;</span> &gt; popular-names-11.txt

tr <span style="color:#e6db74">&#34;\t&#34;</span> <span style="color:#e6db74">&#34;\ &#34;</span> &lt; popular-names.txt &gt; popular-names-11.txt

cat popular-names.txt | tr <span style="color:#e6db74">&#34;\t&#34;</span> <span style="color:#e6db74">&#34;\ &#34;</span> &gt; popular-names-11.txt

expand -t <span style="color:#ae81ff">1</span> popular-names.txt &gt; popular-names-11.txt
</code></pre></div><h5 id="popular-names-11txt">popular-names-11.txt</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> popular-names-11.txt
Mary F <span style="color:#ae81ff">7065</span> <span style="color:#ae81ff">1880</span>
Anna F <span style="color:#ae81ff">2604</span> <span style="color:#ae81ff">1880</span>
Emma F <span style="color:#ae81ff">2003</span> <span style="color:#ae81ff">1880</span>
Elizabeth F <span style="color:#ae81ff">1939</span> <span style="color:#ae81ff">1880</span>
Minnie F <span style="color:#ae81ff">1746</span> <span style="color:#ae81ff">1880</span>
</code></pre></div><h5 id="memo">memo</h5>
<ul>
<li>mac の sed でタブを置換できないのでつまづき</li>
<li>cat の&ndash;show-tabs オプションでタブを置換してからサイド置換が個人的には良さげ</li>
<li>gsed コマンドをインストールするのもいいと思われる</li>
</ul>
<h5 id="参考-1">参考</h5>
<p><a href="https://qiita.com/kohashi/items/73708dea71a3ac233b29">mac OSX で sed を使って tab の文字列を置換</a>
<a href="https://www.atmarkit.co.jp/ait/articles/1610/03/news017.html">【 tr 】コマンド――テキストファイルの文字を置換する／削除する</a>
<a href="https://eng-entrance.com/linux-command-expand">expand コマンドについて詳しくまとめました 【Linux コマンド集】</a></p>
<h3 id="12-1-列目を-col1txt-に2-列目を-col2txt-に保存-permalink">12. 1 列目を col1.txt に，2 列目を col2.txt に保存 Permalink</h3>
<p>各行の 1 列目だけを抜き出したものを col1.txt に，2 列目だけを抜き出したものを col2.txt としてファイルに保存せよ．確認には cut コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cut -f <span style="color:#ae81ff">1</span> popular-names.txt &gt; col1.txt
$ cut -f <span style="color:#ae81ff">2</span> popular-names.txt &gt; col2.txt
</code></pre></div><h5 id="col1txt-col2txt">col1.txt, col2.txt</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> col1.txt
Mary
Anna
Emma
Elizabeth
Minnie

$ head -n <span style="color:#ae81ff">5</span> col2.txt
F
F
F
F
F
</code></pre></div><h5 id="memo-1">memo</h5>
<p>とりあえず cut コマンドを動かしてみたらうまくいった</p>
<h5 id="参考-2">参考</h5>
<p><a href="https://qiita.com/pekepek/items/c28bc87171983d756e32">CSV ファイルの特定の列を取り出す</a></p>
<h3 id="13-col1txt-と-col2txt-をマージ">13. col1.txt と col2.txt をマージ</h3>
<p>12 で作った col1.txt と col2.txt を結合し，元のファイルの 1 列目と 2 列目をタブ区切りで並べたテキストファイルを作成せよ．確認には paste コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ paste col1.txt col2.txt &gt; cols.txt
</code></pre></div><h5 id="colstxt">cols.txt</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> cols.txt
Mary    F
Anna    F
Emma    F
Elizabeth       F
Minnie  F
</code></pre></div><h3 id="14-先頭から-n-行を出力">14. 先頭から N 行を出力</h3>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のうち先頭の N 行だけを表示せよ．確認には head コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># デバックで使っていたので割愛</span>
</code></pre></div><h3 id="15-末尾の-n-行を出力">15. 末尾の N 行を出力</h3>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のうち末尾の N 行だけを表示せよ．確認には tail コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ tail -n <span style="color:#ae81ff">5</span> popular-names.txt
Benjamin        M       <span style="color:#ae81ff">13381</span>   <span style="color:#ae81ff">2018</span>
Elijah  M       <span style="color:#ae81ff">12886</span>   <span style="color:#ae81ff">2018</span>
Lucas   M       <span style="color:#ae81ff">12585</span>   <span style="color:#ae81ff">2018</span>
Mason   M       <span style="color:#ae81ff">12435</span>   <span style="color:#ae81ff">2018</span>
Logan   M       <span style="color:#ae81ff">12352</span>   <span style="color:#ae81ff">2018</span>
</code></pre></div><h3 id="16-ファイルを-n-分割する">16. ファイルを N 分割する</h3>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のファイルを行単位で N 分割せよ．同様の処理を split コマンドで実現せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ split -l  <span style="color:#66d9ef">$(</span>expr <span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">`</span>cat popular-names.txt | wc -l<span style="color:#e6db74">`</span> / 3<span style="color:#66d9ef">)</span> + 1<span style="color:#66d9ef">)</span> popular-names.txt  popular-names-

$ read chunks <span style="color:#f92672">&amp;&amp;</span> split -l  <span style="color:#66d9ef">$(</span>expr <span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">`</span>cat popular-names.txt | wc -l<span style="color:#e6db74">`</span> / $chunks<span style="color:#66d9ef">)</span> + 1<span style="color:#66d9ef">)</span> popular-names.txt  popular-names-
</code></pre></div><h5 id="memo-2">memo</h5>
<ul>
<li>mac OSX の仕様?で split に n オプションがないのでむりくり実装</li>
<li><code>行数 % n == 0</code>のときの要素数が違ってくる</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ split -h
split: illegal option -- h
usage: split <span style="color:#f92672">[</span>-a sufflen<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-b byte_count<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-l line_count<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-p pattern<span style="color:#f92672">]</span>
             <span style="color:#f92672">[</span>file <span style="color:#f92672">[</span>prefix<span style="color:#f92672">]]</span>
</code></pre></div><h5 id="参考-3">参考</h5>
<p><a href="https://stackoverflow.com/questions/2016894/how-to-split-a-large-text-file-into-smaller-files-with-equal-number-of-lines">How to split a large text file into smaller files with equal number of lines?</a></p>
<h3 id="17-１列目の文字列の異なり">17. １列目の文字列の異なり</h3>
<p>1 列目の文字列の種類（異なる文字列の集合）を求めよ．確認には cut, sort, uniq コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cut -f <span style="color:#ae81ff">1</span> popular-names.txt | sort | uniq | head -n <span style="color:#ae81ff">5</span>
Abigail
Aiden
Alexander
Alexis
Alice
</code></pre></div><h3 id="18-各行を-3-コラム目の数値の降順にソート">18. 各行を 3 コラム目の数値の降順にソート</h3>
<p>各行を 3 コラム目の数値の逆順で整列せよ（注意: 各行の内容は変更せずに並び替えよ）．確認には sort コマンドを用いよ（この問題はコマンドで実行した時の結果と合わなくてもよい）．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat -t popular-names.txt | sed -e <span style="color:#e6db74">&#34;s/\^I/\ /g&#34;</span> | sort -r -n -t <span style="color:#e6db74">&#34; &#34;</span> -k <span style="color:#ae81ff">3</span> | head -n <span style="color:#ae81ff">5</span>
Linda F <span style="color:#ae81ff">99689</span> <span style="color:#ae81ff">1947</span>
Linda F <span style="color:#ae81ff">96211</span> <span style="color:#ae81ff">1948</span>
James M <span style="color:#ae81ff">94757</span> <span style="color:#ae81ff">1947</span>
Michael M <span style="color:#ae81ff">92704</span> <span style="color:#ae81ff">1957</span>
Robert M <span style="color:#ae81ff">91640</span> <span style="color:#ae81ff">1947</span>
</code></pre></div><h5 id="memo-3">memo</h5>
<ul>
<li><code>r</code> リバース</li>
<li><code>n</code> 数字順を明示</li>
<li><code>t</code> 区切り文字</li>
<li><code>k</code> 列番号</li>
</ul>
<h5 id="参考-4">参考</h5>
<p><a href="https://genzouw.com/entry/2019/04/24/083709">sort コマンドで CSV ファイルをソートする場合はソート列の指定方法に注意</a></p>
<h3 id="19-各行の-1-コラム目の文字列の出現頻度を求め出現頻度の高い順に並べる">19. 各行の 1 コラム目の文字列の出現頻度を求め，出現頻度の高い順に並べる</h3>
<p>各行の 1 列目の文字列の出現頻度を求め，その高い順に並べて表示せよ．確認には cut, uniq, sort コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cut -f <span style="color:#ae81ff">1</span> popular-names.txt | sort | uniq -c | sort -r | head -n <span style="color:#ae81ff">5</span>
 <span style="color:#ae81ff">118</span> James
 <span style="color:#ae81ff">111</span> William
 <span style="color:#ae81ff">108</span> Robert
 <span style="color:#ae81ff">108</span> John
  <span style="color:#ae81ff">92</span> Mary
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #02-python</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-02-py/</link>
            <pubDate>Wed, 22 Apr 2020 13:01:34 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-02-py/</guid>
            <description>言語処理 100 本ノック(第 2 章: UNIX コマンド) popular-names.txtは，アメリカで生まれた赤ちゃんの「名前」「性別」「人数」「年」をタ</description>
            <content type="html"><![CDATA[<h2 id="言語処理-100-本ノック第-2-章-unix-コマンドhttpsnlp100githubiojach02html"><a href="https://nlp100.github.io/ja/ch02.html">言語処理 100 本ノック(第 2 章: UNIX コマンド)</a></h2>
<blockquote>
<p><a href="https://nlp100.github.io/data/popular-names.txt">popular-names.txt</a>は，アメリカで生まれた赤ちゃんの「名前」「性別」「人数」「年」をタブ区切り形式で格納したファイルである．以下の処理を行うプログラムを作成し，<a href="https://nlp100.github.io/data/popular-names.txt">popular-names.txt</a>を入力ファイルとして実行せよ．さらに，同様の処理を UNIX コマンドでも実行し，プログラムの実行結果を確認せよ．</p>
</blockquote>
<h3 id="環境">環境</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ python3 -V
Python 3.6.8
</code></pre></div><h5 id="popular-namestxt">popular-names.txt</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> popular-names.txt
Mary    F       <span style="color:#ae81ff">7065</span>    <span style="color:#ae81ff">1880</span>
Anna    F       <span style="color:#ae81ff">2604</span>    <span style="color:#ae81ff">1880</span>
Emma    F       <span style="color:#ae81ff">2003</span>    <span style="color:#ae81ff">1880</span>
Elizabeth       F       <span style="color:#ae81ff">1939</span>    <span style="color:#ae81ff">1880</span>
Minnie  F       <span style="color:#ae81ff">1746</span>    <span style="color:#ae81ff">1880</span>
</code></pre></div><h3 id="10-行数のカウント">10. 行数のカウント</h3>
<p>行数をカウントせよ．確認には wc コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    <span style="color:#66d9ef">print</span>(len(f<span style="color:#f92672">.</span>readlines()))

<span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">2780</span>
</code></pre></div><h3 id="11-タブをスペースに置換">11. タブをスペースに置換</h3>
<p>タブ 1 文字につきスペース 1 文字に置換せよ．確認には sed コマンド，tr コマンド，もしくは expand コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    text <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()

replaced_text <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">&#34; &#34;</span>)
<span style="color:#66d9ef">print</span>(replaced_text)
</code></pre></div><h3 id="12-1-列目を-col1txt-に2-列目を-col2txt-に保存-permalink">12. 1 列目を col1.txt に，2 列目を col2.txt に保存 Permalink</h3>
<p>各行の 1 列目だけを抜き出したものを col1.txt に，2 列目だけを抜き出したものを col2.txt としてファイルに保存せよ．確認には cut コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

col1 <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>], lines))
col2 <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>], lines))

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;col1-py.txt&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(col1) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;col2-py.txt&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(col2) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h3 id="13-col1txt-と-col2txt-をマージ">13. col1.txt と col2.txt をマージ</h3>
<p>12 で作った col1.txt と col2.txt を結合し，元のファイルの 1 列目と 2 列目をタブ区切りで並べたテキストファイルを作成せよ．確認には paste コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;col1-py.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    col1 <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;col2-py.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    col2 <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

lines <span style="color:#f92672">=</span> [f<span style="color:#e6db74">&#34;{x}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{y}&#34;</span> <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(col1, col2)]
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;cols-py.txt&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(lines))
</code></pre></div><h3 id="14-先頭から-n-行を出力">14. 先頭から N 行を出力</h3>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のうち先頭の N 行だけを表示せよ．確認には head コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">N <span style="color:#f92672">=</span> int(input())
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>lines[:N], sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><h3 id="15-末尾の-n-行を出力">15. 末尾の N 行を出力</h3>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のうち末尾の N 行だけを表示せよ．確認には tail コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">N <span style="color:#f92672">=</span> int(input())
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>lines[<span style="color:#f92672">-</span>N:], sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><h3 id="16-ファイルを-n-分割する">16. ファイルを N 分割する</h3>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のファイルを行単位で N 分割せよ．同様の処理を split コマンドで実現せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#f92672">as</span> np

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

N <span style="color:#f92672">=</span> int(input())
idx <span style="color:#f92672">=</span> list(map(int, np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, len(lines), N <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)))
files <span style="color:#f92672">=</span> [lines[idx[i]:idx[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(N)]
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>files, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h5 id="memo">memo</h5>
<ul>
<li>bash の方とは違う実装をしている</li>
<li>小数点の扱いがざる</li>
</ul>
<h3 id="17-１列目の文字列の異なり">17. １列目の文字列の異なり</h3>
<p>1 列目の文字列の種類（異なる文字列の集合）を求めよ．確認には cut, sort, uniq コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

uniq_names <span style="color:#f92672">=</span> set([line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines])
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>sorted(uniq_names), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h3 id="18-各行を-3-コラム目の数値の降順にソート">18. 各行を 3 コラム目の数値の降順にソート</h3>
<p>各行を 3 コラム目の数値の逆順で整列せよ（注意: 各行の内容は変更せずに並び替えよ）．確認には sort コマンドを用いよ（この問題はコマンドで実行した時の結果と合わなくてもよい）．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

sorted_lines <span style="color:#f92672">=</span> sorted(lines, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: int(x<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">2</span>]), reverse<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>sorted_lines, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><h3 id="19-各行の-1-コラム目の文字列の出現頻度を求め出現頻度の高い順に並べる">19. 各行の 1 コラム目の文字列の出現頻度を求め，出現頻度の高い順に並べる</h3>
<p>各行の 1 列目の文字列の出現頻度を求め，その高い順に並べて表示せよ．確認には cut, uniq, sort コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

col1_count <span style="color:#f92672">=</span> dict()
<span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> lines:
    c <span style="color:#f92672">=</span> l<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>]
    <span style="color:#66d9ef">if</span> col1_count<span style="color:#f92672">.</span>get(c):
        col1_count[c]<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">else</span>:
        col1_count[c] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
sorted_col1 <span style="color:#f92672">=</span> sorted(col1_count<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>sorted_col1, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h5 id="memo-1">memo</h5>

    <img src="https://i.imgur.com/2PTQM3P.png"  alt="blog top page"  class="center"  />


]]></content>
        </item>
        
        <item>
            <title>最近よく書くシェルスクリプトの備忘録</title>
            <link>https://tomowarkar.github.io/blog/posts/mac_bash/</link>
            <pubDate>Tue, 21 Apr 2020 19:16:51 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/mac_bash/</guid>
            <description>実行環境 $ sw_vers ProductName: Mac OS X ProductVersion: 10.15.4 BuildVersion: 19E266 $ sh --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin19) Copyright (C) 2007 Free Software Foundation, Inc. Linux コマンド ファイルの中身を表示する # 一番有名? 間違えてバイナリファイルなどを指定す</description>
            <content type="html"><![CDATA[<h2 id="実行環境">実行環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ sh --version
GNU bash, version 3.2.57<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>-release <span style="color:#f92672">(</span>x86_64-apple-darwin19<span style="color:#f92672">)</span>
Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2007</span> Free Software Foundation, Inc.
</code></pre></div><h2 id="linux-コマンド">Linux コマンド</h2>
<h3 id="ファイルの中身を表示する">ファイルの中身を表示する</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 一番有名? 間違えてバイナリファイルなどを指定すると悲惨</span>
cat /path/to/file
<span style="color:#75715e"># ファイルの一部を表示, スクロールして中身を見ることができる。</span>
less /path/to/file
<span style="color:#75715e"># less の出力結果を残す版</span>
more /path/to/file
</code></pre></div><h3 id="ヒアドキュメント">ヒアドキュメント</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat <span style="color:#e6db74">&lt;&lt;EOL &gt;/path/to/file
</span><span style="color:#e6db74">hoge
</span><span style="color:#e6db74">huga
</span><span style="color:#e6db74">EOL</span>
</code></pre></div><p>参考 <a href="https://qiita.com/take4s5i/items/e207cee4fb04385a9952">bashのヒアドキュメントを活用する</a></p>
<h3 id="dateコマンド">dateコマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ date -R
Tue, <span style="color:#ae81ff">21</span> Apr <span style="color:#ae81ff">2020</span> 18:50:48 +0900

$ date +%y%m%d
<span style="color:#ae81ff">200421</span>
<span style="color:#75715e"># 昨日の日付</span>
$ date -v -1d +%y%m%d
<span style="color:#ae81ff">200420</span>
</code></pre></div><h3 id="sayコマンド">sayコマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ say -v ? | grep <span style="color:#e6db74">&#34;ja_JP&#34;</span>
Kyoko               ja_JP    <span style="color:#75715e"># こんにちは、私の名前はKyokoです。日本語の音声をお届けします。</span>
Otoya               ja_JP    <span style="color:#75715e"># こんにちは、私の名前はOtoyaです。日本語の音声をお届けします。</span>

$ say -v Bad<span style="color:#ae81ff">\ </span>News Kgo mo ichi ni chi gamba lu zowi Kgo mo ichi ni chi gamba lu zowi
</code></pre></div><p>参考 <a href="https://gist.github.com/susisu/c9b106745f94c85e482c">非実用 say コマンド</a></p>
<h3 id="afplay-コマンド">afplay コマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># バックグラウンド再生</span>
$ afplay -q <span style="color:#ae81ff">1</span> /path/to/audio/file &amp;
<span style="color:#75715e"># 中断</span>
$ killall afplay
</code></pre></div><h2 id="シェルスクリプト">シェルスクリプト</h2>
<h3 id="シェルスクリプトの説明文">シェルスクリプトの説明文</h3>
<h5 id="hogesh">hoge.sh</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># @(#) This script is hoge.</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ what hoge.sh 
hoge.sh
         This script is hoge.
</code></pre></div><h3 id="ファイルの初期化">ファイルの初期化</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># touch だと作成済みのファイルは初期化されない</span>
touch /path/to/file

<span style="color:#75715e"># これでもいいけど</span>
echo -n <span style="color:#e6db74">&#34;&#34;</span> &gt; /path/to/file

<span style="color:#75715e"># こっちのがスマート</span>
:&gt; /path/to/file
</code></pre></div><h3 id="演算子">演算子</h3>
<p>コマンドが成功した時と失敗した時とでの場合わけ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ true <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> echo <span style="color:#ae81ff">2</span>
&gt;&gt; <span style="color:#ae81ff">1</span>
$ false <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> echo <span style="color:#ae81ff">2</span>
&gt;&gt; <span style="color:#ae81ff">2</span>
</code></pre></div><h3 id="拡張子を取り除きたい">拡張子を取り除きたい</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ f<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hoge.md&#34;</span>
$ echo <span style="color:#e6db74">${</span>f%.*<span style="color:#e6db74">}</span>
&gt;&gt; hoge
</code></pre></div><p>参考 <a href="https://qiita.com/mriho/items/b30b3a33e8d2e25e94a8">bashの変数展開によるファイル名や拡張子の取得</a></p>
<h3 id="引数をループ">引数をループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> arg; <span style="color:#66d9ef">do</span>
    echo $arg
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="無限ループ">無限ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">while</span> true; <span style="color:#66d9ef">do</span>
    :
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="for-ループ">for ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> i in aa bb cc; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>

<span style="color:#66d9ef">for</span> i in <span style="color:#66d9ef">$(</span>seq 10<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">((</span>i <span style="color:#f92672">=</span> 1; i &lt; 11; i++<span style="color:#f92672">))</span>; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="ls-ループ">ls ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> f in *; <span style="color:#66d9ef">do</span>
    echo $f
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="ファイル内ループ">ファイル内ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">while</span> read line; <span style="color:#66d9ef">do</span>
　　echo $line
<span style="color:#66d9ef">done</span> &lt; /path/to/file
</code></pre></div><h2 id="引数解析">引数解析</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">COMMAND<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>basename $0<span style="color:#e6db74">`</span>
<span style="color:#66d9ef">while</span> getopts ab: OPT
<span style="color:#66d9ef">do</span>
  <span style="color:#66d9ef">case</span> $OPT in
    a <span style="color:#f92672">)</span> OPTION_a<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TRUE&#34;</span> ;;
    b <span style="color:#f92672">)</span> OPTION_b<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TRUE&#34;</span> ; VALUE_b<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$OPTARG<span style="color:#e6db74">&#34;</span> ;;
    * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Usage: &#34;</span> ; exit <span style="color:#ae81ff">1</span> ;;
  <span style="color:#66d9ef">esac</span>
<span style="color:#66d9ef">done</span>

shift <span style="color:#66d9ef">$((</span>$OPTIND <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">))</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$OPTION_b<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TRUE&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    :
<span style="color:#66d9ef">fi</span>
</code></pre></div><h3 id="途中終了時実行コマンド">途中終了時実行コマンド</h3>
<p>Ctl+c でスクリプト実行が途中終了した時のコマンドを指定できる</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">trap <span style="color:#e6db74">&#34;echo \&#34;\n途中終了!!\&#34;&#34;</span> <span style="color:#ae81ff">0</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #01</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-01/</link>
            <pubDate>Mon, 13 Apr 2020 09:56:10 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-01/</guid>
            <description>言語処理 100 本ノック(第 1 章: 準備運動) 環境 Python 3.6.8 00. 文字列の逆順 Permalink 文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を</description>
            <content type="html"><![CDATA[<h2 id="言語処理-100-本ノック第-1-章-準備運動httpsnlp100githubiojach01html"><a href="https://nlp100.github.io/ja/ch01.html">言語処理 100 本ノック(第 1 章: 準備運動)</a></h2>
<h3 id="環境">環境</h3>
<p>Python 3.6.8</p>
<h3 id="00-文字列の逆順-permalink">00. 文字列の逆順 Permalink</h3>
<p>文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;stressed&#34;</span>[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
<span style="color:#e6db74">&#39;desserts&#39;</span>
</code></pre></div><h3 id="01-パタトクカシーーpermalink">01. 「パタトクカシーー」Permalink</h3>
<p>「パタトクカシーー」という文字列の 1,3,5,7 文字目を取り出して連結した文字列を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;パタトクカシーー&#34;</span>[<span style="color:#ae81ff">1</span>::<span style="color:#ae81ff">2</span>]
<span style="color:#e6db74">&#39;タクシー&#39;</span>
</code></pre></div><h3 id="02-パトカータクシーパタトクカシーー">02. 「パトカー」＋「タクシー」＝「パタトクカシーー」</h3>
<p>「パトカー」＋「タクシー」の文字を先頭から交互に連結して文字列「パタトクカシーー」を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([i <span style="color:#f92672">+</span> j <span style="color:#66d9ef">for</span> i, j <span style="color:#f92672">in</span> zip(<span style="color:#e6db74">&#34;パトカー&#34;</span>, <span style="color:#e6db74">&#34;タクシー&#34;</span>)])
<span style="color:#e6db74">&#39;パタトクカシーー&#39;</span>
</code></pre></div><h3 id="03-円周率">03. 円周率</h3>
<p>“Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.”という文を単語に分解し，各単語の（アルファベットの）文字数を先頭から出現順に並べたリストを作成せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> list(map(<span style="color:#66d9ef">lambda</span> x: len(x), re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s)))
[<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>]
</code></pre></div><h3 id="04-元素記号-permalink">04. 元素記号 Permalink</h3>
<p>“Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.”という文を単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19 番目の単語は先頭の 1 文字，それ以外の単語は先頭に 2 文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列（辞書型もしくはマップ型）を作成せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> p <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">19</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> {word[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> p <span style="color:#66d9ef">else</span> word[:<span style="color:#ae81ff">2</span>] :i <span style="color:#66d9ef">for</span> i, word <span style="color:#f92672">in</span> enumerate(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), start<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)}
{<span style="color:#e6db74">&#39;H&#39;</span>: <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;He&#39;</span>: <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;Li&#39;</span>: <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;Be&#39;</span>: <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#39;B&#39;</span>: <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#39;C&#39;</span>: <span style="color:#ae81ff">6</span>, <span style="color:#e6db74">&#39;N&#39;</span>: <span style="color:#ae81ff">7</span>, <span style="color:#e6db74">&#39;O&#39;</span>: <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#39;F&#39;</span>: <span style="color:#ae81ff">9</span>, <span style="color:#e6db74">&#39;Ne&#39;</span>: <span style="color:#ae81ff">10</span>, <span style="color:#e6db74">&#39;Na&#39;</span>: <span style="color:#ae81ff">11</span>, <span style="color:#e6db74">&#39;Mi&#39;</span>: <span style="color:#ae81ff">12</span>, <span style="color:#e6db74">&#39;Al&#39;</span>: <span style="color:#ae81ff">13</span>, <span style="color:#e6db74">&#39;Si&#39;</span>: <span style="color:#ae81ff">14</span>, <span style="color:#e6db74">&#39;P&#39;</span>: <span style="color:#ae81ff">15</span>, <span style="color:#e6db74">&#39;S&#39;</span>: <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#39;Cl&#39;</span>: <span style="color:#ae81ff">17</span>, <span style="color:#e6db74">&#39;Ar&#39;</span>: <span style="color:#ae81ff">18</span>, <span style="color:#e6db74">&#39;K&#39;</span>: <span style="color:#ae81ff">19</span>, <span style="color:#e6db74">&#39;Ca&#39;</span>: <span style="color:#ae81ff">20</span>}
</code></pre></div><h3 id="05-n-grampermalink">05. n-gramPermalink</h3>
<p>与えられたシーケンス（文字列やリストなど）から n-gram を作る関数を作成せよ．この関数を用い，”I am an NLPer”という文から単語 bi-gram，文字 bi-gram を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I am an NLPer&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y: [ <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(x[i:i<span style="color:#f92672">+</span>y]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(x) <span style="color:#f92672">-</span> y <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) ]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">1</span>)
[<span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;n&#39;</span>, <span style="color:#e6db74">&#39;N&#39;</span>, <span style="color:#e6db74">&#39;L&#39;</span>, <span style="color:#e6db74">&#39;P&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">2</span>)
[<span style="color:#e6db74">&#39;Ia&#39;</span>, <span style="color:#e6db74">&#39;am&#39;</span>, <span style="color:#e6db74">&#39;ma&#39;</span>, <span style="color:#e6db74">&#39;an&#39;</span>, <span style="color:#e6db74">&#39;nN&#39;</span>, <span style="color:#e6db74">&#39;NL&#39;</span>, <span style="color:#e6db74">&#39;LP&#39;</span>, <span style="color:#e6db74">&#39;Pe&#39;</span>, <span style="color:#e6db74">&#39;er&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">3</span>)
[<span style="color:#e6db74">&#39;Iam&#39;</span>, <span style="color:#e6db74">&#39;ama&#39;</span>, <span style="color:#e6db74">&#39;man&#39;</span>, <span style="color:#e6db74">&#39;anN&#39;</span>, <span style="color:#e6db74">&#39;nNL&#39;</span>, <span style="color:#e6db74">&#39;NLP&#39;</span>, <span style="color:#e6db74">&#39;LPe&#39;</span>, <span style="color:#e6db74">&#39;Per&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">1</span>)
[<span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#e6db74">&#39;am&#39;</span>, <span style="color:#e6db74">&#39;an&#39;</span>, <span style="color:#e6db74">&#39;NLPer&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">2</span>)
[<span style="color:#e6db74">&#39;Iam&#39;</span>, <span style="color:#e6db74">&#39;aman&#39;</span>, <span style="color:#e6db74">&#39;anNLPer&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">3</span>)
[<span style="color:#e6db74">&#39;Iaman&#39;</span>, <span style="color:#e6db74">&#39;amanNLPer&#39;</span>]
</code></pre></div><h3 id="06-集合-permalink">06. 集合 Permalink</h3>
<p>“paraparaparadise”と”paragraph”に含まれる文字 bi-gram の集合を，それぞれ, X と Y として求め，X と Y の和集合，積集合，差集合を求めよ．さらに，’se’という bi-gram が X および Y に含まれるかどうかを調べよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> bi_gram <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: [ x[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(x) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)]
<span style="color:#f92672">&gt;&gt;&gt;</span> X <span style="color:#f92672">=</span> bi_gram(<span style="color:#e6db74">&#34;paraparaparadise&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> Y <span style="color:#f92672">=</span> bi_gram(<span style="color:#e6db74">&#34;paragraph&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> X
[<span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;se&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> Y
[<span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ag&#39;</span>, <span style="color:#e6db74">&#39;gr&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;ph&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">|</span> set(Y)
{<span style="color:#e6db74">&#39;se&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ag&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;ph&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;gr&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">&amp;</span> set(Y)
{<span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">-</span> set(Y)
{<span style="color:#e6db74">&#39;se&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;se&#34;</span> <span style="color:#f92672">in</span> X
True
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;se&#34;</span> <span style="color:#f92672">in</span> Y
False
</code></pre></div><h3 id="07-テンプレートによる文生成">07. テンプレートによる文生成</h3>
<p>引数 x, y, z を受け取り「x 時の y は z」という文字列を返す関数を実装せよ．さらに，x=12, y=”気温”, z=22.4 として，実行結果を確認せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y, z: <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{x} 時の {y} は {z}&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> f(x<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;気温&#34;</span>, z<span style="color:#f92672">=</span><span style="color:#ae81ff">22.4</span>)
<span style="color:#ae81ff">12</span> <span style="color:#960050;background-color:#1e0010">時の</span> <span style="color:#960050;background-color:#1e0010">気温</span> <span style="color:#960050;background-color:#1e0010">は</span> <span style="color:#ae81ff">22.4</span>
</code></pre></div><h3 id="08-暗号文">08. 暗号文</h3>
<p>与えられた文字列の各文字を，以下の仕様で変換する関数 cipher を実装せよ．</p>
<ul>
<li>英小文字ならば(219 - 文字コード)の文字に置換</li>
<li>その他の文字はそのまま出力</li>
</ul>
<p>この関数を用い，英語のメッセージを暗号化・復号化せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(<span style="color:#ae81ff">219</span><span style="color:#f92672">-</span>ord(e)) <span style="color:#66d9ef">if</span> re<span style="color:#f92672">.</span>match(<span style="color:#e6db74">&#34;[a-z]&#34;</span>, e) <span style="color:#66d9ef">else</span> e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x])
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(<span style="color:#e6db74">&#34;abcde01Aaz&#34;</span>)
<span style="color:#e6db74">&#39;zyxwv01Aza&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(i) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">97</span><span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>)])
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(s)
<span style="color:#e6db74">&#39;zyxwvutsrqponmlkjihgfedcba&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(cipher(s))
<span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(i) <span style="color:#66d9ef">if</span> i<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> chr(i)<span style="color:#f92672">.</span>upper() <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">97</span><span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>)])
<span style="color:#f92672">&gt;&gt;&gt;</span> s
<span style="color:#e6db74">&#39;abCdeFghIjkLmnOpqRstUvwXyz&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(s)
<span style="color:#e6db74">&#39;zyCwvFtsIqpLnmOkjRhgUedXba&#39;</span>
</code></pre></div><h5 id="memo">memo</h5>
<p>英小文字の文字コード範囲は 79-122</p>
<p>219 - 文字コードの範囲は 122-79</p>
<p>つまり丁度 反転の形をとり cipher によって a-z が z-a に対応するよう暗号化されることがわかる。</p>
<p>また同じく cipher を 1 度かけると暗号化, 2 度かけると複合化されることがわかる.</p>
<h5 id="参考">参考</h5>
<p><a href="https://docs.python.org/ja/3/library/functions.html#ord">Python 組み込み関数</a></p>
<p><a href="https://note.nkmk.me/python-chr-ord-unicode-code-point/">Python で Unicode コードポイントと文字を相互変換（chr, ord, \x, \u, \U）</a></p>
<h3 id="09-typoglycemia">09. Typoglycemia</h3>
<p>スペースで区切られた単語列に対して，各単語の先頭と末尾の文字は残し，それ以外の文字の順序をランダムに並び替えるプログラムを作成せよ．ただし，長さが４以下の単語は並び替えないこととする．適当な英語の文（例えば”I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .”）を与え，その実行結果を確認せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> sample
<span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([e <span style="color:#66d9ef">if</span> len(e) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">else</span> e[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([e[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> sample(range(<span style="color:#ae81ff">1</span>, len(e)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>), len(e)<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>)]) <span style="color:#f92672">+</span> e[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>split()])
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I codln’ut bivleee that I cloud aaltculy usaertdnnd what I was randeig : the pnnmeoahel peowr of the hmuan mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I cl’duont belevie that I colud actaully udtsnaenrd what I was rieadng : the pmnehoeanl pewor of the huamn mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I coludn’t beevlie that I culod acltualy udestnnrad what I was rdeaing : the pnmoneehal power of the hmaun mind .&#39;</span>
</code></pre></div><p>こちらでもいけた</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([e <span style="color:#66d9ef">if</span> len(e) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">else</span> e[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(sample(e[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], len(e[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))) <span style="color:#f92672">+</span> e[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>split()])
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I cnudlo’t belivee that I colud aaulclty utnansredd what I was rediang : the pahemnneol peowr of the hamun mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I culn’odt belivee that I culod acalulty uraetndnsd what I was reaindg : the pennoeamhl peowr of the haumn mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I codlnu’t beevile that I cloud atluclay unrntsaedd what I was rneidag : the paeehnomnl peowr of the hmaun mind .&#39;</span>
</code></pre></div><h5 id="参考-1">参考</h5>
<p><a href="https://note.nkmk.me/python-random-shuffle/#_1">文字列やタプルのシャッフル</a></p>
<h2 id="おわりに">おわりに</h2>
<p><a href="https://github.com/yoyoyo-yo/Gasyori100knock">画像処理 100 本ノック!!</a>もあるようなので言語処理 100 本ノック が終わり次第やりたい。</p>
<p>(まずは言語処理 100 本ノック )</p>
]]></content>
        </item>
        
        <item>
            <title>[macOS] コマンドラインで音楽を流したい</title>
            <link>https://tomowarkar.github.io/blog/posts/afplay/</link>
            <pubDate>Sun, 12 Apr 2020 23:33:30 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/afplay/</guid>
            <description>環境 $ bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin19) Copyright (C) 2007 Free Software Foundation, Inc. $ afplay -h Audio File Play Version: 2.0 Copyright 2003-2013, Apple Inc. All Rights Reserved. Specify -h (-help) for command options Usage: afplay [option...] audio_file Options: (may appear before or after arguments) {-v | --volume} VOLUME set the volume for playback of the file {-h | --help} print help { --leaks} run leaks</description>
            <content type="html"><![CDATA[<h2 id="環境">環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ bash --version
GNU bash, version 3.2.57<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>-release <span style="color:#f92672">(</span>x86_64-apple-darwin19<span style="color:#f92672">)</span>
Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2007</span> Free Software Foundation, Inc.
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay -h

    Audio File Play
    Version: 2.0
    Copyright 2003-2013, Apple Inc. All Rights Reserved.
    Specify -h <span style="color:#f92672">(</span>-help<span style="color:#f92672">)</span> <span style="color:#66d9ef">for</span> command options

Usage:
afplay <span style="color:#f92672">[</span>option...<span style="color:#f92672">]</span> audio_file

Options: <span style="color:#f92672">(</span>may appear before or after arguments<span style="color:#f92672">)</span>
  <span style="color:#f92672">{</span>-v | --volume<span style="color:#f92672">}</span> VOLUME
    set the volume <span style="color:#66d9ef">for</span> playback of the file
  <span style="color:#f92672">{</span>-h | --help<span style="color:#f92672">}</span>
    print help
  <span style="color:#f92672">{</span> --leaks<span style="color:#f92672">}</span>
    run leaks analysis
  <span style="color:#f92672">{</span>-t | --time<span style="color:#f92672">}</span> TIME
    play <span style="color:#66d9ef">for</span> TIME seconds
  <span style="color:#f92672">{</span>-r | --rate<span style="color:#f92672">}</span> RATE
    play at playback rate
  <span style="color:#f92672">{</span>-q | --rQuality<span style="color:#f92672">}</span> QUALITY
    set the quality used <span style="color:#66d9ef">for</span> rate-scaled playback <span style="color:#f92672">(</span>default is <span style="color:#ae81ff">0</span> - low quality, <span style="color:#ae81ff">1</span> - high quality<span style="color:#f92672">)</span>
  <span style="color:#f92672">{</span>-d | --debug<span style="color:#f92672">}</span>
    debug print output
</code></pre></div><h3 id="再生">再生</h3>
<p>quality はデフォルト値が low である 0 なので 1 に変更</p>
<p>音量は適宜</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay -q <span style="color:#ae81ff">1</span> -v .1 path/to/audio_file
</code></pre></div><h3 id="バックグラウンド実行-プロセスの確認-プロセス-kill">バックグラウンド実行, プロセスの確認, プロセス kill</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay path/to/audio_file &amp;
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span> PID
$ jobs
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>+  Running afplay path/to/audio_file &amp;
$ <span style="color:#75715e"># kill %ジョブ番号</span>
$ kill %1
$ <span style="color:#75715e"># もしくは</span>
$ kill PID
</code></pre></div><p>見つからない場合や、他のターミナルから kill</p>
<pre><code>ps aux | grep afplay | grep -v grep | awk '{ print &quot;kill -9&quot;, $2 }' | sh
</code></pre><h2 id="参考">参考</h2>
<ul>
<li><a href="https://zariganitosh.hatenablog.jp/entry/20100908/itunes">徹底的にソフトウェアで豊かな音を奏でてみよう</a></li>
<li><a href="https://qiita.com/inosy22/items/341cfc589494b8211844">Linux コマンド(Bash)でバックグラウンド実行する方法のまとめメモ</a></li>
<li><a href="https://qiita.com/nyango/items/7b6b719f248b2ee8d379">シェルスクリプトで単純に並列実行・直列実行を行う</a></li>
<li><a href="https://qiita.com/masarufuruya/items/409679c1006980ef1b60">プロセス名で grep した結果を kill するシェルスクリプトを作る</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>VSCodeのインストール済み拡張機能とその用途</title>
            <link>https://tomowarkar.github.io/blog/posts/vscode_list_extensions/</link>
            <pubDate>Fri, 10 Apr 2020 15:16:15 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/vscode_list_extensions/</guid>
            <description>個人的メモ 定期的に確認すると良さげですね VSCode プラグイン一覧の表示 code --list-extensions | xargs -L 1 echo code --install-extension 2020/04/10 現在 code --install-extension bbenoist.shell code --install-extension christian-kohler.npm-intellisense code --install-extension christian-kohler.path-intellisense code --install-extension dariofuzinato.vue-peek code --install-extension dbaeumer.vscode-eslint code --install-extension donjayamanne.jupyter code --install-extension eg2.vscode-npm-script code --install-extension esbenp.prettier-vscode code --install-extension formulahendry.auto-close-tag</description>
            <content type="html"><![CDATA[<p>個人的メモ</p>
<p>定期的に確認すると良さげですね</p>
<h2 id="vscode-プラグイン一覧の表示">VSCode プラグイン一覧の表示</h2>
<pre><code>code --list-extensions | xargs -L 1 echo code --install-extension
</code></pre><h3 id="20200410-現在">2020/04/10 現在</h3>
<pre><code>code --install-extension bbenoist.shell
code --install-extension christian-kohler.npm-intellisense
code --install-extension christian-kohler.path-intellisense
code --install-extension dariofuzinato.vue-peek
code --install-extension dbaeumer.vscode-eslint
code --install-extension donjayamanne.jupyter
code --install-extension eg2.vscode-npm-script
code --install-extension esbenp.prettier-vscode
code --install-extension formulahendry.auto-close-tag
code --install-extension formulahendry.auto-complete-tag
code --install-extension formulahendry.auto-rename-tag
code --install-extension formulahendry.code-runner
code --install-extension jcbuisson.vue
code --install-extension KnisterPeter.vscode-github
code --install-extension ms-azuretools.vscode-docker
code --install-extension MS-CEINTL.vscode-language-pack-ja
code --install-extension ms-mssql.mssql
code --install-extension ms-python.python
code --install-extension ms-vscode.cpptools
code --install-extension ms-vscode.Go
code --install-extension ms-vscode.vscode-typescript-tslint-plugin
code --install-extension mubaidr.vuejs-extension-pack
code --install-extension octref.vetur
code --install-extension robertoachar.vscode-essentials-snippets
code --install-extension tht13.python
code --install-extension tombonnike.vscode-status-bar-format-toggle
code --install-extension tomoki1207.pdf
code --install-extension VisualStudioExptTeam.vscodeintellicode
code --install-extension xabikos.JavaScriptSnippets
code --install-extension xaver.clang-format
code --install-extension yzhang.markdown-all-in-one
</code></pre><h2 id="用途">用途</h2>
<h5 id="bbenoistshellhttpsmarketplacevisualstudiocomitemsitemnamebbenoistshell"><a href="https://marketplace.visualstudio.com/items?itemName=bbenoist.shell">bbenoist.shell</a></h5>
<ul>
<li>エディタから直接shellコマンドを実行できる</li>
<li>ほぼ使っていない</li>
</ul>
<h5 id="christian-kohlerpath-intellisensehttpsmarketplacevisualstudiocomitemsitemnamechristian-kohlerpath-intellisense"><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">christian-kohler.path-intellisense</a></h5>
<ul>
<li>ファイル名を自動補完</li>
<li>賢くて良き</li>
</ul>
<h5 id="dbaeumervscode-eslinthttpsmarketplacevisualstudiocomitemsitemnamedbaeumervscode-eslint"><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">dbaeumer.vscode-eslint</a></h5>
<ul>
<li>コードフォーマッター</li>
<li>よくわからん</li>
</ul>
<h5 id="esbenpprettier-vscodehttpsmarketplacevisualstudiocomitemsitemnameesbenpprettier-vscode"><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">esbenp.prettier-vscode</a></h5>
<ul>
<li>コードフォーマッター</li>
<li><a href="https://qiita.com/soarflat/items/06377f3b96964964a65d">Prettier 入門 ～ESLintとの違いを理解して併用する～</a></li>
</ul>
<h5 id="eg2vscode-npm-scripthttpsmarketplacevisualstudiocomitemsitemnameeg2vscode-npm-script"><a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script">eg2.vscode-npm-script</a></h5>
<ul>
<li>npm のhogehoge</li>
<li>よくわからん</li>
</ul>
<h5 id="christian-kohlernpm-intellisensehttpsmarketplacevisualstudiocomitemsitemnamechristian-kohlernpm-intellisense"><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">christian-kohler.npm-intellisense</a></h5>
<ul>
<li>npmモジュールを自動補完</li>
</ul>
<h5 id="dariofuzinatovue-peekhttpsmarketplacevisualstudiocomitemsitemnamedariofuzinatovue-peek"><a href="https://marketplace.visualstudio.com/items?itemName=dariofuzinato.vue-peek">dariofuzinato.vue-peek</a></h5>
<ul>
<li>vue のhogehoge</li>
<li>vueをあまり書いてないからよくわからん</li>
</ul>
<h5 id="jcbuissonvuehttpsmarketplacevisualstudiocomitemsitemnamejcbuissonvue"><a href="https://marketplace.visualstudio.com/items?itemName=jcbuisson.vue">jcbuisson.vue</a></h5>
<ul>
<li>vue のSyntax Highlight</li>
<li>まあいるよね</li>
</ul>
<h5 id="mubaidrvuejs-extension-packhttpsmarketplacevisualstudiocomitemsitemnamemubaidrvuejs-extension-pack"><a href="https://marketplace.visualstudio.com/items?itemName=mubaidr.vuejs-extension-pack">mubaidr.vuejs-extension-pack</a></h5>
<ul>
<li>vue 関連</li>
</ul>
<h5 id="octrefveturhttpsmarketplacevisualstudiocomitemsitemnameoctrefvetur"><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">octref.vetur</a></h5>
<ul>
<li>同上</li>
</ul>
<h5 id="formulahendryauto-complete-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-complete-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-complete-tag">formulahendry.auto-complete-tag</a></h5>
<ul>
<li>以下二つのまとめ役</li>
</ul>
<h5 id="formulahendryauto-close-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-close-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">formulahendry.auto-close-tag</a></h5>
<ul>
<li>html などの close tag 自動補完</li>
<li>必須</li>
</ul>
<h5 id="formulahendryauto-rename-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-rename-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">formulahendry.auto-rename-tag</a></h5>
<ul>
<li>便利</li>
<li>時々うざい</li>
</ul>
<h5 id="formulahendrycode-runnerhttpsmarketplacevisualstudiocomitemsitemnameformulahendrycode-runner"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">formulahendry.code-runner</a></h5>
<ul>
<li>VScode上でのショートカット操作で外部のshell scriptを実行できる</li>
<li>入れたてホヤホヤ未使用様</li>
</ul>
<h5 id="knisterpetervscode-githubhttpsmarketplacevisualstudiocomitemsitemnameknisterpetervscode-github"><a href="https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-github">KnisterPeter.vscode-github</a></h5>
<ul>
<li>github関連</li>
<li>どこからどこまで何をしているのかわからない</li>
</ul>
<h5 id="ms-azuretoolsvscode-dockerhttpsmarketplacevisualstudiocomitemsitemnamems-azuretoolsvscode-docker"><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker">ms-azuretools.vscode-docker</a></h5>
<ul>
<li>docker for vscode</li>
<li>あまりdocker触ってないなぁ</li>
</ul>
<h5 id="ms-ceintlvscode-language-pack-jahttpsmarketplacevisualstudiocomitemsitemnamems-ceintlvscode-language-pack-ja"><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ja">MS-CEINTL.vscode-language-pack-ja</a></h5>
<ul>
<li>VSCodeの日本語対応</li>
<li>必須</li>
</ul>
<h5 id="ms-mssqlmssqlhttpsmarketplacevisualstudiocomitemsitemnamems-mssqlmssql"><a href="https://marketplace.visualstudio.com/items?itemName=ms-mssql.mssql">ms-mssql.mssql</a></h5>
<ul>
<li>sql関連</li>
</ul>
<h5 id="ms-pythonpythonhttpsmarketplacevisualstudiocomitemsitemnamems-pythonpython"><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">ms-python.python</a></h5>
<ul>
<li>python関連</li>
<li>必須</li>
</ul>
<h5 id="tht13pythonhttpsmarketplacevisualstudiocomitemsitemnametht13python"><a href="https://marketplace.visualstudio.com/items?itemName=tht13.python">tht13.python</a></h5>
<ul>
<li>python関連</li>
<li>よくわからん</li>
</ul>
<h5 id="donjayamannejupyterhttpsmarketplacevisualstudiocomitemsitemnamedonjayamannejupyter"><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.jupyter">donjayamanne.jupyter</a></h5>
<ul>
<li>jupyter notebook　のhogehoge</li>
<li>あると便利</li>
<li>なくても困らん</li>
</ul>
<h5 id="xaverclang-formathttpsmarketplacevisualstudiocomitemsitemnamexaverclang-format"><a href="https://marketplace.visualstudio.com/items?itemName=xaver.clang-format">xaver.clang-format</a></h5>
<ul>
<li>c関連</li>
</ul>
<h5 id="ms-vscodecpptoolshttpsmarketplacevisualstudiocomitemsitemnamems-vscodecpptools"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">ms-vscode.cpptools</a></h5>
<ul>
<li>c/c++関連</li>
</ul>
<h5 id="ms-vscodegohttpsmarketplacevisualstudiocomitemsitemnamems-vscodego"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go">ms-vscode.Go</a></h5>
<ul>
<li>go 関連</li>
<li>必須</li>
</ul>
<h5 id="ms-vscodevscode-typescript-tslint-pluginhttpsmarketplacevisualstudiocomitemsitemnamems-vscodevscode-typescript-tslint-plugin"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin">ms-vscode.vscode-typescript-tslint-plugin</a></h5>
<ul>
<li>使ってないなぁ</li>
</ul>
<h5 id="robertoacharvscode-essentials-snippetshttpsmarketplacevisualstudiocomitemsitemnamerobertoacharvscode-essentials-snippets"><a href="https://marketplace.visualstudio.com/items?itemName=robertoachar.vscode-essentials-snippets">robertoachar.vscode-essentials-snippets</a></h5>
<ul>
<li>見た感じ便利そう</li>
<li>なお使ったことはない</li>
</ul>
<h5 id="tombonnikevscode-status-bar-format-togglehttpsmarketplacevisualstudiocomitemsitemnametombonnikevscode-status-bar-format-toggle"><a href="https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle">tombonnike.vscode-status-bar-format-toggle</a></h5>
<ul>
<li>なんだ&hellip; これは&hellip;</li>
</ul>
<h5 id="tomoki1207pdfhttpsmarketplacevisualstudiocomitemsitemnametomoki1207pdf"><a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf">tomoki1207.pdf</a></h5>
<ul>
<li>VSCodeでPDFが見れる</li>
<li>benri</li>
</ul>
<h5 id="visualstudioexptteamvscodeintellicodehttpsmarketplacevisualstudiocomitemsitemnamevisualstudioexptteamvscodeintellicode"><a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode">VisualStudioExptTeam.vscodeintellicode</a></h5>
<ul>
<li>ものゴッツ便利</li>
</ul>
<h5 id="xabikosjavascriptsnippetshttpsmarketplacevisualstudiocomitemsitemnamexabikosjavascriptsnippets"><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">xabikos.JavaScriptSnippets</a></h5>
<ul>
<li>JS</li>
<li>こんなん知らんかった</li>
<li>今度使いたい</li>
</ul>
<h5 id="yzhangmarkdown-all-in-onehttpsmarketplacevisualstudiocomitemsitemnameyzhangmarkdown-all-in-one"><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">yzhang.markdown-all-in-one</a></h5>
<ul>
<li>markdown関連</li>
<li>必須</li>
</ul>
<h3 id="参考">参考</h3>
<p><a href="https://qiita.com/koshilife/items/3ed4b1c28de233f39ebb">Qiita::VSCode インストール済 プラグイン一覧の確認方法 (コマンド)</a></p>
]]></content>
        </item>
        
        <item>
            <title>imgurに画像をアップロードするBashスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/imgur_api/</link>
            <pubDate>Fri, 10 Apr 2020 11:32:50 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/imgur_api/</guid>
            <description>選ばれたのはimgurでした. このブログでの画像の管理をどうしようかと30秒程考えた結果、imgurで管理することにしました。 それに応じてi</description>
            <content type="html"><![CDATA[<p>選ばれたのは<a href="https://imgur.com/">imgur</a>でした.</p>
<p>このブログでの画像の管理をどうしようかと30秒程考えた結果、imgurで管理することにしました。</p>
<p>それに応じてimgurにブログ用の画像を簡単にアップロードするbashスクリプトを書いたので備忘録。</p>
<h3 id="なぜこのブログの画像管理にimgurを選んだか">なぜこのブログの画像管理にimgurを選んだか</h3>
<p>imgurを選んだ理由はこんな感じ</p>
<ul>
<li>apiが使える</li>
<li>無料であある</li>
<li>投稿オプションが豊富(匿名、アルバム, タグなど)</li>
</ul>
<p>デメリットとしては、</p>
<ul>
<li>画像サイズ制限</li>
<li>使われない画像の自動削除</li>
</ul>
<p>などがあるが、画像サイズ制限はそこまで画質を重視しないのと,アップロード時の通信料を考えて元々圧縮した画像をアップロードするつもりなのでOK</p>
<p>使われない画像の自動削除については正直どうなるか未知数なので、今後の運用を見て適宜考えていくこととする。とはいえそこまで画像を多用するつもりはないので最悪消えても大丈夫だろう。</p>
<h2 id="スクリプト本文">スクリプト本文</h2>
<h3 id="依存">依存</h3>
<p><a href="https://apidocs.imgur.com/?version=latest">imgur api doc</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ffmpeg -version
ffmpeg version 4.2.2

$ jq --version
jq-1.6

$ curl --version
curl 7.64.1
</code></pre></div><h3 id="imgursh">imgur.sh</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># !/bin/bash</span>
<span style="color:#75715e"># imgurの特定のアルバムに写真をアップロードする。</span>
COMMAND<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>basename $0<span style="color:#e6db74">`</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! $# -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
echo <span style="color:#e6db74">&#34;Usage: </span>$COMMAND<span style="color:#e6db74"> img_path&#34;</span>
exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># 画像を横600pxになるようにリサイズ</span>
tmp_img<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;resized_img.png&#34;</span>
ffmpeg -i <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> -vf scale<span style="color:#f92672">=</span>600:-1 $tmp_img

ACCESS_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your imgur api auth acess token&#34;</span>
ALBUM_HASH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your imgur album hash&#34;</span>

JSON_RESPONSE<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl --request POST --url https://api.imgur.com/3/image --header <span style="color:#e6db74">&#34;authorization: Bearer </span><span style="color:#e6db74">${</span>ACCESS_TOKEN<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> -F <span style="color:#e6db74">&#34;image=@</span>$tmp_img<span style="color:#e6db74">&#34;</span> -F <span style="color:#e6db74">&#34;album=</span>$ALBUM_HASH<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span>

success<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>echo $JSON_RESPONSE | jq <span style="color:#e6db74">&#34;.success&#34;</span><span style="color:#e6db74">`</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $success <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;true&#34;</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
  echo
  url<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>echo $JSON_RESPONSE | jq <span style="color:#e6db74">&#34;.data.link&#34;</span><span style="color:#e6db74">`</span>
  echo $url
  <span style="color:#75715e"># ショートコード扱いになるため{{_ としているが、_は不要。</span>
  echo <span style="color:#e6db74">&#34;{{_&lt;image src=</span>$url<span style="color:#e6db74"> alt=\&#34;blog top page\&#34; position=\&#34;center\&#34;&gt;}}&#34;</span>

  <span style="color:#75715e"># アップロードに成功したら元画像をゴミ箱に入れる</span>
  mv <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;/Users/username/.Trash/&#34;</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># 可否によらず削除</span>
rm $tmp_img
exit <span style="color:#ae81ff">0</span>

</code></pre></div><p>少し改変してあるが、大まかにこんな感じで実装。</p>
<p>相変わらず <code>jq</code> は便利である。</p>
<h2 id="個人的ポイント">個人的ポイント</h2>
<h3 id="アップロード前のリサイズ">アップロード前のリサイズ</h3>
<pre><code>ffmpeg -i &quot;$1&quot; -vf scale=600:-1 $tmp_img
</code></pre><p>私のMac(MacBook Pro, 13-inch, 2016)でフルサイズのスクリーンショットをすると 2880×1800 の画像が保存される518万画素の3K画質である。</p>
<p>流石にそんなに高画質な画像は必要ないのと、手軽さを考え横のスケールを600pxに圧縮してアップロードすることにした。</p>
<p>フルサイズのスクリーンショットだと 2880×1800 が 600×375になるので約1/23のサイズになる</p>
<h3 id="アウトプットをhugoのショートコードで出力">アウトプットをHugoのショートコードで出力</h3>
<p>HugoにはMarkdownで使える便利なショートコードがある</p>
<p><a href="https://gohugo.io/content-management/shortcodes/">Hugo :: Shortcodes</a></p>
<p>アウトプットの形をショートコードにすることで画像のリサイズ・アップロードから、ショートコードの生成までを一気に任せてしまうことにした。</p>
<h3 id="rm-の仕様">rm の仕様</h3>
<p>この辺りの操作</p>
<pre><code>  # アップロードに成功したら元画像をゴミ箱に入れる
  mv &quot;$1&quot; &quot;/Users/username/.Trash/&quot;
fi

# 可否によらず削除
rm $tmp_img
</code></pre><p>自動生成の $tmp_img は <code>rm</code> で、元画像は <code>mv</code> でゴミ箱へって感じで運用しているが、<code>rm</code> は基本的には不可逆削除って認識であってるのかな?</p>
<p>軽く調べた限り時間が経ってないのであれば復元手段もあるらしいけど&hellip;</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://newfivefour.com/unix-imgur-basic-upload.html">https://newfivefour.com/unix-imgur-basic-upload.html</a></li>
<li><a href="https://apidocs.imgur.com/?version=latest">https://apidocs.imgur.com/?version=latest</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>HugoのソーシャルアイコンにQiitaアイコンを追加した備忘録</title>
            <link>https://tomowarkar.github.io/blog/posts/hugo_social_icon/</link>
            <pubDate>Thu, 09 Apr 2020 15:33:43 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/hugo_social_icon/</guid>
            <description>当然といえば当然だが、hello-friend-ngのREADMEにもあるように、ソーシャルアイコンにQiitaは対応していない。 そこに画像</description>
            <content type="html"><![CDATA[
    <img src="https://i.imgur.com/AYyMNK5.png"  alt="blog top page"  class="center"  />


<p>当然といえば当然だが、hello-friend-ngの<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng#user-content-available-social-icons">README</a>にもあるように、ソーシャルアイコンにQiitaは対応していない。</p>
<p>そこに画像(もしくはこのブログの<a href="https://tomowarkar.github.io/blog/">トップページ</a>)のようにqiitaアイコンを追加したという備忘録。</p>
<p>対応するコミットは<a href="https://github.com/tomowarkar/blog/commit/6b88f224fa1d6e473be03875255b211e4367670c">こちら</a></p>
<h2 id="はじめに">はじめに</h2>
<h3 id="テーマの管理に関して">テーマの管理に関して</h3>
<ul>
<li>hugoでのテーマは<code>themes</code> フォルダの配下でサブモジュールとして管理されている。</li>
<li>直接ソースコードをいじればもちろん変更は可能だが、サブモジュール自体のアップデートがあった時に変更が消えてしまう。</li>
<li>なので直接ソースをいじるのは無し(wordpressのテーマなどでもお馴染みではあるが)</li>
</ul>
<h3 id="ソーシャルアイコンに関して">ソーシャルアイコンに関して</h3>
<p>今現在私が使わせてもらっているテーマは<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng">hugo-theme-hello-friend-ng</a></p>
<ul>
<li>READMEを読んでいくとソーシャルアイコンは<a href="https://simpleicons.org/">simpleicons</a>のアイコンを使っている。</li>
<li>テーマ内でのアイコン管理はどうやら<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng/blob/master/layouts/partials/svg.html">ここ</a>で行っている。</li>
</ul>
<h3 id="テーマ編集に関して">テーマ編集に関して</h3>
<p>どうやら<code>layouts</code>配下に仕様しているテーマの変更したいソースコードパスをコピーしてこればいいらしい。(参考サイト忘れてしまいました。すいません。)</p>
<p>なので</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp blog/themes/hello-friend-ng/layouts/partials/svg.html blog/layouts/partials/
</code></pre></div><p>このようにコピーして,コピーしたものを編集すればHugoさんがよしなにしてくれる。</p>
<h5 id="layoutspartialssvghtml">layouts/partials/svg.html</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+ {{- else if (eq .name &#34;qiita&#34;) -}}
+     &lt;<span style="color:#f92672">svg</span> <span style="color:#a6e22e">xmlns</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.w3.org/2000/svg&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;26&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;24&#34;</span> <span style="color:#a6e22e">viewBox</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0 0 24 24&#34;</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;none&#34;</span> <span style="color:#a6e22e">stroke</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;currentColor&#34;</span> <span style="color:#a6e22e">stroke-width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#a6e22e">stroke-linecap</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;round&#34;</span> <span style="color:#a6e22e">stroke-linejoin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;round&#34;</span>&gt;&lt;<span style="color:#f92672">path</span> <span style="color:#a6e22e">xmlns</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.w3.org/2000/svg&#34;</span> <span style="color:#a6e22e">d</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;M7.883 11.615c0-1.92-1.474-3.904-3.974-3.904C1.987 7.71 0 9.183 0 11.679c0 1.92 1.474 3.905 3.973 3.905.801 0 1.602-.256 2.275-.736L7.402 16l.513-.512-1.09-1.088c.673-.736 1.058-1.696 1.058-2.785zm-3.974-3.2c1.827 0 3.269 1.408 3.269 3.232 0 1.569-1.218 3.233-3.237 3.233-2.018 0-3.236-1.632-3.236-3.2 0-2.049 1.634-3.265 3.204-3.265zm5.864 1.568h.673v5.44h-.673zm.32-.736a.574.574 0 0 1-.576-.576c0-.32.256-.576.576-.576.32 0 .577.256.577.576 0 .32-.256.576-.577.576zm2.724 0a.574.574 0 0 1-.577-.576c0-.32.257-.576.577-.576.32 0 .577.256.577.576 0 .32-.256.576-.577.576zm-.32.736h.673v5.44h-.673zm4.71 5.537c-1.25 0-1.987-.96-1.987-1.92V8.479h.673v1.504h2.371v.672h-2.37v2.977c0 .608.48 1.248 1.313 1.248.224 0 .449-.064.64-.192l.065-.032.32.576-.064.032c-.288.16-.64.256-.961.256zm4.454.032c-1.827 0-2.916-1.44-2.916-2.848 0-1.825 1.442-2.913 2.852-2.913.737 0 1.314.256 1.73.736v-.544H24v5.44h-.673v-.607c-.384.48-.961.736-1.666.736zm-.064-5.089c-1.09 0-2.18.832-2.18 2.24 0 1.089.834 2.177 2.244 2.177.64 0 1.282-.288 1.698-.8v-2.817a2.29 2.29 0 0 0-1.762-.8z&#34;</span>/&gt;&lt;/<span style="color:#f92672">polygon</span>&gt;&lt;/<span style="color:#f92672">svg</span>&gt;
{{- end -}}
</code></pre></div><p>あとの変更は<a href="https://github.com/tomowarkar/blog/commit/6b88f224fa1d6e473be03875255b211e4367670c">こちら</a>の通り。お手軽にテーマの編集ができた。</p>
<p>※ docs/index.html は自動生成されたもの。</p>
]]></content>
        </item>
        
        <item>
            <title>はてなブログ自動投稿Pythonスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/hatena_api/</link>
            <pubDate>Thu, 09 Apr 2020 01:46:56 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/hatena_api/</guid>
            <description>はてなブログの投稿を自動化、ローカル管理がしたい ということでHatena api を叩いてみた備忘録 参考 はてな API一覧 下準備 ローカルでの記事管理は</description>
            <content type="html"><![CDATA[<p>はてなブログの投稿を自動化、ローカル管理がしたい</p>
<p>ということでHatena api を叩いてみた備忘録</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="http://developer.hatena.ne.jp/ja/documents/apis">はてな API一覧</a></li>
</ul>
<h2 id="下準備">下準備</h2>
<p>ローカルでの記事管理は以下のようなものを想定する</p>
<ul>
<li>markdown形式</li>
<li>1行目にブログタイトル</li>
<li>2行目にブログタグ</li>
<li>3行目以降は本文</li>
</ul>
<h3 id="examplemd">example.md</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">タイトル
Python,日常,hoge
<span style="color:#75715e">## 今日の
</span><span style="color:#75715e"></span>hugahuga

<span style="color:#75715e">### 天気は
</span><span style="color:#75715e"></span>hogahoga
</code></pre></div><p>ローカルでの投稿済みか未投稿かの判別や、投稿日時の判別は対応できないが最低限の仕様ではあると思う。</p>
<h2 id="python-スクリプト">Python スクリプト</h2>
<h3 id="mainpy">main.py</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
<span style="color:#f92672">import</span> requests <span style="color:#f92672">as</span> req

HATENA_ID <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your hatena id&#34;</span>
BLOG_DOMAIN <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your blog domain&#34;</span>
API_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your api key&#34;</span>
BASE_URL <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;https://blog.hatena.ne.jp/{HATENA_ID}/{BLOG_DOMAIN}/atom&#34;</span>


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hatena_entry</span>(title, content, categorys<span style="color:#f92672">=</span>[], updated<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>, draft<span style="color:#f92672">=</span>False):
    <span style="color:#e6db74">&#34;&#34;&#34;はてなブログへの投稿
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">      HATENA_ID, API_KEY, BASE_URL (str)
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">      title (str):
</span><span style="color:#e6db74">      content (str): 
</span><span style="color:#e6db74">      categorys (List[str]): 
</span><span style="color:#e6db74">      updated (str): %Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">T%H:%M:%S
</span><span style="color:#e6db74">      draft (bool):
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Returns:
</span><span style="color:#e6db74">      str: xml
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    updated <span style="color:#f92672">=</span> updated <span style="color:#66d9ef">if</span> updated <span style="color:#66d9ef">else</span> datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">T%H:%M:%S&#34;</span>)
    draft <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;yes&#34;</span> <span style="color:#66d9ef">if</span> draft <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;no&#34;</span>
    category <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join([f<span style="color:#e6db74">&#34;&lt;category term=&#39;{e}&#39; /&gt;&#34;</span> <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x])
    categorys <span style="color:#f92672">=</span> category(categorys) <span style="color:#66d9ef">if</span> category <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;&#34;</span>

    xml <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;&#34;&#34;&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;&lt;entry xmlns=&#34;http://www.w3.org/2005/Atom&#34; xmlns:app=&#34;http://www.w3.org/2007/app&#34;&gt;
</span><span style="color:#e6db74">      &lt;title&gt;{title}&lt;/title&gt;&lt;author&gt;&lt;name&gt;name&lt;/name&gt;&lt;/author&gt;&lt;content type=&#34;text/markdown&#34;&gt;{content}&lt;/content&gt;
</span><span style="color:#e6db74">      &lt;updated&gt;{updated}&lt;/updated&gt;{categorys}&lt;app:control&gt;&lt;app:draft&gt;{draft}&lt;/app:draft&gt;
</span><span style="color:#e6db74">      &lt;/app:control&gt;&lt;/entry&gt;&#34;&#34;&#34;</span><span style="color:#f92672">.</span>encode(
        <span style="color:#e6db74">&#34;UTF-8&#34;</span>
    )
    r <span style="color:#f92672">=</span> req<span style="color:#f92672">.</span>post(BASE_URL <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/entry&#34;</span>, auth<span style="color:#f92672">=</span>(HATENA_ID, API_KEY), data<span style="color:#f92672">=</span>xml)
    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>text


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    <span style="color:#f92672">import</span> sys

    _, arg <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>argv
    <span style="color:#66d9ef">with</span> open(arg, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
        title, categorys, <span style="color:#f92672">*</span>content <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    categorys <span style="color:#f92672">=</span> categorys<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)
    content <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(content)
    r <span style="color:#f92672">=</span> hatena_entry(title, content, categorys)
    <span style="color:#66d9ef">print</span>(r)

</code></pre></div><p>はてなブログのapiではxmlを扱う。これまでxmlにあまり触れてこなかったが、自動投稿ぐらいだと大して詰まることもなく書けた。</p>
<h2 id="usage">usage</h2>
<pre><code>python3 main.py example.md
</code></pre>]]></content>
        </item>
        
        <item>
            <title>ニコニコ動画のチャンネルにおける動画のurlリストを取得するPythonスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/nicovideo/</link>
            <pubDate>Wed, 08 Apr 2020 23:04:57 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nicovideo/</guid>
            <description>from time import sleep from selenium import webdriver from selenium.webdriver.chrome.options import Options MAIL = &amp;#34;&amp;#34; #ログインに使うメールアドレス PSWD = &amp;#34;&amp;#34; #ログインに使うパスワード class NicoVideo(object): &amp;#34;&amp;#34;&amp;#34;ニコニコ動画の</description>
            <content type="html"><![CDATA[<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep
<span style="color:#f92672">from</span> selenium <span style="color:#f92672">import</span> webdriver
<span style="color:#f92672">from</span> selenium.webdriver.chrome.options <span style="color:#f92672">import</span> Options

MAIL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e">#ログインに使うメールアドレス</span>
PSWD <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e">#ログインに使うパスワード</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">NicoVideo</span>(object):
    <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画の操作を行う
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">      headless (bool): ヘッドレスモード使用の有無
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">      driver: selenium.webdriver.chrome.webdriver.WebDriver
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">def</span> __init__(self, headless<span style="color:#f92672">=</span>False):
        options <span style="color:#f92672">=</span> Options()
        options<span style="color:#f92672">.</span>headless <span style="color:#f92672">=</span> headless
        self<span style="color:#f92672">.</span>driver <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>Chrome(options<span style="color:#f92672">=</span>options)

    <span style="color:#66d9ef">def</span> __del__(self):
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>close()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">login</span>(self, mail, pswd):
        <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画へのログイン
</span><span style="color:#e6db74">        Args:
</span><span style="color:#e6db74">          mail (str)
</span><span style="color:#e6db74">          pswd (str)
</span><span style="color:#e6db74">        Returns:
</span><span style="color:#e6db74">          None
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://account.nicovideo.jp/login&#34;</span>
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>get(url)
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;[driver] get&#34;</span>, url)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;input__mailtel&#34;</span>)<span style="color:#f92672">.</span>send_keys(mail)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;input__password&#34;</span>)<span style="color:#f92672">.</span>send_keys(pswd)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;login__submit&#34;</span>)<span style="color:#f92672">.</span>submit()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">channel_video_list</span>(self, channel_name, page<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
        <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画のあるチャンネルにおける動画のURLリストの取得
</span><span style="color:#e6db74">        Args:
</span><span style="color:#e6db74">          channel_name (str): channel name
</span><span style="color:#e6db74">          page (int): page num　( &gt; 0 )
</span><span style="color:#e6db74">        Returns:
</span><span style="color:#e6db74">          List[str]
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        url <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;https://ch.nicovideo.jp/{channel_name}/video?page={page}&#34;</span>
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>get(url)
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;[driver] get&#34;</span>, url)

        items <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_elements_by_css_selector(<span style="color:#e6db74">&#34;ul.items &gt; li.item&#34;</span>)

        <span style="color:#66d9ef">return</span> [
            item<span style="color:#f92672">.</span>find_element_by_css_selector(<span style="color:#e6db74">&#34;div.item_left &gt; a&#34;</span>)<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>)
            <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> items
        ]


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    output_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nicovideo.txt&#34;</span>

    <span style="color:#75715e"># ファイルの初期化</span>
    <span style="color:#66d9ef">with</span> open(output_file, <span style="color:#e6db74">&#34;w&#34;</span>):
        <span style="color:#66d9ef">pass</span>

    nv <span style="color:#f92672">=</span> NicoVideo(headless<span style="color:#f92672">=</span>True)
    nv<span style="color:#f92672">.</span>login(MAIL, PSWD)

    page <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">while</span> True:
        channel_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mentalist&#34;</span>
        vlist <span style="color:#f92672">=</span> nv<span style="color:#f92672">.</span>channel_video_list(channel_name, page<span style="color:#f92672">=</span>page)
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> vlist:
            <span style="color:#66d9ef">break</span>
        text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(vlist) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
        <span style="color:#66d9ef">with</span> open(output_file, <span style="color:#e6db74">&#34;a&#34;</span>) <span style="color:#66d9ef">as</span> f:
            f<span style="color:#f92672">.</span>write(text)

        page <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Github Pages でブログ始めました。</title>
            <link>https://tomowarkar.github.io/blog/posts/init/</link>
            <pubDate>Wed, 08 Apr 2020 22:41:43 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/init/</guid>
            <description>こんにちは tomowarkar です。 GitHub Pages と Go 製のウェブサイト生成フレームワークである Hugo を使って Github でブログを始めました。 これまでも他の形でブログを運用していたの</description>
            <content type="html"><![CDATA[<p>こんにちは tomowarkar です。</p>
<p>GitHub Pages と Go 製のウェブサイト生成フレームワークである Hugo を使って Github でブログを始めました。</p>
<p>これまでも他の形でブログを運用していたのですが、技術ブログと日常ブログが混じってしまったり、サーバーやらドメインやらの管理が面倒になってきた(技術的なアウトプットをするだけなら、それ以外の運営コストをできるだけ下げたい)ので新しく Github でブログを始めた次第です。</p>
<p>あまり硬くならずとりあえず書いたコードの供養の場として使っていけたらと思っています。</p>
<p>今回 GitHub Pages と Hugo を使ってブログを始めるにあたって、以下の記事を参考にさせていただきました。ありがとうございます 🙏</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://qiita.com/Blank71/items/88a6c76ca9e162af73fe">https://qiita.com/Blank71/items/88a6c76ca9e162af73fe</a></li>
<li><a href="https://qiita.com/yotsak83/items/017734d5f873f4f194d4">https://qiita.com/yotsak83/items/017734d5f873f4f194d4</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
