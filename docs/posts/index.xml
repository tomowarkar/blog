<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on tomowarkarの技術ブログ</title>
        <link>https://tomowarkar.github.io/blog/posts/</link>
        <description>Recent content in Posts on tomowarkarの技術ブログ</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <copyright>tomowarkar</copyright>
        <lastBuildDate>Tue, 21 Apr 2020 19:16:51 +0900</lastBuildDate>
        <atom:link href="https://tomowarkar.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>最近よく書くシェルスクリプトの備忘録</title>
            <link>https://tomowarkar.github.io/blog/posts/mac_bash/</link>
            <pubDate>Tue, 21 Apr 2020 19:16:51 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/mac_bash/</guid>
            <description>実行環境 $ sw_vers ProductName: Mac OS X ProductVersion: 10.15.4 BuildVersion: 19E266 $ sh --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin19) Copyright (C) 2007 Free Software Foundation, Inc. Linux コマンド ファイルの中身を表示する # 一番有名? 間違えてバイナリファイルなどを指定す</description>
            <content type="html"><![CDATA[<h2 id="実行環境">実行環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ sh --version
GNU bash, version 3.2.57<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>-release <span style="color:#f92672">(</span>x86_64-apple-darwin19<span style="color:#f92672">)</span>
Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2007</span> Free Software Foundation, Inc.
</code></pre></div><h2 id="linux-コマンド">Linux コマンド</h2>
<h3 id="ファイルの中身を表示する">ファイルの中身を表示する</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 一番有名? 間違えてバイナリファイルなどを指定すると悲惨</span>
cat /path/to/file
<span style="color:#75715e"># ファイルの一部を表示, スクロールして中身を見ることができる。</span>
less /path/to/file
<span style="color:#75715e"># less の出力結果を残す版</span>
more /path/to/file
</code></pre></div><h3 id="ヒアドキュメント">ヒアドキュメント</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat <span style="color:#e6db74">&lt;&lt;EOL &gt;/path/to/file
</span><span style="color:#e6db74">hoge
</span><span style="color:#e6db74">huga
</span><span style="color:#e6db74">EOL</span>
</code></pre></div><p>参考 <a href="https://qiita.com/take4s5i/items/e207cee4fb04385a9952">bashのヒアドキュメントを活用する</a></p>
<h3 id="dateコマンド">dateコマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ date -R
Tue, <span style="color:#ae81ff">21</span> Apr <span style="color:#ae81ff">2020</span> 18:50:48 +0900

$ date +%y%m%d
<span style="color:#ae81ff">200421</span>
<span style="color:#75715e"># 昨日の日付</span>
$ date -v -1d +%y%m%d
<span style="color:#ae81ff">200420</span>
</code></pre></div><h3 id="sayコマンド">sayコマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ say -v ? | grep <span style="color:#e6db74">&#34;ja_JP&#34;</span>
Kyoko               ja_JP    <span style="color:#75715e"># こんにちは、私の名前はKyokoです。日本語の音声をお届けします。</span>
Otoya               ja_JP    <span style="color:#75715e"># こんにちは、私の名前はOtoyaです。日本語の音声をお届けします。</span>

$ say -v Bad<span style="color:#ae81ff">\ </span>News Kgo mo ichi ni chi gamba lu zowi Kgo mo ichi ni chi gamba lu zowi
</code></pre></div><p>参考 <a href="https://gist.github.com/susisu/c9b106745f94c85e482c">非実用 say コマンド</a></p>
<h3 id="afplay-コマンド">afplay コマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># バックグラウンド再生</span>
$ afplay -q <span style="color:#ae81ff">1</span> /path/to/audio/file &amp;
<span style="color:#75715e"># 中断</span>
$ killall afplay
</code></pre></div><h2 id="シェルスクリプト">シェルスクリプト</h2>
<h3 id="シェルスクリプトの説明文">シェルスクリプトの説明文</h3>
<h5 id="hogesh">hoge.sh</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># @(#) This script is hoge.</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ what hoge.sh 
hoge.sh
         This script is hoge.
</code></pre></div><h3 id="ファイルの初期化">ファイルの初期化</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># touch だと作成済みのファイルは初期化されない</span>
touch /path/to/file

<span style="color:#75715e"># これでもいいけど</span>
echo -n <span style="color:#e6db74">&#34;&#34;</span> &gt; /path/to/file

<span style="color:#75715e"># こっちのがスマート</span>
:&gt; /path/to/file
</code></pre></div><h3 id="演算子">演算子</h3>
<p>コマンドが成功した時と失敗した時とでの場合わけ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ true <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> echo <span style="color:#ae81ff">2</span>
&gt;&gt; <span style="color:#ae81ff">1</span>
$ false <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> echo <span style="color:#ae81ff">2</span>
&gt;&gt; <span style="color:#ae81ff">2</span>
</code></pre></div><h3 id="拡張子を取り除きたい">拡張子を取り除きたい</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ f<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hoge.md&#34;</span>
$ echo <span style="color:#e6db74">${</span>f%.*<span style="color:#e6db74">}</span>
&gt;&gt; hoge
</code></pre></div><p>参考 <a href="https://qiita.com/mriho/items/b30b3a33e8d2e25e94a8">bashの変数展開によるファイル名や拡張子の取得</a></p>
<h3 id="引数をループ">引数をループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> arg; <span style="color:#66d9ef">do</span>
    echo $arg
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="無限ループ">無限ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">while</span> true; <span style="color:#66d9ef">do</span>
    :
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="for-ループ">for ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> i in aa bb cc; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>

<span style="color:#66d9ef">for</span> i in <span style="color:#66d9ef">$(</span>seq 10<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">((</span>i <span style="color:#f92672">=</span> 1; i &lt; 11; i++<span style="color:#f92672">))</span>; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="ls-ループ">ls ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> f in *; <span style="color:#66d9ef">do</span>
    echo $f
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="ファイル内ループ">ファイル内ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">while</span> read line; <span style="color:#66d9ef">do</span>
　　echo $line
<span style="color:#66d9ef">done</span> &lt; /path/to/file
</code></pre></div><h2 id="引数解析">引数解析</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">COMMAND<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>basename $0<span style="color:#e6db74">`</span>
<span style="color:#66d9ef">while</span> getopts ab: OPT
<span style="color:#66d9ef">do</span>
  <span style="color:#66d9ef">case</span> $OPT in
    a <span style="color:#f92672">)</span> OPTION_a<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TRUE&#34;</span> ;;
    b <span style="color:#f92672">)</span> OPTION_b<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TRUE&#34;</span> ; VALUE_b<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$OPTARG<span style="color:#e6db74">&#34;</span> ;;
    * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Usage: &#34;</span> ; exit <span style="color:#ae81ff">1</span> ;;
  <span style="color:#66d9ef">esac</span>
<span style="color:#66d9ef">done</span>

shift <span style="color:#66d9ef">$((</span>$OPTIND <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">))</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$OPTION_b<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TRUE&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    :
<span style="color:#66d9ef">fi</span>
</code></pre></div><h3 id="途中終了時実行コマンド">途中終了時実行コマンド</h3>
<p>Ctl+c でスクリプト実行が途中終了した時のコマンドを指定できる</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">trap <span style="color:#e6db74">&#34;echo \&#34;\n途中終了!!\&#34;&#34;</span> <span style="color:#ae81ff">0</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #01</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-01/</link>
            <pubDate>Mon, 13 Apr 2020 09:56:10 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-01/</guid>
            <description>言語処理 100 本ノック(第 1 章: 準備運動) 環境 Python 3.6.8 00. 文字列の逆順 Permalink 文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を</description>
            <content type="html"><![CDATA[<h2 id="言語処理-100-本ノック第-1-章-準備運動httpsnlp100githubiojach01html"><a href="https://nlp100.github.io/ja/ch01.html">言語処理 100 本ノック(第 1 章: 準備運動)</a></h2>
<h3 id="環境">環境</h3>
<p>Python 3.6.8</p>
<h3 id="00-文字列の逆順-permalink">00. 文字列の逆順 Permalink</h3>
<p>文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;stressed&#34;</span>[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
<span style="color:#e6db74">&#39;desserts&#39;</span>
</code></pre></div><h3 id="01-パタトクカシーーpermalink">01. 「パタトクカシーー」Permalink</h3>
<p>「パタトクカシーー」という文字列の 1,3,5,7 文字目を取り出して連結した文字列を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;パタトクカシーー&#34;</span>[<span style="color:#ae81ff">1</span>::<span style="color:#ae81ff">2</span>]
<span style="color:#e6db74">&#39;タクシー&#39;</span>
</code></pre></div><h3 id="02-パトカータクシーパタトクカシーー">02. 「パトカー」＋「タクシー」＝「パタトクカシーー」</h3>
<p>「パトカー」＋「タクシー」の文字を先頭から交互に連結して文字列「パタトクカシーー」を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([i <span style="color:#f92672">+</span> j <span style="color:#66d9ef">for</span> i, j <span style="color:#f92672">in</span> zip(<span style="color:#e6db74">&#34;パトカー&#34;</span>, <span style="color:#e6db74">&#34;タクシー&#34;</span>)])
<span style="color:#e6db74">&#39;パタトクカシーー&#39;</span>
</code></pre></div><h3 id="03-円周率">03. 円周率</h3>
<p>“Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.”という文を単語に分解し，各単語の（アルファベットの）文字数を先頭から出現順に並べたリストを作成せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> list(map(<span style="color:#66d9ef">lambda</span> x: len(x), re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s)))
[<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>]
</code></pre></div><h3 id="04-元素記号-permalink">04. 元素記号 Permalink</h3>
<p>“Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.”という文を単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19 番目の単語は先頭の 1 文字，それ以外の単語は先頭に 2 文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列（辞書型もしくはマップ型）を作成せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> p <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">19</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> {word[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> p <span style="color:#66d9ef">else</span> word[:<span style="color:#ae81ff">2</span>] :i <span style="color:#66d9ef">for</span> i, word <span style="color:#f92672">in</span> enumerate(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), start<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)}
{<span style="color:#e6db74">&#39;H&#39;</span>: <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;He&#39;</span>: <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;Li&#39;</span>: <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;Be&#39;</span>: <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#39;B&#39;</span>: <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#39;C&#39;</span>: <span style="color:#ae81ff">6</span>, <span style="color:#e6db74">&#39;N&#39;</span>: <span style="color:#ae81ff">7</span>, <span style="color:#e6db74">&#39;O&#39;</span>: <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#39;F&#39;</span>: <span style="color:#ae81ff">9</span>, <span style="color:#e6db74">&#39;Ne&#39;</span>: <span style="color:#ae81ff">10</span>, <span style="color:#e6db74">&#39;Na&#39;</span>: <span style="color:#ae81ff">11</span>, <span style="color:#e6db74">&#39;Mi&#39;</span>: <span style="color:#ae81ff">12</span>, <span style="color:#e6db74">&#39;Al&#39;</span>: <span style="color:#ae81ff">13</span>, <span style="color:#e6db74">&#39;Si&#39;</span>: <span style="color:#ae81ff">14</span>, <span style="color:#e6db74">&#39;P&#39;</span>: <span style="color:#ae81ff">15</span>, <span style="color:#e6db74">&#39;S&#39;</span>: <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#39;Cl&#39;</span>: <span style="color:#ae81ff">17</span>, <span style="color:#e6db74">&#39;Ar&#39;</span>: <span style="color:#ae81ff">18</span>, <span style="color:#e6db74">&#39;K&#39;</span>: <span style="color:#ae81ff">19</span>, <span style="color:#e6db74">&#39;Ca&#39;</span>: <span style="color:#ae81ff">20</span>}
</code></pre></div><h3 id="05-n-grampermalink">05. n-gramPermalink</h3>
<p>与えられたシーケンス（文字列やリストなど）から n-gram を作る関数を作成せよ．この関数を用い，”I am an NLPer”という文から単語 bi-gram，文字 bi-gram を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I am an NLPer&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y: [ <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(x[i:i<span style="color:#f92672">+</span>y]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(x) <span style="color:#f92672">-</span> y <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) ]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">1</span>)
[<span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;n&#39;</span>, <span style="color:#e6db74">&#39;N&#39;</span>, <span style="color:#e6db74">&#39;L&#39;</span>, <span style="color:#e6db74">&#39;P&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">2</span>)
[<span style="color:#e6db74">&#39;Ia&#39;</span>, <span style="color:#e6db74">&#39;am&#39;</span>, <span style="color:#e6db74">&#39;ma&#39;</span>, <span style="color:#e6db74">&#39;an&#39;</span>, <span style="color:#e6db74">&#39;nN&#39;</span>, <span style="color:#e6db74">&#39;NL&#39;</span>, <span style="color:#e6db74">&#39;LP&#39;</span>, <span style="color:#e6db74">&#39;Pe&#39;</span>, <span style="color:#e6db74">&#39;er&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">3</span>)
[<span style="color:#e6db74">&#39;Iam&#39;</span>, <span style="color:#e6db74">&#39;ama&#39;</span>, <span style="color:#e6db74">&#39;man&#39;</span>, <span style="color:#e6db74">&#39;anN&#39;</span>, <span style="color:#e6db74">&#39;nNL&#39;</span>, <span style="color:#e6db74">&#39;NLP&#39;</span>, <span style="color:#e6db74">&#39;LPe&#39;</span>, <span style="color:#e6db74">&#39;Per&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">1</span>)
[<span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#e6db74">&#39;am&#39;</span>, <span style="color:#e6db74">&#39;an&#39;</span>, <span style="color:#e6db74">&#39;NLPer&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">2</span>)
[<span style="color:#e6db74">&#39;Iam&#39;</span>, <span style="color:#e6db74">&#39;aman&#39;</span>, <span style="color:#e6db74">&#39;anNLPer&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">3</span>)
[<span style="color:#e6db74">&#39;Iaman&#39;</span>, <span style="color:#e6db74">&#39;amanNLPer&#39;</span>]
</code></pre></div><h3 id="06-集合-permalink">06. 集合 Permalink</h3>
<p>“paraparaparadise”と”paragraph”に含まれる文字 bi-gram の集合を，それぞれ, X と Y として求め，X と Y の和集合，積集合，差集合を求めよ．さらに，’se’という bi-gram が X および Y に含まれるかどうかを調べよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> bi_gram <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: [ x[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(x) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)]
<span style="color:#f92672">&gt;&gt;&gt;</span> X <span style="color:#f92672">=</span> bi_gram(<span style="color:#e6db74">&#34;paraparaparadise&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> Y <span style="color:#f92672">=</span> bi_gram(<span style="color:#e6db74">&#34;paragraph&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> X
[<span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;se&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> Y
[<span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ag&#39;</span>, <span style="color:#e6db74">&#39;gr&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;ph&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">|</span> set(Y)
{<span style="color:#e6db74">&#39;se&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ag&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;ph&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;gr&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">&amp;</span> set(Y)
{<span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">-</span> set(Y)
{<span style="color:#e6db74">&#39;se&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;se&#34;</span> <span style="color:#f92672">in</span> X
True
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;se&#34;</span> <span style="color:#f92672">in</span> Y
False
</code></pre></div><h3 id="07-テンプレートによる文生成">07. テンプレートによる文生成</h3>
<p>引数 x, y, z を受け取り「x 時の y は z」という文字列を返す関数を実装せよ．さらに，x=12, y=”気温”, z=22.4 として，実行結果を確認せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y, z: <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{x} 時の {y} は {z}&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> f(x<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;気温&#34;</span>, z<span style="color:#f92672">=</span><span style="color:#ae81ff">22.4</span>)
<span style="color:#ae81ff">12</span> <span style="color:#960050;background-color:#1e0010">時の</span> <span style="color:#960050;background-color:#1e0010">気温</span> <span style="color:#960050;background-color:#1e0010">は</span> <span style="color:#ae81ff">22.4</span>
</code></pre></div><h3 id="08-暗号文">08. 暗号文</h3>
<p>与えられた文字列の各文字を，以下の仕様で変換する関数 cipher を実装せよ．</p>
<ul>
<li>英小文字ならば(219 - 文字コード)の文字に置換</li>
<li>その他の文字はそのまま出力</li>
</ul>
<p>この関数を用い，英語のメッセージを暗号化・復号化せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(<span style="color:#ae81ff">219</span><span style="color:#f92672">-</span>ord(e)) <span style="color:#66d9ef">if</span> re<span style="color:#f92672">.</span>match(<span style="color:#e6db74">&#34;[a-z]&#34;</span>, e) <span style="color:#66d9ef">else</span> e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x])
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(<span style="color:#e6db74">&#34;abcde01Aaz&#34;</span>)
<span style="color:#e6db74">&#39;zyxwv01Aza&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(i) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">97</span><span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>)])
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(s)
<span style="color:#e6db74">&#39;zyxwvutsrqponmlkjihgfedcba&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(cipher(s))
<span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(i) <span style="color:#66d9ef">if</span> i<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> chr(i)<span style="color:#f92672">.</span>upper() <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">97</span><span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>)])
<span style="color:#f92672">&gt;&gt;&gt;</span> s
<span style="color:#e6db74">&#39;abCdeFghIjkLmnOpqRstUvwXyz&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(s)
<span style="color:#e6db74">&#39;zyCwvFtsIqpLnmOkjRhgUedXba&#39;</span>
</code></pre></div><h5 id="memo">memo</h5>
<p>英小文字の文字コード範囲は 79-122</p>
<p>219 - 文字コードの範囲は 122-79</p>
<p>つまり丁度 反転の形をとり cipher によって a-z が z-a に対応するよう暗号化されることがわかる。</p>
<p>また同じく cipher を 1 度かけると暗号化, 2 度かけると複合化されることがわかる.</p>
<h5 id="参考">参考</h5>
<p><a href="https://docs.python.org/ja/3/library/functions.html#ord">Python 組み込み関数</a></p>
<p><a href="https://note.nkmk.me/python-chr-ord-unicode-code-point/">Python で Unicode コードポイントと文字を相互変換（chr, ord, \x, \u, \U）</a></p>
<h3 id="09-typoglycemia">09. Typoglycemia</h3>
<p>スペースで区切られた単語列に対して，各単語の先頭と末尾の文字は残し，それ以外の文字の順序をランダムに並び替えるプログラムを作成せよ．ただし，長さが４以下の単語は並び替えないこととする．適当な英語の文（例えば”I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .”）を与え，その実行結果を確認せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> sample
<span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([e <span style="color:#66d9ef">if</span> len(e) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">else</span> e[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([e[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> sample(range(<span style="color:#ae81ff">1</span>, len(e)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>), len(e)<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>)]) <span style="color:#f92672">+</span> e[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>split()])
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I codln’ut bivleee that I cloud aaltculy usaertdnnd what I was randeig : the pnnmeoahel peowr of the hmuan mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I cl’duont belevie that I colud actaully udtsnaenrd what I was rieadng : the pmnehoeanl pewor of the huamn mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I coludn’t beevlie that I culod acltualy udestnnrad what I was rdeaing : the pnmoneehal power of the hmaun mind .&#39;</span>
</code></pre></div><p>こちらでもいけた</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([e <span style="color:#66d9ef">if</span> len(e) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">else</span> e[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(sample(e[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], len(e[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))) <span style="color:#f92672">+</span> e[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>split()])
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I cnudlo’t belivee that I colud aaulclty utnansredd what I was rediang : the pahemnneol peowr of the hamun mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I culn’odt belivee that I culod acalulty uraetndnsd what I was reaindg : the pennoeamhl peowr of the haumn mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I codlnu’t beevile that I cloud atluclay unrntsaedd what I was rneidag : the paeehnomnl peowr of the hmaun mind .&#39;</span>
</code></pre></div><h5 id="参考-1">参考</h5>
<p><a href="https://note.nkmk.me/python-random-shuffle/#_1">文字列やタプルのシャッフル</a></p>
<h2 id="おわりに">おわりに</h2>
<p><a href="https://github.com/yoyoyo-yo/Gasyori100knock">画像処理 100 本ノック!!</a>もあるようなので言語処理 100 本ノック が終わり次第やりたい。</p>
<p>(まずは言語処理 100 本ノック )</p>
]]></content>
        </item>
        
        <item>
            <title>[macOS] コマンドラインで音楽を流したい</title>
            <link>https://tomowarkar.github.io/blog/posts/afplay/</link>
            <pubDate>Sun, 12 Apr 2020 23:33:30 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/afplay/</guid>
            <description>環境 $ bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin19) Copyright (C) 2007 Free Software Foundation, Inc. $ afplay -h Audio File Play Version: 2.0 Copyright 2003-2013, Apple Inc. All Rights Reserved. Specify -h (-help) for command options Usage: afplay [option...] audio_file Options: (may appear before or after arguments) {-v | --volume} VOLUME set the volume for playback of the file {-h | --help} print help { --leaks} run leaks</description>
            <content type="html"><![CDATA[<h2 id="環境">環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ bash --version
GNU bash, version 3.2.57<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>-release <span style="color:#f92672">(</span>x86_64-apple-darwin19<span style="color:#f92672">)</span>
Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2007</span> Free Software Foundation, Inc.
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay -h

    Audio File Play
    Version: 2.0
    Copyright 2003-2013, Apple Inc. All Rights Reserved.
    Specify -h <span style="color:#f92672">(</span>-help<span style="color:#f92672">)</span> <span style="color:#66d9ef">for</span> command options

Usage:
afplay <span style="color:#f92672">[</span>option...<span style="color:#f92672">]</span> audio_file

Options: <span style="color:#f92672">(</span>may appear before or after arguments<span style="color:#f92672">)</span>
  <span style="color:#f92672">{</span>-v | --volume<span style="color:#f92672">}</span> VOLUME
    set the volume <span style="color:#66d9ef">for</span> playback of the file
  <span style="color:#f92672">{</span>-h | --help<span style="color:#f92672">}</span>
    print help
  <span style="color:#f92672">{</span> --leaks<span style="color:#f92672">}</span>
    run leaks analysis
  <span style="color:#f92672">{</span>-t | --time<span style="color:#f92672">}</span> TIME
    play <span style="color:#66d9ef">for</span> TIME seconds
  <span style="color:#f92672">{</span>-r | --rate<span style="color:#f92672">}</span> RATE
    play at playback rate
  <span style="color:#f92672">{</span>-q | --rQuality<span style="color:#f92672">}</span> QUALITY
    set the quality used <span style="color:#66d9ef">for</span> rate-scaled playback <span style="color:#f92672">(</span>default is <span style="color:#ae81ff">0</span> - low quality, <span style="color:#ae81ff">1</span> - high quality<span style="color:#f92672">)</span>
  <span style="color:#f92672">{</span>-d | --debug<span style="color:#f92672">}</span>
    debug print output
</code></pre></div><h3 id="再生">再生</h3>
<p>quality はデフォルト値が low である 0 なので 1 に変更</p>
<p>音量は適宜</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay -q <span style="color:#ae81ff">1</span> -v .1 path/to/audio_file
</code></pre></div><h3 id="バックグラウンド実行-プロセスの確認-プロセス-kill">バックグラウンド実行, プロセスの確認, プロセス kill</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay path/to/audio_file &amp;
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span> PID
$ jobs
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>+  Running afplay path/to/audio_file &amp;
$ <span style="color:#75715e"># kill %ジョブ番号</span>
$ kill %1
$ <span style="color:#75715e"># もしくは</span>
$ kill PID
</code></pre></div><p>見つからない場合や、他のターミナルから kill</p>
<pre><code>ps aux | grep afplay | grep -v grep | awk '{ print &quot;kill -9&quot;, $2 }' | sh
</code></pre><h2 id="参考">参考</h2>
<ul>
<li><a href="https://zariganitosh.hatenablog.jp/entry/20100908/itunes">徹底的にソフトウェアで豊かな音を奏でてみよう</a></li>
<li><a href="https://qiita.com/inosy22/items/341cfc589494b8211844">Linux コマンド(Bash)でバックグラウンド実行する方法のまとめメモ</a></li>
<li><a href="https://qiita.com/nyango/items/7b6b719f248b2ee8d379">シェルスクリプトで単純に並列実行・直列実行を行う</a></li>
<li><a href="https://qiita.com/masarufuruya/items/409679c1006980ef1b60">プロセス名で grep した結果を kill するシェルスクリプトを作る</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>VSCodeのインストール済み拡張機能とその用途</title>
            <link>https://tomowarkar.github.io/blog/posts/vscode_list_extensions/</link>
            <pubDate>Fri, 10 Apr 2020 15:16:15 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/vscode_list_extensions/</guid>
            <description>個人的メモ 定期的に確認すると良さげですね VSCode プラグイン一覧の表示 code --list-extensions | xargs -L 1 echo code --install-extension 2020/04/10 現在 code --install-extension bbenoist.shell code --install-extension christian-kohler.npm-intellisense code --install-extension christian-kohler.path-intellisense code --install-extension dariofuzinato.vue-peek code --install-extension dbaeumer.vscode-eslint code --install-extension donjayamanne.jupyter code --install-extension eg2.vscode-npm-script code --install-extension esbenp.prettier-vscode code --install-extension formulahendry.auto-close-tag</description>
            <content type="html"><![CDATA[<p>個人的メモ</p>
<p>定期的に確認すると良さげですね</p>
<h2 id="vscode-プラグイン一覧の表示">VSCode プラグイン一覧の表示</h2>
<pre><code>code --list-extensions | xargs -L 1 echo code --install-extension
</code></pre><h3 id="20200410-現在">2020/04/10 現在</h3>
<pre><code>code --install-extension bbenoist.shell
code --install-extension christian-kohler.npm-intellisense
code --install-extension christian-kohler.path-intellisense
code --install-extension dariofuzinato.vue-peek
code --install-extension dbaeumer.vscode-eslint
code --install-extension donjayamanne.jupyter
code --install-extension eg2.vscode-npm-script
code --install-extension esbenp.prettier-vscode
code --install-extension formulahendry.auto-close-tag
code --install-extension formulahendry.auto-complete-tag
code --install-extension formulahendry.auto-rename-tag
code --install-extension formulahendry.code-runner
code --install-extension jcbuisson.vue
code --install-extension KnisterPeter.vscode-github
code --install-extension ms-azuretools.vscode-docker
code --install-extension MS-CEINTL.vscode-language-pack-ja
code --install-extension ms-mssql.mssql
code --install-extension ms-python.python
code --install-extension ms-vscode.cpptools
code --install-extension ms-vscode.Go
code --install-extension ms-vscode.vscode-typescript-tslint-plugin
code --install-extension mubaidr.vuejs-extension-pack
code --install-extension octref.vetur
code --install-extension robertoachar.vscode-essentials-snippets
code --install-extension tht13.python
code --install-extension tombonnike.vscode-status-bar-format-toggle
code --install-extension tomoki1207.pdf
code --install-extension VisualStudioExptTeam.vscodeintellicode
code --install-extension xabikos.JavaScriptSnippets
code --install-extension xaver.clang-format
code --install-extension yzhang.markdown-all-in-one
</code></pre><h2 id="用途">用途</h2>
<h5 id="bbenoistshellhttpsmarketplacevisualstudiocomitemsitemnamebbenoistshell"><a href="https://marketplace.visualstudio.com/items?itemName=bbenoist.shell">bbenoist.shell</a></h5>
<ul>
<li>エディタから直接shellコマンドを実行できる</li>
<li>ほぼ使っていない</li>
</ul>
<h5 id="christian-kohlerpath-intellisensehttpsmarketplacevisualstudiocomitemsitemnamechristian-kohlerpath-intellisense"><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">christian-kohler.path-intellisense</a></h5>
<ul>
<li>ファイル名を自動補完</li>
<li>賢くて良き</li>
</ul>
<h5 id="dbaeumervscode-eslinthttpsmarketplacevisualstudiocomitemsitemnamedbaeumervscode-eslint"><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">dbaeumer.vscode-eslint</a></h5>
<ul>
<li>コードフォーマッター</li>
<li>よくわからん</li>
</ul>
<h5 id="esbenpprettier-vscodehttpsmarketplacevisualstudiocomitemsitemnameesbenpprettier-vscode"><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">esbenp.prettier-vscode</a></h5>
<ul>
<li>コードフォーマッター</li>
<li><a href="https://qiita.com/soarflat/items/06377f3b96964964a65d">Prettier 入門 ～ESLintとの違いを理解して併用する～</a></li>
</ul>
<h5 id="eg2vscode-npm-scripthttpsmarketplacevisualstudiocomitemsitemnameeg2vscode-npm-script"><a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script">eg2.vscode-npm-script</a></h5>
<ul>
<li>npm のhogehoge</li>
<li>よくわからん</li>
</ul>
<h5 id="christian-kohlernpm-intellisensehttpsmarketplacevisualstudiocomitemsitemnamechristian-kohlernpm-intellisense"><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">christian-kohler.npm-intellisense</a></h5>
<ul>
<li>npmモジュールを自動補完</li>
</ul>
<h5 id="dariofuzinatovue-peekhttpsmarketplacevisualstudiocomitemsitemnamedariofuzinatovue-peek"><a href="https://marketplace.visualstudio.com/items?itemName=dariofuzinato.vue-peek">dariofuzinato.vue-peek</a></h5>
<ul>
<li>vue のhogehoge</li>
<li>vueをあまり書いてないからよくわからん</li>
</ul>
<h5 id="jcbuissonvuehttpsmarketplacevisualstudiocomitemsitemnamejcbuissonvue"><a href="https://marketplace.visualstudio.com/items?itemName=jcbuisson.vue">jcbuisson.vue</a></h5>
<ul>
<li>vue のSyntax Highlight</li>
<li>まあいるよね</li>
</ul>
<h5 id="mubaidrvuejs-extension-packhttpsmarketplacevisualstudiocomitemsitemnamemubaidrvuejs-extension-pack"><a href="https://marketplace.visualstudio.com/items?itemName=mubaidr.vuejs-extension-pack">mubaidr.vuejs-extension-pack</a></h5>
<ul>
<li>vue 関連</li>
</ul>
<h5 id="octrefveturhttpsmarketplacevisualstudiocomitemsitemnameoctrefvetur"><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">octref.vetur</a></h5>
<ul>
<li>同上</li>
</ul>
<h5 id="formulahendryauto-complete-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-complete-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-complete-tag">formulahendry.auto-complete-tag</a></h5>
<ul>
<li>以下二つのまとめ役</li>
</ul>
<h5 id="formulahendryauto-close-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-close-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">formulahendry.auto-close-tag</a></h5>
<ul>
<li>html などの close tag 自動補完</li>
<li>必須</li>
</ul>
<h5 id="formulahendryauto-rename-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-rename-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">formulahendry.auto-rename-tag</a></h5>
<ul>
<li>便利</li>
<li>時々うざい</li>
</ul>
<h5 id="formulahendrycode-runnerhttpsmarketplacevisualstudiocomitemsitemnameformulahendrycode-runner"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">formulahendry.code-runner</a></h5>
<ul>
<li>VScode上でのショートカット操作で外部のshell scriptを実行できる</li>
<li>入れたてホヤホヤ未使用様</li>
</ul>
<h5 id="knisterpetervscode-githubhttpsmarketplacevisualstudiocomitemsitemnameknisterpetervscode-github"><a href="https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-github">KnisterPeter.vscode-github</a></h5>
<ul>
<li>github関連</li>
<li>どこからどこまで何をしているのかわからない</li>
</ul>
<h5 id="ms-azuretoolsvscode-dockerhttpsmarketplacevisualstudiocomitemsitemnamems-azuretoolsvscode-docker"><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker">ms-azuretools.vscode-docker</a></h5>
<ul>
<li>docker for vscode</li>
<li>あまりdocker触ってないなぁ</li>
</ul>
<h5 id="ms-ceintlvscode-language-pack-jahttpsmarketplacevisualstudiocomitemsitemnamems-ceintlvscode-language-pack-ja"><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ja">MS-CEINTL.vscode-language-pack-ja</a></h5>
<ul>
<li>VSCodeの日本語対応</li>
<li>必須</li>
</ul>
<h5 id="ms-mssqlmssqlhttpsmarketplacevisualstudiocomitemsitemnamems-mssqlmssql"><a href="https://marketplace.visualstudio.com/items?itemName=ms-mssql.mssql">ms-mssql.mssql</a></h5>
<ul>
<li>sql関連</li>
</ul>
<h5 id="ms-pythonpythonhttpsmarketplacevisualstudiocomitemsitemnamems-pythonpython"><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">ms-python.python</a></h5>
<ul>
<li>python関連</li>
<li>必須</li>
</ul>
<h5 id="tht13pythonhttpsmarketplacevisualstudiocomitemsitemnametht13python"><a href="https://marketplace.visualstudio.com/items?itemName=tht13.python">tht13.python</a></h5>
<ul>
<li>python関連</li>
<li>よくわからん</li>
</ul>
<h5 id="donjayamannejupyterhttpsmarketplacevisualstudiocomitemsitemnamedonjayamannejupyter"><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.jupyter">donjayamanne.jupyter</a></h5>
<ul>
<li>jupyter notebook　のhogehoge</li>
<li>あると便利</li>
<li>なくても困らん</li>
</ul>
<h5 id="xaverclang-formathttpsmarketplacevisualstudiocomitemsitemnamexaverclang-format"><a href="https://marketplace.visualstudio.com/items?itemName=xaver.clang-format">xaver.clang-format</a></h5>
<ul>
<li>c関連</li>
</ul>
<h5 id="ms-vscodecpptoolshttpsmarketplacevisualstudiocomitemsitemnamems-vscodecpptools"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">ms-vscode.cpptools</a></h5>
<ul>
<li>c/c++関連</li>
</ul>
<h5 id="ms-vscodegohttpsmarketplacevisualstudiocomitemsitemnamems-vscodego"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go">ms-vscode.Go</a></h5>
<ul>
<li>go 関連</li>
<li>必須</li>
</ul>
<h5 id="ms-vscodevscode-typescript-tslint-pluginhttpsmarketplacevisualstudiocomitemsitemnamems-vscodevscode-typescript-tslint-plugin"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin">ms-vscode.vscode-typescript-tslint-plugin</a></h5>
<ul>
<li>使ってないなぁ</li>
</ul>
<h5 id="robertoacharvscode-essentials-snippetshttpsmarketplacevisualstudiocomitemsitemnamerobertoacharvscode-essentials-snippets"><a href="https://marketplace.visualstudio.com/items?itemName=robertoachar.vscode-essentials-snippets">robertoachar.vscode-essentials-snippets</a></h5>
<ul>
<li>見た感じ便利そう</li>
<li>なお使ったことはない</li>
</ul>
<h5 id="tombonnikevscode-status-bar-format-togglehttpsmarketplacevisualstudiocomitemsitemnametombonnikevscode-status-bar-format-toggle"><a href="https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle">tombonnike.vscode-status-bar-format-toggle</a></h5>
<ul>
<li>なんだ&hellip; これは&hellip;</li>
</ul>
<h5 id="tomoki1207pdfhttpsmarketplacevisualstudiocomitemsitemnametomoki1207pdf"><a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf">tomoki1207.pdf</a></h5>
<ul>
<li>VSCodeでPDFが見れる</li>
<li>benri</li>
</ul>
<h5 id="visualstudioexptteamvscodeintellicodehttpsmarketplacevisualstudiocomitemsitemnamevisualstudioexptteamvscodeintellicode"><a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode">VisualStudioExptTeam.vscodeintellicode</a></h5>
<ul>
<li>ものゴッツ便利</li>
</ul>
<h5 id="xabikosjavascriptsnippetshttpsmarketplacevisualstudiocomitemsitemnamexabikosjavascriptsnippets"><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">xabikos.JavaScriptSnippets</a></h5>
<ul>
<li>JS</li>
<li>こんなん知らんかった</li>
<li>今度使いたい</li>
</ul>
<h5 id="yzhangmarkdown-all-in-onehttpsmarketplacevisualstudiocomitemsitemnameyzhangmarkdown-all-in-one"><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">yzhang.markdown-all-in-one</a></h5>
<ul>
<li>markdown関連</li>
<li>必須</li>
</ul>
<h3 id="参考">参考</h3>
<p><a href="https://qiita.com/koshilife/items/3ed4b1c28de233f39ebb">Qiita::VSCode インストール済 プラグイン一覧の確認方法 (コマンド)</a></p>
]]></content>
        </item>
        
        <item>
            <title>imgurに画像をアップロードするBashスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/imgur_api/</link>
            <pubDate>Fri, 10 Apr 2020 11:32:50 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/imgur_api/</guid>
            <description>選ばれたのはimgurでした. このブログでの画像の管理をどうしようかと30秒程考えた結果、imgurで管理することにしました。 それに応じてi</description>
            <content type="html"><![CDATA[<p>選ばれたのは<a href="https://imgur.com/">imgur</a>でした.</p>
<p>このブログでの画像の管理をどうしようかと30秒程考えた結果、imgurで管理することにしました。</p>
<p>それに応じてimgurにブログ用の画像を簡単にアップロードするbashスクリプトを書いたので備忘録。</p>
<h3 id="なぜこのブログの画像管理にimgurを選んだか">なぜこのブログの画像管理にimgurを選んだか</h3>
<p>imgurを選んだ理由はこんな感じ</p>
<ul>
<li>apiが使える</li>
<li>無料であある</li>
<li>投稿オプションが豊富(匿名、アルバム, タグなど)</li>
</ul>
<p>デメリットとしては、</p>
<ul>
<li>画像サイズ制限</li>
<li>使われない画像の自動削除</li>
</ul>
<p>などがあるが、画像サイズ制限はそこまで画質を重視しないのと,アップロード時の通信料を考えて元々圧縮した画像をアップロードするつもりなのでOK</p>
<p>使われない画像の自動削除については正直どうなるか未知数なので、今後の運用を見て適宜考えていくこととする。とはいえそこまで画像を多用するつもりはないので最悪消えても大丈夫だろう。</p>
<h2 id="スクリプト本文">スクリプト本文</h2>
<h3 id="依存">依存</h3>
<p><a href="https://apidocs.imgur.com/?version=latest">imgur api doc</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ffmpeg -version
ffmpeg version 4.2.2

$ jq --version
jq-1.6

$ curl --version
curl 7.64.1
</code></pre></div><h3 id="imgursh">imgur.sh</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># !/bin/bash</span>
<span style="color:#75715e"># imgurの特定のアルバムに写真をアップロードする。</span>
COMMAND<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>basename $0<span style="color:#e6db74">`</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! $# -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
echo <span style="color:#e6db74">&#34;Usage: </span>$COMMAND<span style="color:#e6db74"> img_path&#34;</span>
exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># 画像を横600pxになるようにリサイズ</span>
tmp_img<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;resized_img.png&#34;</span>
ffmpeg -i <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> -vf scale<span style="color:#f92672">=</span>600:-1 $tmp_img

ACCESS_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your imgur api auth acess token&#34;</span>
ALBUM_HASH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your imgur album hash&#34;</span>

JSON_RESPONSE<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl --request POST --url https://api.imgur.com/3/image --header <span style="color:#e6db74">&#34;authorization: Bearer </span><span style="color:#e6db74">${</span>ACCESS_TOKEN<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> -F <span style="color:#e6db74">&#34;image=@</span>$tmp_img<span style="color:#e6db74">&#34;</span> -F <span style="color:#e6db74">&#34;album=</span>$ALBUM_HASH<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span>

success<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>echo $JSON_RESPONSE | jq <span style="color:#e6db74">&#34;.success&#34;</span><span style="color:#e6db74">`</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $success <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;true&#34;</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
  echo
  url<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>echo $JSON_RESPONSE | jq <span style="color:#e6db74">&#34;.data.link&#34;</span><span style="color:#e6db74">`</span>
  echo $url
  <span style="color:#75715e"># ショートコード扱いになるため{{_ としているが、_は不要。</span>
  echo <span style="color:#e6db74">&#34;{{_&lt;image src=</span>$url<span style="color:#e6db74"> alt=\&#34;blog top page\&#34; position=\&#34;center\&#34;&gt;}}&#34;</span>

  <span style="color:#75715e"># アップロードに成功したら元画像をゴミ箱に入れる</span>
  mv <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;/Users/username/.Trash/&#34;</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># 可否によらず削除</span>
rm $tmp_img
exit <span style="color:#ae81ff">0</span>

</code></pre></div><p>少し改変してあるが、大まかにこんな感じで実装。</p>
<p>相変わらず <code>jq</code> は便利である。</p>
<h2 id="個人的ポイント">個人的ポイント</h2>
<h3 id="アップロード前のリサイズ">アップロード前のリサイズ</h3>
<pre><code>ffmpeg -i &quot;$1&quot; -vf scale=600:-1 $tmp_img
</code></pre><p>私のMac(MacBook Pro, 13-inch, 2016)でフルサイズのスクリーンショットをすると 2880×1800 の画像が保存される518万画素の3K画質である。</p>
<p>流石にそんなに高画質な画像は必要ないのと、手軽さを考え横のスケールを600pxに圧縮してアップロードすることにした。</p>
<p>フルサイズのスクリーンショットだと 2880×1800 が 600×375になるので約1/23のサイズになる</p>
<h3 id="アウトプットをhugoのショートコードで出力">アウトプットをHugoのショートコードで出力</h3>
<p>HugoにはMarkdownで使える便利なショートコードがある</p>
<p><a href="https://gohugo.io/content-management/shortcodes/">Hugo :: Shortcodes</a></p>
<p>アウトプットの形をショートコードにすることで画像のリサイズ・アップロードから、ショートコードの生成までを一気に任せてしまうことにした。</p>
<h3 id="rm-の仕様">rm の仕様</h3>
<p>この辺りの操作</p>
<pre><code>  # アップロードに成功したら元画像をゴミ箱に入れる
  mv &quot;$1&quot; &quot;/Users/username/.Trash/&quot;
fi

# 可否によらず削除
rm $tmp_img
</code></pre><p>自動生成の $tmp_img は <code>rm</code> で、元画像は <code>mv</code> でゴミ箱へって感じで運用しているが、<code>rm</code> は基本的には不可逆削除って認識であってるのかな?</p>
<p>軽く調べた限り時間が経ってないのであれば復元手段もあるらしいけど&hellip;</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://newfivefour.com/unix-imgur-basic-upload.html">https://newfivefour.com/unix-imgur-basic-upload.html</a></li>
<li><a href="https://apidocs.imgur.com/?version=latest">https://apidocs.imgur.com/?version=latest</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>HugoのソーシャルアイコンにQiitaアイコンを追加した備忘録</title>
            <link>https://tomowarkar.github.io/blog/posts/hugo_social_icon/</link>
            <pubDate>Thu, 09 Apr 2020 15:33:43 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/hugo_social_icon/</guid>
            <description>当然といえば当然だが、hello-friend-ngのREADMEにもあるように、ソーシャルアイコンにQiitaは対応していない。 そこに画像</description>
            <content type="html"><![CDATA[
    <img src="https://i.imgur.com/AYyMNK5.png"  alt="blog top page"  class="center"  />


<p>当然といえば当然だが、hello-friend-ngの<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng#user-content-available-social-icons">README</a>にもあるように、ソーシャルアイコンにQiitaは対応していない。</p>
<p>そこに画像(もしくはこのブログの<a href="https://tomowarkar.github.io/blog/">トップページ</a>)のようにqiitaアイコンを追加したという備忘録。</p>
<p>対応するコミットは<a href="https://github.com/tomowarkar/blog/commit/6b88f224fa1d6e473be03875255b211e4367670c">こちら</a></p>
<h2 id="はじめに">はじめに</h2>
<h3 id="テーマの管理に関して">テーマの管理に関して</h3>
<ul>
<li>hugoでのテーマは<code>themes</code> フォルダの配下でサブモジュールとして管理されている。</li>
<li>直接ソースコードをいじればもちろん変更は可能だが、サブモジュール自体のアップデートがあった時に変更が消えてしまう。</li>
<li>なので直接ソースをいじるのは無し(wordpressのテーマなどでもお馴染みではあるが)</li>
</ul>
<h3 id="ソーシャルアイコンに関して">ソーシャルアイコンに関して</h3>
<p>今現在私が使わせてもらっているテーマは<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng">hugo-theme-hello-friend-ng</a></p>
<ul>
<li>READMEを読んでいくとソーシャルアイコンは<a href="https://simpleicons.org/">simpleicons</a>のアイコンを使っている。</li>
<li>テーマ内でのアイコン管理はどうやら<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng/blob/master/layouts/partials/svg.html">ここ</a>で行っている。</li>
</ul>
<h3 id="テーマ編集に関して">テーマ編集に関して</h3>
<p>どうやら<code>layouts</code>配下に仕様しているテーマの変更したいソースコードパスをコピーしてこればいいらしい。(参考サイト忘れてしまいました。すいません。)</p>
<p>なので</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp blog/themes/hello-friend-ng/layouts/partials/svg.html blog/layouts/partials/
</code></pre></div><p>このようにコピーして,コピーしたものを編集すればHugoさんがよしなにしてくれる。</p>
<h5 id="layoutspartialssvghtml">layouts/partials/svg.html</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+ {{- else if (eq .name &#34;qiita&#34;) -}}
+     &lt;<span style="color:#f92672">svg</span> <span style="color:#a6e22e">xmlns</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.w3.org/2000/svg&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;26&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;24&#34;</span> <span style="color:#a6e22e">viewBox</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0 0 24 24&#34;</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;none&#34;</span> <span style="color:#a6e22e">stroke</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;currentColor&#34;</span> <span style="color:#a6e22e">stroke-width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#a6e22e">stroke-linecap</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;round&#34;</span> <span style="color:#a6e22e">stroke-linejoin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;round&#34;</span>&gt;&lt;<span style="color:#f92672">path</span> <span style="color:#a6e22e">xmlns</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.w3.org/2000/svg&#34;</span> <span style="color:#a6e22e">d</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;M7.883 11.615c0-1.92-1.474-3.904-3.974-3.904C1.987 7.71 0 9.183 0 11.679c0 1.92 1.474 3.905 3.973 3.905.801 0 1.602-.256 2.275-.736L7.402 16l.513-.512-1.09-1.088c.673-.736 1.058-1.696 1.058-2.785zm-3.974-3.2c1.827 0 3.269 1.408 3.269 3.232 0 1.569-1.218 3.233-3.237 3.233-2.018 0-3.236-1.632-3.236-3.2 0-2.049 1.634-3.265 3.204-3.265zm5.864 1.568h.673v5.44h-.673zm.32-.736a.574.574 0 0 1-.576-.576c0-.32.256-.576.576-.576.32 0 .577.256.577.576 0 .32-.256.576-.577.576zm2.724 0a.574.574 0 0 1-.577-.576c0-.32.257-.576.577-.576.32 0 .577.256.577.576 0 .32-.256.576-.577.576zm-.32.736h.673v5.44h-.673zm4.71 5.537c-1.25 0-1.987-.96-1.987-1.92V8.479h.673v1.504h2.371v.672h-2.37v2.977c0 .608.48 1.248 1.313 1.248.224 0 .449-.064.64-.192l.065-.032.32.576-.064.032c-.288.16-.64.256-.961.256zm4.454.032c-1.827 0-2.916-1.44-2.916-2.848 0-1.825 1.442-2.913 2.852-2.913.737 0 1.314.256 1.73.736v-.544H24v5.44h-.673v-.607c-.384.48-.961.736-1.666.736zm-.064-5.089c-1.09 0-2.18.832-2.18 2.24 0 1.089.834 2.177 2.244 2.177.64 0 1.282-.288 1.698-.8v-2.817a2.29 2.29 0 0 0-1.762-.8z&#34;</span>/&gt;&lt;/<span style="color:#f92672">polygon</span>&gt;&lt;/<span style="color:#f92672">svg</span>&gt;
{{- end -}}
</code></pre></div><p>あとの変更は<a href="https://github.com/tomowarkar/blog/commit/6b88f224fa1d6e473be03875255b211e4367670c">こちら</a>の通り。お手軽にテーマの編集ができた。</p>
<p>※ docs/index.html は自動生成されたもの。</p>
]]></content>
        </item>
        
        <item>
            <title>はてなブログ自動投稿Pythonスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/hatena_api/</link>
            <pubDate>Thu, 09 Apr 2020 01:46:56 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/hatena_api/</guid>
            <description>はてなブログの投稿を自動化、ローカル管理がしたい ということでHatena api を叩いてみた備忘録 参考 はてな API一覧 下準備 ローカルでの記事管理は</description>
            <content type="html"><![CDATA[<p>はてなブログの投稿を自動化、ローカル管理がしたい</p>
<p>ということでHatena api を叩いてみた備忘録</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="http://developer.hatena.ne.jp/ja/documents/apis">はてな API一覧</a></li>
</ul>
<h2 id="下準備">下準備</h2>
<p>ローカルでの記事管理は以下のようなものを想定する</p>
<ul>
<li>markdown形式</li>
<li>1行目にブログタイトル</li>
<li>2行目にブログタグ</li>
<li>3行目以降は本文</li>
</ul>
<h3 id="examplemd">example.md</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">タイトル
Python,日常,hoge
<span style="color:#75715e">## 今日の
</span><span style="color:#75715e"></span>hugahuga

<span style="color:#75715e">### 天気は
</span><span style="color:#75715e"></span>hogahoga
</code></pre></div><p>ローカルでの投稿済みか未投稿かの判別や、投稿日時の判別は対応できないが最低限の仕様ではあると思う。</p>
<h2 id="python-スクリプト">Python スクリプト</h2>
<h3 id="mainpy">main.py</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
<span style="color:#f92672">import</span> requests <span style="color:#f92672">as</span> req

HATENA_ID <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your hatena id&#34;</span>
BLOG_DOMAIN <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your blog domain&#34;</span>
API_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your api key&#34;</span>
BASE_URL <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;https://blog.hatena.ne.jp/{HATENA_ID}/{BLOG_DOMAIN}/atom&#34;</span>


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hatena_entry</span>(title, content, categorys<span style="color:#f92672">=</span>[], updated<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>, draft<span style="color:#f92672">=</span>False):
    <span style="color:#e6db74">&#34;&#34;&#34;はてなブログへの投稿
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">      HATENA_ID, API_KEY, BASE_URL (str)
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">      title (str):
</span><span style="color:#e6db74">      content (str): 
</span><span style="color:#e6db74">      categorys (List[str]): 
</span><span style="color:#e6db74">      updated (str): %Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">T%H:%M:%S
</span><span style="color:#e6db74">      draft (bool):
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Returns:
</span><span style="color:#e6db74">      str: xml
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    updated <span style="color:#f92672">=</span> updated <span style="color:#66d9ef">if</span> updated <span style="color:#66d9ef">else</span> datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">T%H:%M:%S&#34;</span>)
    draft <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;yes&#34;</span> <span style="color:#66d9ef">if</span> draft <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;no&#34;</span>
    category <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join([f<span style="color:#e6db74">&#34;&lt;category term=&#39;{e}&#39; /&gt;&#34;</span> <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x])
    categorys <span style="color:#f92672">=</span> category(categorys) <span style="color:#66d9ef">if</span> category <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;&#34;</span>

    xml <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;&#34;&#34;&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;&lt;entry xmlns=&#34;http://www.w3.org/2005/Atom&#34; xmlns:app=&#34;http://www.w3.org/2007/app&#34;&gt;
</span><span style="color:#e6db74">      &lt;title&gt;{title}&lt;/title&gt;&lt;author&gt;&lt;name&gt;name&lt;/name&gt;&lt;/author&gt;&lt;content type=&#34;text/markdown&#34;&gt;{content}&lt;/content&gt;
</span><span style="color:#e6db74">      &lt;updated&gt;{updated}&lt;/updated&gt;{categorys}&lt;app:control&gt;&lt;app:draft&gt;{draft}&lt;/app:draft&gt;
</span><span style="color:#e6db74">      &lt;/app:control&gt;&lt;/entry&gt;&#34;&#34;&#34;</span><span style="color:#f92672">.</span>encode(
        <span style="color:#e6db74">&#34;UTF-8&#34;</span>
    )
    r <span style="color:#f92672">=</span> req<span style="color:#f92672">.</span>post(BASE_URL <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/entry&#34;</span>, auth<span style="color:#f92672">=</span>(HATENA_ID, API_KEY), data<span style="color:#f92672">=</span>xml)
    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>text


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    <span style="color:#f92672">import</span> sys

    _, arg <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>argv
    <span style="color:#66d9ef">with</span> open(arg, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
        title, categorys, <span style="color:#f92672">*</span>content <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    categorys <span style="color:#f92672">=</span> categorys<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)
    content <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(content)
    r <span style="color:#f92672">=</span> hatena_entry(title, content, categorys)
    <span style="color:#66d9ef">print</span>(r)

</code></pre></div><p>はてなブログのapiではxmlを扱う。これまでxmlにあまり触れてこなかったが、自動投稿ぐらいだと大して詰まることもなく書けた。</p>
<h2 id="usage">usage</h2>
<pre><code>python3 main.py example.md
</code></pre>]]></content>
        </item>
        
        <item>
            <title>ニコニコ動画のチャンネルにおける動画のurlリストを取得するPythonスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/nicovideo/</link>
            <pubDate>Wed, 08 Apr 2020 23:04:57 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nicovideo/</guid>
            <description>from time import sleep from selenium import webdriver from selenium.webdriver.chrome.options import Options MAIL = &amp;#34;&amp;#34; #ログインに使うメールアドレス PSWD = &amp;#34;&amp;#34; #ログインに使うパスワード class NicoVideo(object): &amp;#34;&amp;#34;&amp;#34;ニコニコ動画の</description>
            <content type="html"><![CDATA[<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep
<span style="color:#f92672">from</span> selenium <span style="color:#f92672">import</span> webdriver
<span style="color:#f92672">from</span> selenium.webdriver.chrome.options <span style="color:#f92672">import</span> Options

MAIL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e">#ログインに使うメールアドレス</span>
PSWD <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e">#ログインに使うパスワード</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">NicoVideo</span>(object):
    <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画の操作を行う
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">      headless (bool): ヘッドレスモード使用の有無
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">      driver: selenium.webdriver.chrome.webdriver.WebDriver
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">def</span> __init__(self, headless<span style="color:#f92672">=</span>False):
        options <span style="color:#f92672">=</span> Options()
        options<span style="color:#f92672">.</span>headless <span style="color:#f92672">=</span> headless
        self<span style="color:#f92672">.</span>driver <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>Chrome(options<span style="color:#f92672">=</span>options)

    <span style="color:#66d9ef">def</span> __del__(self):
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>close()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">login</span>(self, mail, pswd):
        <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画へのログイン
</span><span style="color:#e6db74">        Args:
</span><span style="color:#e6db74">          mail (str)
</span><span style="color:#e6db74">          pswd (str)
</span><span style="color:#e6db74">        Returns:
</span><span style="color:#e6db74">          None
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://account.nicovideo.jp/login&#34;</span>
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>get(url)
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;[driver] get&#34;</span>, url)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;input__mailtel&#34;</span>)<span style="color:#f92672">.</span>send_keys(mail)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;input__password&#34;</span>)<span style="color:#f92672">.</span>send_keys(pswd)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;login__submit&#34;</span>)<span style="color:#f92672">.</span>submit()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">channel_video_list</span>(self, channel_name, page<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
        <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画のあるチャンネルにおける動画のURLリストの取得
</span><span style="color:#e6db74">        Args:
</span><span style="color:#e6db74">          channel_name (str): channel name
</span><span style="color:#e6db74">          page (int): page num　( &gt; 0 )
</span><span style="color:#e6db74">        Returns:
</span><span style="color:#e6db74">          List[str]
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        url <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;https://ch.nicovideo.jp/{channel_name}/video?page={page}&#34;</span>
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>get(url)
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;[driver] get&#34;</span>, url)

        items <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_elements_by_css_selector(<span style="color:#e6db74">&#34;ul.items &gt; li.item&#34;</span>)

        <span style="color:#66d9ef">return</span> [
            item<span style="color:#f92672">.</span>find_element_by_css_selector(<span style="color:#e6db74">&#34;div.item_left &gt; a&#34;</span>)<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>)
            <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> items
        ]


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    output_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nicovideo.txt&#34;</span>

    <span style="color:#75715e"># ファイルの初期化</span>
    <span style="color:#66d9ef">with</span> open(output_file, <span style="color:#e6db74">&#34;w&#34;</span>):
        <span style="color:#66d9ef">pass</span>

    nv <span style="color:#f92672">=</span> NicoVideo(headless<span style="color:#f92672">=</span>True)
    nv<span style="color:#f92672">.</span>login(MAIL, PSWD)

    page <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">while</span> True:
        channel_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mentalist&#34;</span>
        vlist <span style="color:#f92672">=</span> nv<span style="color:#f92672">.</span>channel_video_list(channel_name, page<span style="color:#f92672">=</span>page)
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> vlist:
            <span style="color:#66d9ef">break</span>
        text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(vlist) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
        <span style="color:#66d9ef">with</span> open(output_file, <span style="color:#e6db74">&#34;a&#34;</span>) <span style="color:#66d9ef">as</span> f:
            f<span style="color:#f92672">.</span>write(text)

        page <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Github Pages でブログ始めました。</title>
            <link>https://tomowarkar.github.io/blog/posts/init/</link>
            <pubDate>Wed, 08 Apr 2020 22:41:43 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/init/</guid>
            <description>こんにちは tomowarkar です。 GitHub Pages と Go 製のウェブサイト生成フレームワークである Hugo を使って Github でブログを始めました。 これまでも他の形でブログを運用していたの</description>
            <content type="html"><![CDATA[<p>こんにちは tomowarkar です。</p>
<p>GitHub Pages と Go 製のウェブサイト生成フレームワークである Hugo を使って Github でブログを始めました。</p>
<p>これまでも他の形でブログを運用していたのですが、技術ブログと日常ブログが混じってしまったり、サーバーやらドメインやらの管理が面倒になってきた(技術的なアウトプットをするだけなら、それ以外の運営コストをできるだけ下げたい)ので新しく Github でブログを始めた次第です。</p>
<p>あまり硬くならずとりあえず書いたコードの供養の場として使っていけたらと思っています。</p>
<p>今回 GitHub Pages と Hugo を使ってブログを始めるにあたって、以下の記事を参考にさせていただきました。ありがとうございます 🙏</p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://qiita.com/Blank71/items/88a6c76ca9e162af73fe">https://qiita.com/Blank71/items/88a6c76ca9e162af73fe</a></li>
<li><a href="https://qiita.com/yotsak83/items/017734d5f873f4f194d4">https://qiita.com/yotsak83/items/017734d5f873f4f194d4</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
