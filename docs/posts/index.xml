<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on tomowarkarの技術ブログ</title>
        <link>https://tomowarkar.github.io/blog/posts/</link>
        <description>Recent content in Posts on tomowarkarの技術ブログ</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <copyright>tomowarkar</copyright>
        <lastBuildDate>Mon, 08 Jun 2020 14:58:53 +0900</lastBuildDate>
        <atom:link href="https://tomowarkar.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>100本ノックシリーズ</title>
            <link>https://tomowarkar.github.io/blog/posts/100series/</link>
            <pubDate>Mon, 08 Jun 2020 14:58:53 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/100series/</guid>
            <description>言語処理 100 本ノック 2020 言語処理 100 本ノック 2020 - NLP100 2020 00 ~ 09 今さら言語処理 100 本ノック #01 10 ~ 19 今さら言語処理 100 本ノック #02-bash 今さら言語処理 100 本ノック #02-python 20 ~</description>
            <content type="html"><![CDATA[<h2 id="言語処理-100-本ノック-2020">言語処理 100 本ノック 2020</h2>
<p><a href="https://nlp100.github.io/ja/">言語処理 100 本ノック 2020 - NLP100 2020</a></p>
<h3 id="00--09">00 ~ 09</h3>
<p><a href="/posts/nlp100-01/">今さら言語処理 100 本ノック #01</a></p>
<h3 id="10--19">10 ~ 19</h3>
<p><a href="/posts/nlp100-02/">今さら言語処理 100 本ノック #02-bash</a></p>
<p><a href="/posts/nlp100-02-py/">今さら言語処理 100 本ノック #02-python</a></p>
<h3 id="20--29">20 ~ 29</h3>
<p><a href="/posts/nlp100-03/">今さら言語処理 100 本ノック #03</a></p>
<h3 id="30--39">30 ~ 39</h3>
<p><a href="/posts/nlp100-04/">今さら言語処理 100 本ノック #04</a></p>
<h3 id="40--49">40 ~ 49</h3>
<p><a href="/posts/nlp100-05/">今さら言語処理 100 本ノック #05 前半</a></p>
<p><a href="/posts/nlp100-05_2/">今さら言語処理 100 本ノック #05 後半</a></p>
<h3 id="50--59">50 ~ 59</h3>
<p><a href="/posts/nlp100-06/">今さら言語処理 100 本ノック #06 前半</a></p>
<p><a href="/posts/nlp100-06_2/">今さら言語処理 100 本ノック #06 後半</a></p>
<h3 id="60--69">60 ~ 69</h3>
<p><a href="/posts/nlp100-07/">今さら言語処理 100 本ノック #07</a></p>
]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #7</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-07/</link>
            <pubDate>Sun, 07 Jun 2020 21:39:51 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-07/</guid>
            <description>言語処理 100 本ノック(第 7 章: 単語ベクトル) 60. 単語ベクトルの読み込みと表示 Google News データセット（約 1,000 億単語）での学習済み単語ベクトル（300 万単語</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch07.html">言語処理 100 本ノック(第 7 章: 単語ベクトル)</a></p>
<h2 id="60-単語ベクトルの読み込みと表示">60. 単語ベクトルの読み込みと表示</h2>
<blockquote>
<p>Google News データセット（約 1,000 億単語）での<a href="https://drive.google.com/file/d/0B7XkCwpI5KDYNlNUTTlSS21pQmM/edit?usp=sharing">学習済み単語ベクトル</a>（300 万単語・フレーズ，300 次元）をダウンロードし，”United States”の単語ベクトルを表示せよ．ただし，”United States”は内部的には”United_States”と表現されていることに注意せよ．</p>
</blockquote>
<p>ファイルサイズが<code>1.5GB</code>もあってやばいので<code>Google Colab</code>などを使うことをお勧めします。</p>
<h3 id="ファイルダウンロードgoogle-colab">ファイルダウンロード(Google colab)</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">%%bash
url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://drive.google.com/uc?export=download&amp;id=0B7XkCwpI5KDYNlNUTTlSS21pQmM&#34;</span>
curl -sc /tmp/cookie <span style="color:#e6db74">${</span>url<span style="color:#e6db74">}</span> &gt;/dev/null
code<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>awk <span style="color:#e6db74">&#39;/_warning_/ {print $NF}&#39;</span> /tmp/cookie<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
curl -sLb /tmp/cookie <span style="color:#e6db74">${</span>url<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;&amp;confirm=</span><span style="color:#e6db74">${</span>code<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> -o GoogleNews-vectors-negative300.bin.gz
</code></pre></div><p>一応 sha256 も載せておく</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">! sha256sum GoogleNews-vectors-negative300.bin.gz
21c05ae916a67a4da59b1d006903355cced7de7da1e42bff9f0504198c748da8  GoogleNews-vectors-negative300.bin.gz
</code></pre></div><p>###　メイン</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> gensim.models <span style="color:#f92672">import</span> KeyedVectors
model <span style="color:#f92672">=</span> KeyedVectors<span style="color:#f92672">.</span>load_word2vec_format(<span style="color:#e6db74">&#39;GoogleNews-vectors-negative300.bin.gz&#39;</span>, binary<span style="color:#f92672">=</span>True)

model[<span style="color:#e6db74">&#34;United_States&#34;</span>]
</code></pre></div><pre><code>array([-3.61328125e-02, -4.83398438e-02,  2.35351562e-01,  1.74804688e-01,
       -1.46484375e-01, -7.42187500e-02, -1.01562500e-01, -7.71484375e-02,
        1.09375000e-01, -5.71289062e-02, -1.48437500e-01, -6.00585938e-02,
        1.74804688e-01, -7.71484375e-02,  2.58789062e-02, -7.66601562e-02,
       -3.80859375e-02,  1.35742188e-01,  3.75976562e-02, -4.19921875e-02,
       -3.56445312e-02,  5.34667969e-02,  3.68118286e-04, -1.66992188e-01,
       -1.17187500e-01,  1.41601562e-01, -1.69921875e-01, -6.49414062e-02,
       -1.66992188e-01,  1.00585938e-01,  1.15722656e-01, -2.18750000e-01,
       -9.86328125e-02, -2.56347656e-02,  1.23046875e-01, -3.54003906e-02,
       -1.58203125e-01, -1.60156250e-01,  2.94189453e-02,  8.15429688e-02,
        6.88476562e-02,  1.87500000e-01,  6.49414062e-02,  1.15234375e-01,
       -2.27050781e-02,  3.32031250e-01, -3.27148438e-02,  1.77734375e-01,
       -2.08007812e-01,  4.54101562e-02, -1.23901367e-02,  1.19628906e-01,
        7.44628906e-03, -9.03320312e-03,  1.14257812e-01,  1.69921875e-01,
       -2.38281250e-01, -2.79541016e-02, -1.21093750e-01,  2.47802734e-02,
        7.71484375e-02, -2.81982422e-02, -4.71191406e-02,  1.78222656e-02,
       -1.23046875e-01, -5.32226562e-02,  2.68554688e-02, -3.11279297e-02,
       -5.59082031e-02, -5.00488281e-02, -3.73535156e-02,  1.25976562e-01,
        5.61523438e-02,  1.51367188e-01,  4.29687500e-02, -2.08007812e-01,
       -4.78515625e-02,  2.78320312e-02,  1.81640625e-01,  2.20703125e-01,
       -3.61328125e-02, -8.39843750e-02, -3.69548798e-05, -9.52148438e-02,
       -1.25000000e-01, -1.95312500e-01, -1.50390625e-01, -4.15039062e-02,
        1.31835938e-01,  1.17675781e-01,  1.91650391e-02,  5.51757812e-02,
       -9.42382812e-02, -1.08886719e-01,  7.32421875e-02, -1.15234375e-01,
        8.93554688e-02, -1.40625000e-01,  1.45507812e-01,  4.49218750e-02,
       -1.10473633e-02, -1.62353516e-02,  4.05883789e-03,  3.75976562e-02,
       -6.98242188e-02, -5.46875000e-02,  2.17285156e-02, -9.47265625e-02,
        4.24804688e-02,  1.81884766e-02, -1.73339844e-02,  4.63867188e-02,
       -1.42578125e-01,  1.99218750e-01,  1.10839844e-01,  2.58789062e-02,
       -7.08007812e-02, -5.54199219e-02,  3.45703125e-01,  1.61132812e-01,
       -2.44140625e-01, -2.59765625e-01, -9.71679688e-02,  8.00781250e-02,
       -8.78906250e-02, -7.22656250e-02,  1.42578125e-01, -8.54492188e-02,
       -3.18359375e-01,  8.30078125e-02,  6.34765625e-02,  1.64062500e-01,
       -1.92382812e-01, -1.17675781e-01, -5.41992188e-02, -1.56250000e-01,
       -1.21582031e-01, -4.95605469e-02,  1.20117188e-01, -3.83300781e-02,
        5.51757812e-02, -8.97216797e-03,  4.32128906e-02,  6.93359375e-02,
        8.93554688e-02,  2.53906250e-01,  1.65039062e-01,  1.64062500e-01,
       -1.41601562e-01,  4.58984375e-02,  1.97265625e-01, -8.98437500e-02,
        3.90625000e-02, -1.51367188e-01, -8.60595703e-03, -1.17675781e-01,
       -1.97265625e-01, -1.12792969e-01,  1.29882812e-01,  1.96289062e-01,
        1.56402588e-03,  3.93066406e-02,  2.17773438e-01, -1.43554688e-01,
        6.03027344e-02, -1.35742188e-01,  1.16210938e-01, -1.59912109e-02,
        2.79296875e-01,  1.46484375e-01, -1.19628906e-01,  1.76757812e-01,
        1.28906250e-01, -1.49414062e-01,  6.93359375e-02, -1.72851562e-01,
        9.22851562e-02,  1.33056641e-02, -2.00195312e-01, -9.76562500e-02,
       -1.65039062e-01, -2.46093750e-01, -2.35595703e-02, -2.11914062e-01,
        1.84570312e-01, -1.85546875e-02,  2.16796875e-01,  5.05371094e-02,
        2.02636719e-02,  4.25781250e-01,  1.28906250e-01, -2.77099609e-02,
        1.29882812e-01, -1.15722656e-01, -2.05078125e-02,  1.49414062e-01,
        7.81250000e-03, -2.05078125e-01, -8.05664062e-02, -2.67578125e-01,
       -2.29492188e-02, -8.20312500e-02,  8.64257812e-02,  7.61718750e-02,
       -3.66210938e-02,  5.22460938e-02, -1.22070312e-01, -1.44042969e-02,
       -2.69531250e-01,  8.44726562e-02, -2.52685547e-02, -2.96630859e-02,
       -1.68945312e-01,  1.93359375e-01, -1.08398438e-01,  1.94091797e-02,
       -1.80664062e-01,  1.93359375e-01, -7.08007812e-02,  5.85937500e-02,
       -1.01562500e-01, -1.31835938e-01,  7.51953125e-02, -7.66601562e-02,
        3.37219238e-03, -8.59375000e-02,  1.25000000e-01,  2.92968750e-02,
        1.70898438e-01, -9.37500000e-02, -1.09375000e-01, -2.50244141e-02,
        2.11914062e-01, -4.44335938e-02,  6.12792969e-02,  2.62451172e-02,
       -1.77734375e-01,  1.23046875e-01, -7.42187500e-02, -1.67968750e-01,
       -1.08886719e-01, -9.04083252e-04, -7.37304688e-02,  5.49316406e-02,
        6.03027344e-02,  8.39843750e-02,  9.17968750e-02, -1.32812500e-01,
        1.22070312e-01, -8.78906250e-03,  1.19140625e-01, -1.94335938e-01,
       -6.64062500e-02, -2.07031250e-01,  7.37304688e-02,  8.93554688e-02,
        1.81884766e-02, -1.20605469e-01, -2.61230469e-02,  2.67333984e-02,
        7.76367188e-02, -8.30078125e-02,  6.78710938e-02, -3.54003906e-02,
        3.10546875e-01, -2.42919922e-02, -1.41601562e-01, -2.08007812e-01,
       -4.57763672e-03, -6.54296875e-02, -4.95605469e-02,  2.22656250e-01,
        1.53320312e-01, -1.38671875e-01, -5.24902344e-02,  4.24804688e-02,
       -2.38281250e-01,  1.56250000e-01,  5.83648682e-04, -1.20605469e-01,
       -9.22851562e-02, -4.44335938e-02,  3.61328125e-02, -1.86767578e-02,
       -8.25195312e-02, -8.25195312e-02, -4.05273438e-02,  1.19018555e-02,
        1.69921875e-01, -2.80761719e-02,  3.03649902e-03,  9.32617188e-02,
       -8.49609375e-02,  1.57470703e-02,  7.03125000e-02,  1.62353516e-02,
       -2.27050781e-02,  3.51562500e-02,  2.47070312e-01, -2.67333984e-02],
      dtype=float32)
</code></pre><h2 id="61-単語の類似度">61. 単語の類似度</h2>
<blockquote>
<p>“United States”と”U.S.”のコサイン類似度を計算せよ．</p>
</blockquote>
<h3 id="genisum-のビルドインを使う">genisum のビルドインを使う</h3>
<p>参考: <a href="https://radimrehurek.com/gensim/models/deprecated/word2vec.html">gensim: models.deprecated.word2vec – Deep learning with word2vec</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">model<span style="color:#f92672">.</span>similarity(<span style="color:#e6db74">&#34;U.S.&#34;</span>, <span style="color:#e6db74">&#34;United_States&#34;</span>) <span style="color:#75715e">#&gt; 0.73107743</span>
</code></pre></div><h3 id="numpy-で頑張る">numpy で頑張る</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#f92672">as</span> np
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">cos_sim</span>(v1, v2):
    <span style="color:#e6db74">&#34;&#34;&#34;2ベクトル間のコサイン類似度を返す&#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> np<span style="color:#f92672">.</span>dot(v1, v2) <span style="color:#f92672">/</span> (np<span style="color:#f92672">.</span>linalg<span style="color:#f92672">.</span>norm(v1) <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>linalg<span style="color:#f92672">.</span>norm(v2))

cos_sim(model[<span style="color:#e6db74">&#34;United_States&#34;</span>], model[<span style="color:#e6db74">&#34;U.S.&#34;</span>]) <span style="color:#75715e">#&gt; 0.7310775</span>
</code></pre></div><h2 id="62-類似度の高い単語-10-件">62. 類似度の高い単語 10 件</h2>
<blockquote>
<p>“United States”とコサイン類似度が高い 10 語と，その類似度を出力せよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">model<span style="color:#f92672">.</span>most_similar_cosmul(<span style="color:#e6db74">&#34;United_States&#34;</span>)
</code></pre></div><pre><code>[('Unites_States', 0.8938615918159485),
 ('Untied_States', 0.8770676851272583),
 ('United_Sates', 0.8700354099273682),
 ('U.S.', 0.8655378818511963),
 ('theUnited_States', 0.8202189207077026),
 ('America', 0.8089197278022766),
 ('UnitedStates', 0.8083648085594177),
 ('Europe', 0.8066486716270447),
 ('countries', 0.8022394776344299),
 ('Canada', 0.8009527325630188)]
</code></pre><h2 id="63-加法構成性によるアナロジー">63. 加法構成性によるアナロジー</h2>
<blockquote>
<p>“Spain”の単語ベクトルから”Madrid”のベクトルを引き，”Athens”のベクトルを足したベクトルを計算し，そのベクトルと類似度の高い 10 語とその類似度を出力せよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">[(<span style="color:#e6db74">&#39;Greece&#39;</span>, <span style="color:#ae81ff">0.9562304615974426</span>),
 (<span style="color:#e6db74">&#39;Aristeidis_Grigoriadis&#39;</span>, <span style="color:#ae81ff">0.8694582581520081</span>),
 (<span style="color:#e6db74">&#39;Ioannis_Drymonakos&#39;</span>, <span style="color:#ae81ff">0.8600285053253174</span>),
 (<span style="color:#e6db74">&#39;Ioannis_Christou&#39;</span>, <span style="color:#ae81ff">0.8544448614120483</span>),
 (<span style="color:#e6db74">&#39;Greeks&#39;</span>, <span style="color:#ae81ff">0.8521003127098083</span>),
 (<span style="color:#e6db74">&#39;Hrysopiyi_Devetzi&#39;</span>, <span style="color:#ae81ff">0.8383888006210327</span>),
 (<span style="color:#e6db74">&#39;Panagiotis_Gionis&#39;</span>, <span style="color:#ae81ff">0.8323913216590881</span>),
 (<span style="color:#e6db74">&#39;Heraklio&#39;</span>, <span style="color:#ae81ff">0.8297829627990723</span>),
 (<span style="color:#e6db74">&#39;Lithuania&#39;</span>, <span style="color:#ae81ff">0.8291547298431396</span>),
 (<span style="color:#e6db74">&#39;Periklis_Iakovakis&#39;</span>, <span style="color:#ae81ff">0.8289119601249695</span>)]
</code></pre></div><h3 id="おまけ">おまけ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">[(<span style="color:#e6db74">&#39;Japan&#39;</span>, <span style="color:#ae81ff">1.0016356706619263</span>),
 (<span style="color:#e6db74">&#39;Japanese&#39;</span>, <span style="color:#ae81ff">0.8822101950645447</span>),
 (<span style="color:#e6db74">&#39;South_Korea&#39;</span>, <span style="color:#ae81ff">0.8762961626052856</span>),
 (<span style="color:#e6db74">&#39;Korea&#39;</span>, <span style="color:#ae81ff">0.8596336245536804</span>),
 (<span style="color:#e6db74">&#39;Japans&#39;</span>, <span style="color:#ae81ff">0.8564624190330505</span>),
 (<span style="color:#e6db74">&#39;Shimane_Prefecture&#39;</span>, <span style="color:#ae81ff">0.8264696598052979</span>),
 (<span style="color:#e6db74">&#39;Nagasaki_Prefecture&#39;</span>, <span style="color:#ae81ff">0.824508011341095</span>),
 (<span style="color:#e6db74">&#39;Kyushu&#39;</span>, <span style="color:#ae81ff">0.8202904462814331</span>),
 (<span style="color:#e6db74">&#39;Kanto_region&#39;</span>, <span style="color:#ae81ff">0.8149427771568298</span>),
 (<span style="color:#e6db74">&#39;Takao&#39;</span>, <span style="color:#ae81ff">0.8107433915138245</span>)]
</code></pre></div><h2 id="64-アナロジーデータでの実験">64. アナロジーデータでの実験</h2>
<blockquote>
<p><a href="http://download.tensorflow.org/data/questions-words.txt">単語アナロジーの評価データ</a>をダウンロードし，vec(2 列目の単語) - vec(1 列目の単語) + vec(3 列目の単語)を計算し，そのベクトルと類似度が最も高い単語と，その類似度を求めよ．求めた単語と類似度は，各事例の末尾に追記せよ．</p>
</blockquote>
<h3 id="ダウンロード">ダウンロード</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -O http://download.tensorflow.org/data/questions-words.txt
</code></pre></div><h3 id="メイン">メイン</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;questions-words.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
  lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve</span>(lines):
  <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
    <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;:&#34;</span>):
      <span style="color:#66d9ef">yield</span> line
      <span style="color:#66d9ef">continue</span>

    cols <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split()
    <span style="color:#66d9ef">if</span> len(cols) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">4</span>:
      <span style="color:#66d9ef">yield</span> line
      <span style="color:#66d9ef">continue</span>

    word, _ <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>most_similar_cosmul(positive<span style="color:#f92672">=</span>cols[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">3</span>], negative<span style="color:#f92672">=</span>cols[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">1</span>])[<span style="color:#ae81ff">0</span>]
    <span style="color:#66d9ef">yield</span> <span style="color:#e6db74">&#34;{} {} {} {} {}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(<span style="color:#f92672">*</span>cols, word)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;questions-words.txt.v1&#34;</span>, mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;x&#39;</span>) <span style="color:#66d9ef">as</span> f:
  <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> solve(lines):
    f<span style="color:#f92672">.</span>write(e)

</code></pre></div><p>Google Colab で寝ているときに回していたけど、多分 7 時間くらいかかった。</p>
<p>19558 行 x1s で 5 時間半くらいなので 1 行 1 秒ちょっとの時間がかかっている。</p>
<pre><code>$ awk 'NR % 500 == 0' questions-words.txt.v1
Tokyo Japan Madrid Spain Spain
Baku Azerbaijan Dhaka Bangladesh Bangladesh
Bucharest Romania Georgetown Guyana Villanova
Dublin Ireland Jakarta Indonesia Indonesia
Kathmandu Nepal Kigali Rwanda Rwanda
Lusaka Zambia Tashkent Uzbekistan Uzbekistan
Nassau Bahamas Tokyo Japan Japan
Rome Italy Vientiane Laos Laos
Thimphu Bhutan Abuja Nigeria Nigeria
Zagreb Croatia Apia Samoa Samoa
Latvia lats Nigeria naira naira
Philadelphia Pennsylvania Cleveland Ohio Ohio
Louisville Kentucky Lubbock Texas Texas
Wichita Kansas Irving Texas lawyer_Elmar_Kresbach
Orlando Florida Worcester Massachusetts Massachusetts
Modesto California Miami Florida Florida
grandfather grandmother father mother mother
complete completely efficient efficiently inefficient
quiet quietly serious seriously already
comfortable uncomfortable rational irrational irrational
possibly impossibly decided undecided unadorned
fast faster bright brighter brighter
safe safer heavy heavier heavier
young younger safe safer safer
low lowest cool coolest coolest
warm warmest strange strangest strangest
increase increasing scream screaming screaming
sit sitting shuffle shuffling shuffling
Cambodia Cambodian Ukraine Ukrainian Ukrainian
Ireland Irish Brazil Brazilian Brazilian
Portugal Portuguese Croatia Croatian Croatian
feeding fed looking looked hoping
paying paid running ran ran
sleeping slept selling sold sold
car cars cat cats cats
eye eyes donkey donkeys donkeys
pig pigs machine machines machines
listen listens eat eats eats
walk walks vanish vanishes vanishes
</code></pre><h4 id="memo">memo</h4>
<p>並列処理しようとしてうまくいかなかった</p>
<p><a href="https://qiita.com/simonritchie/items/1ce3914eb5444d2157ac">Python の並列処理・並行処理をしっかり調べてみた - Qiita</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve</span>(index, lines):
  line <span style="color:#f92672">=</span> lines[index]
  <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;:&#34;</span>):
    lines[index] <span style="color:#f92672">=</span>  line
    <span style="color:#66d9ef">return</span>

  cols <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split()
  <span style="color:#66d9ef">if</span> len(cols) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">4</span>:
    lines[index] <span style="color:#f92672">=</span>  line
    <span style="color:#66d9ef">return</span>

  word, _ <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>most_similar_cosmul(positive<span style="color:#f92672">=</span>cols[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">3</span>], negative<span style="color:#f92672">=</span>cols[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">1</span>])[<span style="color:#ae81ff">0</span>]
  lines[index] <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;{} {} {} {} {}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(<span style="color:#f92672">*</span>cols, word)
  <span style="color:#66d9ef">return</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># 並列処理</span>
<span style="color:#f92672">from</span> multiprocessing <span style="color:#f92672">import</span> Process, Manager
ll <span style="color:#f92672">=</span> lines[:<span style="color:#ae81ff">30</span>]
manager <span style="color:#f92672">=</span> Manager()
returned <span style="color:#f92672">=</span> manager<span style="color:#f92672">.</span>list(ll)

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(ll)):
  process <span style="color:#f92672">=</span> Process(
      target<span style="color:#f92672">=</span>solve,
      kwargs<span style="color:#f92672">=</span>{
          <span style="color:#e6db74">&#34;index&#34;</span>:i,
          <span style="color:#e6db74">&#39;lines&#39;</span>: returned,
      })

  process<span style="color:#f92672">.</span>start()
  process_list<span style="color:#f92672">.</span>append(process)

<span style="color:#66d9ef">for</span> process <span style="color:#f92672">in</span> process_list:
    process<span style="color:#f92672">.</span>join()

<span style="color:#75715e"># 通常処理</span>
ll <span style="color:#f92672">=</span> lines[:<span style="color:#ae81ff">30</span>]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(ll)):
  solve(i, ll)

<span style="color:#66d9ef">print</span>(ll <span style="color:#f92672">==</span> list(returned)) <span style="color:#75715e">#&gt; True</span>
</code></pre></div><p>並列処理と通常処理の timeit 結果はそれぞれ<code>1 loop, best of 3: 36 s per loop</code>, <code>1 loop, best of 3: 30.4 s per loop</code></p>
<p>期待する返り値は得られているけど、実行速度がむしろ遅くなってる。並行処理わからんぞ;(</p>
<h2 id="65-アナロジータスクでの正解率">65. アナロジータスクでの正解率</h2>
<blockquote>
<p>64 の実行結果を用い，意味的アナロジー（semantic analogy）と文法的アナロジー（syntactic analogy）の正解率を測定せよ．</p>
</blockquote>
<p>最初何を言っているのかわからなかったのですが、どうやら<code>意味的アナロジー</code>と<code>文法的アナロジー</code>は<code>questions-words.txt</code>における分類のようです。</p>
<pre><code>$ cat questions-words.txt | grep &quot;:&quot;
: capital-common-countries
: capital-world
: currency
: city-in-state
: family
: gram1-adjective-to-adverb
: gram2-opposite
: gram3-comparative
: gram4-superlative
: gram5-present-participle
: gram6-nationality-adjective
: gram7-past-tense
: gram8-plural
: gram9-plural-verbs
</code></pre><p>カテゴリ名に<code>gram</code>が含まれるものを<code>文法的アナロジー</code>, そうでないものを<code>意味的アナロジー</code>とします。</p>
<h3 id="メイン-1">メイン</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#f92672">as</span> np

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;questions-words.txt.v1&#34;</span>) <span style="color:#66d9ef">as</span> f:
  lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

semantic, syntactic <span style="color:#f92672">=</span> [], []
<span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
  <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;: gram&#34;</span>):
    ctg <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;syntactic&#34;</span>
  <span style="color:#66d9ef">elif</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;:&#34;</span>):
    ctg <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;semantic&#34;</span>
  <span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">if</span> ctg <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;semantic&#34;</span>:
      semantic<span style="color:#f92672">.</span>append(line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split())
    <span style="color:#66d9ef">if</span> ctg <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;syntactic&#34;</span>:
      syntactic<span style="color:#f92672">.</span>append(line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split())


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calc</span>(data):
  <span style="color:#e6db74">&#34;&#34;&#34;data: List[List[str]{5}]&#34;&#34;&#34;</span>
  ndarray <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(data)
  ans, prd <span style="color:#f92672">=</span> ndarray[:, <span style="color:#ae81ff">3</span>:<span style="color:#ae81ff">5</span>]<span style="color:#f92672">.</span>T
  <span style="color:#66d9ef">return</span> np<span style="color:#f92672">.</span>mean(ans<span style="color:#f92672">==</span>prd)

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;semantic: &#34;</span>, calc(semantic)) <span style="color:#75715e">#&gt; semantic:  0.7411207576953434</span>
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;syntactic: &#34;</span>, calc(syntactic)) <span style="color:#75715e">#&gt; syntactic:  0.7600936768149883</span>

</code></pre></div><p><code>文法的アナロジー</code>の方が正答率は良さげですね。</p>
<h2 id="66-wordsimilarity-353-での評価">66. WordSimilarity-353 での評価</h2>
<blockquote>
<p><a href="http://www.gabrilovich.com/resources/data/wordsim353/wordsim353.html">The WordSimilarity-353 Test Collection</a>の評価データをダウンロードし，単語ベクトルにより計算される類似度のランキングと，人間の類似度判定のランキングの間のスピアマン相関係数を計算せよ．</p>
</blockquote>
<p><a href="https://www.monotalk.xyz/blog/python%E3%81%A7%E7%9B%B8%E9%96%A2%E4%BF%82%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97%E3%82%92%E3%81%99%E3%82%8B/">python で相関係数の計算をする | Monotalk</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s http://www.gabrilovich.com/resources/data/wordsim353/wordsim353.zip -o wordsim353.zip
$ unzip wordsim353.zip
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;combined.tab&#34;</span>) <span style="color:#66d9ef">as</span> f:
  lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">nlp100_66_pre</span>(lines):
  <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
    w1, w2, human <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)
    <span style="color:#66d9ef">if</span> (w1 <span style="color:#f92672">in</span> model <span style="color:#f92672">and</span> w1 <span style="color:#f92672">in</span> model):
      vec <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>similarity(w1, w2)
      <span style="color:#66d9ef">yield</span> np<span style="color:#f92672">.</span>float32(human), vec

score <span style="color:#f92672">=</span> nlp100_66_pre(lines[<span style="color:#ae81ff">1</span>:])
human, vec <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(list(score))<span style="color:#f92672">.</span>T
<span style="color:#f92672">from</span> scipy.stats <span style="color:#f92672">import</span> spearmanr

correlation, pvalue <span style="color:#f92672">=</span> spearmanr(human, vec)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;相関係数&#34;</span>, correlation) <span style="color:#75715e">#&gt; 相関係数 0.7000166486272194</span>
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;p値&#34;</span>, pvalue) <span style="color:#75715e">#&gt; p値 2.86866666051422e-53</span>
</code></pre></div><h2 id="67-k-means-クラスタリング">67. k-means クラスタリング</h2>
<blockquote>
<p>国名に関する単語ベクトルを抽出し，k-means クラスタリングをクラスタ数 k=5 として実行せよ．</p>
</blockquote>
<h3 id="国名を収集する-単語ベクトル化">国名を収集する, 単語ベクトル化</h3>
<p><code>questions-words.txt</code>のカテゴリ<code>capital-common-countries</code>, <code>capital-world</code>から国名を収集する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;questions-words.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
  lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

cots <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
  <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;: currency&#34;</span>):
    <span style="color:#66d9ef">break</span>
  <span style="color:#66d9ef">elif</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;:&#34;</span>):
    <span style="color:#66d9ef">continue</span>
  <span style="color:#66d9ef">else</span>:
    _, a, _, b <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split()
    cots <span style="color:#f92672">+=</span> [a, b]

dct <span style="color:#f92672">=</span> {}
<span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> set(cots):
  <span style="color:#66d9ef">if</span> e <span style="color:#f92672">in</span> model:
    dct[e] <span style="color:#f92672">=</span> model[e]

</code></pre></div><h3 id="sklearn-kmeans-でクラスタリング">sklearn KMeans でクラスタリング</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> sklearn.cluster <span style="color:#f92672">import</span> KMeans
pred <span style="color:#f92672">=</span> KMeans(n_clusters<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)<span style="color:#f92672">.</span>fit_predict(list(dct<span style="color:#f92672">.</span>values()))

<span style="color:#66d9ef">print</span>([list(dct<span style="color:#f92672">.</span>keys())[i] <span style="color:#66d9ef">for</span> i, p <span style="color:#f92672">in</span> enumerate(pred) <span style="color:#66d9ef">if</span> p <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>])
<span style="color:#75715e">#&gt; [&#39;Suriname&#39;, &#39;Nepal&#39;, &#39;Tuvalu&#39;, &#39;Peru&#39;, &#39;Thailand&#39;, &#39;Jamaica&#39;, &#39;Honduras&#39;, &#39;China&#39;, &#39;Dominica&#39;, &#39;Vietnam&#39;, &#39;Fiji&#39;, &#39;Indonesia&#39;, &#39;Bangladesh&#39;, &#39;Bhutan&#39;, &#39;Australia&#39;, &#39;Samoa&#39;, &#39;Guyana&#39;, &#39;Japan&#39;, &#39;Venezuela&#39;, &#39;Cuba&#39;, &#39;Canada&#39;, &#39;Laos&#39;, &#39;Philippines&#39;, &#39;Bahamas&#39;, &#39;Uruguay&#39;, &#39;Belize&#39;, &#39;Nicaragua&#39;, &#39;Chile&#39;, &#39;Ecuador&#39;, &#39;Taiwan&#39;]</span>
</code></pre></div><p>日本が属するラベルは東南アジアと島国という特徴が出ていますね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter
c <span style="color:#f92672">=</span> Counter(pred)
<span style="color:#66d9ef">print</span>(c) <span style="color:#75715e">#&gt; Counter({0: 30, 4: 27, 1: 25, 2: 19, 3: 15})</span>
</code></pre></div><h2 id="68-ward-法によるクラスタリング">68. Ward 法によるクラスタリング</h2>
<blockquote>
<p>国名に関する単語ベクトルに対し，Ward 法による階層型クラスタリングを実行せよ．さらに，クラスタリング結果をデンドログラムとして可視化せよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> scipy.cluster.hierarchy <span style="color:#f92672">import</span> dendrogram, linkage
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#f92672">as</span> plt

plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">12</span>))
Z <span style="color:#f92672">=</span> linkage(list(dct<span style="color:#f92672">.</span>values()), method<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;weighted&#34;</span>, metric<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;euclidean&#34;</span>)
dendrogram(Z, labels<span style="color:#f92672">=</span>list(dct<span style="color:#f92672">.</span>keys()))
plt<span style="color:#f92672">.</span>xticks(fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div>
    <img src="/imgs/nlp100_07/01.png"  alt="68結果"  class="center"  style="border-radius: 8px;"  />


<h2 id="69-t-sne-による可視化">69. t-SNE による可視化</h2>
<blockquote>
<p>ベクトル空間上の国名に関する単語ベクトルを t-SNE で可視化せよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> sklearn.manifold <span style="color:#f92672">import</span> TSNE
tsne <span style="color:#f92672">=</span> TSNE()
tsne<span style="color:#f92672">.</span>fit(list(dct<span style="color:#f92672">.</span>values()))
</code></pre></div><pre><code>TSNE(angle=0.5, early_exaggeration=12.0, init='random', learning_rate=200.0,
     method='barnes_hut', metric='euclidean', min_grad_norm=1e-07,
     n_components=2, n_iter=1000, n_iter_without_progress=300, n_jobs=None,
     perplexity=30.0, random_state=None, verbose=0)
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span>))
plt<span style="color:#f92672">.</span>scatter(tsne<span style="color:#f92672">.</span>embedding_[:, <span style="color:#ae81ff">0</span>], tsne<span style="color:#f92672">.</span>embedding_[:, <span style="color:#ae81ff">1</span>])
<span style="color:#66d9ef">for</span> (x, y), name <span style="color:#f92672">in</span> zip(tsne<span style="color:#f92672">.</span>embedding_, list(dct<span style="color:#f92672">.</span>keys())):
    <span style="color:#66d9ef">if</span> name <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Japan&#34;</span>:
      plt<span style="color:#f92672">.</span>annotate(name, (x, y), color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>)
    <span style="color:#66d9ef">else</span>:
      plt<span style="color:#f92672">.</span>annotate(name, (x, y))
plt<span style="color:#f92672">.</span>show()
</code></pre></div>
    <img src="/imgs/nlp100_07/02.png"  alt="69結果"  class="center"  style="border-radius: 8px;"  />


]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #6 後半</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-06_2/</link>
            <pubDate>Sun, 07 Jun 2020 04:24:15 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-06_2/</guid>
            <description>言語処理 100 本ノック(第 6 章: 機械学習) 使用するパラメータや変数の一部は前半で使用したものを使っています。 55. 混同行列の作成 52 で学習したロジステ</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch06.html">言語処理 100 本ノック(第 6 章: 機械学習)</a></p>
<p>使用するパラメータや変数の一部は<a href="https://tomowarkar.github.io/blog/posts/nlp100-06/">前半</a>で使用したものを使っています。</p>
<h2 id="55-混同行列の作成">55. 混同行列の作成</h2>
<blockquote>
<p>52 で学習したロジスティック回帰モデルの混同行列（confusion matrix）を，学習データおよび評価データ上で作成せよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> sklearn.metrics <span style="color:#f92672">import</span> confusion_matrix

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;訓練データ&#34;</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;confusion matrix = </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, confusion_matrix(y_true<span style="color:#f92672">=</span>train_Y, y_pred<span style="color:#f92672">=</span>train_Y_pred))
<span style="color:#66d9ef">print</span>()
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;検証データ&#34;</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;confusion matrix = </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, confusion_matrix(y_true<span style="color:#f92672">=</span>valid_Y, y_pred<span style="color:#f92672">=</span>valid_Y_pred))
</code></pre></div><pre><code>訓練データ
confusion matrix =
 [[4522   12    0   23]
 [  13 4165    0    2]
 [  10    7  727    0]
 [  50   17    1 1135]]

検証データ
confusion matrix =
 [[511  11   3  18]
 [ 13 524   2   3]
 [ 15  11  62   4]
 [ 33  26   0 100]]
</code></pre><p><a href="../nlp100-06/#%E5%90%84%E3%82%AB%E3%83%86%E3%82%B4%E3%83%AA%E4%BA%8B%E4%BE%8B%E6%95%B0">前回記事</a>と比較してみて要素数は合っていそうです。</p>
<h2 id="56-適合率再現率f1-スコアの計測">56. 適合率，再現率，F1 スコアの計測</h2>
<blockquote>
<p>52 で学習したロジスティック回帰モデルの適合率，再現率，F1 スコアを，評価データ上で計測せよ．カテゴリごとに適合率，再現率，F1 スコアを求め，カテゴリごとの性能をマイクロ平均（micro-average）とマクロ平均（macro-average）で統合せよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> sklearn.metrics <span style="color:#f92672">import</span> precision_score, recall_score, f1_score

<span style="color:#75715e"># 適合率，再現率，F1スコア</span>
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;適合率: &#39;</span>, precision_score(y_true<span style="color:#f92672">=</span>valid_Y, y_pred<span style="color:#f92672">=</span>valid_Y_pred, average<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;macro&#39;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;再現率: &#39;</span>, recall_score(y_true<span style="color:#f92672">=</span>valid_Y, y_pred<span style="color:#f92672">=</span>valid_Y_pred, average<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;macro&#39;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;F1スコア: &#39;</span>, f1_score(y_true<span style="color:#f92672">=</span>valid_Y, y_pred<span style="color:#f92672">=</span>valid_Y_pred, average<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;macro&#39;</span>))
</code></pre></div><pre><code class="language-out" data-lang="out">適合率:  0.8837034234422294
再現率:  0.8026754172370425
F1スコア:  0.8353613834243956
</code></pre><p><code>適合率</code>は分類されたものが実際にそのクラスである割合、</p>
<p><code>再現率</code>はあるクラスのうち、実際にそのクラスに分類された割合</p>
<p><code>F1スコア</code>は適合率と再現率の調和平均</p>
<h2 id="57-特徴量の重みの確認">57. 特徴量の重みの確認</h2>
<blockquote>
<p>52 で学習したロジスティック回帰モデルの中で，重みの高い特徴量トップ 10 と，重みの低い特徴量トップ 10 を確認せよ.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">weights <span style="color:#f92672">=</span> {}
<span style="color:#66d9ef">for</span> i,w <span style="color:#f92672">in</span> enumerate(lr<span style="color:#f92672">.</span>coef_[<span style="color:#ae81ff">0</span>]):
  weights[dct[i]] <span style="color:#f92672">=</span> w

sw <span style="color:#f92672">=</span> sorted(weights<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>])

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;低いの&#34;</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>sw[:<span style="color:#ae81ff">10</span>], sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
<span style="color:#66d9ef">print</span>()
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;重いの&#34;</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>sw[<span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>:], sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>低いの
('Aereo', -1.4943036354257244)
('Ebola', -1.1926602012817413)
('past', -1.1663878014633782)
('virus', -1.1543506450531948)
('video', -1.1108024121277575)
('Hat', -1.101384620566056)
('baby', -1.0766692762320573)
('child', -1.0604199141307464)
('soda', -1.0543633796789418)
('Activision', -1.041767185267918)

重いの
('Uber', 1.4360522689124577)
('profit', 1.456241534603359)
('China', 1.4986359849111417)
('bank', 1.5456660201232657)
('Argentina', 1.5867187020325588)
('ECB', 1.7131083455287186)
('Yellen', 1.749698918090413)
('Fed', 1.8263312436827537)
('Ukraine', 1.8665880775606447)
('Bank', 1.9822040580267537)
</code></pre><h2 id="58-正則化パラメータの変更">58. 正則化パラメータの変更</h2>
<blockquote>
<p>ロジスティック回帰モデルを学習するとき，正則化パラメータを調整することで，学習時の過学習（overfitting）の度合いを制御できる．異なる正則化パラメータでロジスティック回帰モデルを学習し，学習データ，検証データ，および評価データ上の正解率を求めよ．実験の結果は，正則化パラメータを横軸，正解率を縦軸としたグラフにまとめよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> sklearn.linear_model <span style="color:#f92672">import</span> LogisticRegression
<span style="color:#f92672">from</span> sklearn.metrics <span style="color:#f92672">import</span> accuracy_score

lrl1 <span style="color:#f92672">=</span> LogisticRegression(penalty<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;l1&#34;</span>, solver<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;liblinear&#39;</span>, max_iter<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>)
lrl1<span style="color:#f92672">.</span>fit(train_X, train_Y)

train_Y_pred <span style="color:#f92672">=</span> lrl1<span style="color:#f92672">.</span>predict(train_X)
valid_Y_pred <span style="color:#f92672">=</span> lrl1<span style="color:#f92672">.</span>predict(valid_X)

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;訓練データ:&#39;</span>, accuracy_score(y_true<span style="color:#f92672">=</span>train_Y, y_pred<span style="color:#f92672">=</span>train_Y_pred))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;検証データ:&#39;</span>, accuracy_score(y_true<span style="color:#f92672">=</span>valid_Y, y_pred<span style="color:#f92672">=</span>valid_Y_pred))
</code></pre></div><pre><code>訓練データ: 0.9514226881317859
検証データ: 0.875748502994012
</code></pre><p><a href="../nlp100-06/#52-%E5%AD%A6%E7%BF%92">前回記事</a>をまんま流用<code>L1正則化</code>で学習させました。</p>
<h2 id="59-ハイパーパラメータの探索">59. ハイパーパラメータの探索</h2>
<blockquote>
<p>学習アルゴリズムや学習パラメータを変えながら，カテゴリ分類モデルを学習せよ．検証データ上の正解率が最も高くなる学習アルゴリズム・パラメータを求めよ．また，その学習アルゴリズム・パラメータを用いたときの評価データ上の正解率を求めよ．</p>
</blockquote>
<p>アルゴリズム<code>l1</code>, <code>l2</code>においてそれぞれ<code>C</code>を<code>1/100, 1/10, 1, 10, 100</code>と変化させつつ学習結果を見る。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">params <span style="color:#f92672">=</span> [{
    <span style="color:#e6db74">&#34;model&#34;</span>: LogisticRegression,
    <span style="color:#e6db74">&#34;penalty&#34;</span>: penalty,
    <span style="color:#e6db74">&#34;solver&#34;</span>: solver,
    <span style="color:#e6db74">&#34;C&#34;</span>: <span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>i,
    }
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
    <span style="color:#66d9ef">for</span> penalty, solver <span style="color:#f92672">in</span>  [(<span style="color:#e6db74">&#34;l1&#34;</span>, <span style="color:#e6db74">&#34;liblinear&#34;</span>), (<span style="color:#e6db74">&#34;l2&#34;</span>, <span style="color:#e6db74">&#34;lbfgs&#34;</span>)]]

<span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> params:
  lr <span style="color:#f92672">=</span> p[<span style="color:#e6db74">&#34;model&#34;</span>](C<span style="color:#f92672">=</span>p[<span style="color:#e6db74">&#34;C&#34;</span>], penalty<span style="color:#f92672">=</span>p[<span style="color:#e6db74">&#34;penalty&#34;</span>], solver<span style="color:#f92672">=</span>p[<span style="color:#e6db74">&#34;solver&#34;</span>], max_iter<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>)
  lr<span style="color:#f92672">.</span>fit(train_X, train_Y)

  valid_Y_pred <span style="color:#f92672">=</span> lr<span style="color:#f92672">.</span>predict(valid_X)
  acc <span style="color:#f92672">=</span> accuracy_score(y_true<span style="color:#f92672">=</span>valid_Y, y_pred<span style="color:#f92672">=</span>valid_Y_pred)
  p[<span style="color:#e6db74">&#34;acc&#34;</span>] <span style="color:#f92672">=</span> acc

params<span style="color:#f92672">.</span>sort(key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;acc&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>params, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l1', 'solver': 'liblinear', 'C': 0.01, 'acc': 0.5883233532934131}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l2', 'solver': 'lbfgs', 'C': 0.01, 'acc': 0.7567365269461078}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l1', 'solver': 'liblinear', 'C': 0.1, 'acc': 0.7574850299401198}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l2', 'solver': 'lbfgs', 'C': 0.1, 'acc': 0.8562874251497006}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l1', 'solver': 'liblinear', 'C': 1, 'acc': 0.875748502994012}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l1', 'solver': 'liblinear', 'C': 100, 'acc': 0.8809880239520959}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l2', 'solver': 'lbfgs', 'C': 100, 'acc': 0.8832335329341318}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l1', 'solver': 'liblinear', 'C': 10, 'acc': 0.8884730538922155}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l2', 'solver': 'lbfgs', 'C': 1, 'acc': 0.8959580838323353}
{'model': &lt;class 'sklearn.linear_model._logistic.LogisticRegression'&gt;, 'penalty': 'l2', 'solver': 'lbfgs', 'C': 10, 'acc': 0.8974550898203593}
</code></pre><p>正規化度合い(C 値)が影響を与えているのがよくわかりますね。</p>
<p>その中でも<code>L2正規化</code>の<code>C=10</code>が一番いい結果になりました。</p>
]]></content>
        </item>
        
        <item>
            <title>opencv ランダムノイズ画像の生成</title>
            <link>https://tomowarkar.github.io/blog/posts/random_noise_video/</link>
            <pubDate>Sat, 06 Jun 2020 16:16:14 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/random_noise_video/</guid>
            <description>忘れるので備忘録 コード import cv2 import numpy as np from tqdm import tqdm h, w = 400, 600 size = (w, h) fps = 60 filename = &amp;#34;hoge.mp4&amp;#34; fourcc = cv2.VideoWriter_fourcc(*&amp;#34;mp4v&amp;#34;) video = cv2.VideoWriter(filename, fourcc, fps, size) for _ in tqdm(range(fps * 10)): img = np.random.randint(0, 256, (h, w, 3), np.uint8) video.write(img) video.release() 画像を用いる場合 img</description>
            <content type="html"><![CDATA[<p>忘れるので備忘録</p>
<h2 id="コード">コード</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> cv2
<span style="color:#f92672">import</span> numpy <span style="color:#f92672">as</span> np
<span style="color:#f92672">from</span> tqdm <span style="color:#f92672">import</span> tqdm

h, w <span style="color:#f92672">=</span> <span style="color:#ae81ff">400</span>, <span style="color:#ae81ff">600</span>
size <span style="color:#f92672">=</span> (w, h)
fps <span style="color:#f92672">=</span> <span style="color:#ae81ff">60</span>
filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hoge.mp4&#34;</span>

fourcc <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>VideoWriter_fourcc(<span style="color:#f92672">*</span><span style="color:#e6db74">&#34;mp4v&#34;</span>)
video <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>VideoWriter(filename, fourcc, fps, size)

<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> tqdm(range(fps <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>)):
    img <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">256</span>, (h, w, <span style="color:#ae81ff">3</span>), np<span style="color:#f92672">.</span>uint8)
    video<span style="color:#f92672">.</span>write(img)
video<span style="color:#f92672">.</span>release()

</code></pre></div><h2 id="画像を用いる場合">画像を用いる場合</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">img <span style="color:#f92672">=</span> cv2<span style="color:#f92672">.</span>imread(<span style="color:#e6db74">&#34;path/to/img&#34;</span>, <span style="color:#ae81ff">1</span>)
h, w, _ <span style="color:#f92672">=</span> img<span style="color:#f92672">.</span>shape
</code></pre></div><h2 id="memo">memo</h2>
<ul>
<li>出力動画のバイト数が 0 なのは入出力のサイズが合っていないのが原因</li>
<li>動画のコーデックは<code>avc1</code>の方がいい時もある</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Speed Wi-Fi 接続端末からデータ通信量を確認する</title>
            <link>https://tomowarkar.github.io/blog/posts/speed_wifi/</link>
            <pubDate>Sun, 31 May 2020 19:37:06 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/speed_wifi/</guid>
            <description>モチベーション Speed Wi-Fi NEXT は直近 3 日の通信量が 10GB を超えると速度制限がかかるので, Mac からでもデータ通信量がわかるようにしたい。 参考 【W01】Spee</description>
            <content type="html"><![CDATA[<h2 id="モチベーション">モチベーション</h2>
<p>Speed Wi-Fi NEXT は直近 3 日の通信量が 10GB を超えると速度制限がかかるので, Mac からでもデータ通信量がわかるようにしたい。</p>
<h2 id="参考">参考</h2>
<p><a href="https://faq.uqwimax.jp/faq/show/1613?site_domain=wimax">【W01】Speed Wi-Fi NEXT 設定ツールにログインする方法は？ | よくあるご質問｜【公式】UQ WiMAX ｜ UQ コミュニケーションズ</a></p>
<h2 id="メインコード">メインコード</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> loguru <span style="color:#f92672">import</span> logger

<span style="color:#f92672">from</span> selenium <span style="color:#f92672">import</span> webdriver
<span style="color:#f92672">from</span> selenium.common.exceptions <span style="color:#f92672">import</span> TimeoutException
<span style="color:#f92672">from</span> selenium.webdriver.chrome.options <span style="color:#f92672">import</span> Options
<span style="color:#f92672">from</span> selenium.webdriver.common.by <span style="color:#f92672">import</span> By
<span style="color:#f92672">from</span> selenium.webdriver.support <span style="color:#f92672">import</span> expected_conditions <span style="color:#66d9ef">as</span> EC
<span style="color:#f92672">from</span> selenium.webdriver.support.ui <span style="color:#f92672">import</span> WebDriverWait


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BrowserOperator</span>(object):
    <span style="color:#66d9ef">def</span> __init__(self, headless<span style="color:#f92672">=</span>False):
        options <span style="color:#f92672">=</span> Options()
        options<span style="color:#f92672">.</span>headless <span style="color:#f92672">=</span> headless
        self<span style="color:#f92672">.</span>driver <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>Chrome(options<span style="color:#f92672">=</span>options)

    <span style="color:#66d9ef">def</span> __del__(self):
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>close()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wait</span>(self, f, until_not<span style="color:#f92672">=</span>False):
        wt <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
        <span style="color:#66d9ef">try</span>:
            <span style="color:#66d9ef">if</span> until_not:
                <span style="color:#66d9ef">return</span> WebDriverWait(self<span style="color:#f92672">.</span>driver, wt)<span style="color:#f92672">.</span>until_not(f)
            <span style="color:#66d9ef">return</span> WebDriverWait(self<span style="color:#f92672">.</span>driver, wt)<span style="color:#f92672">.</span>until(f)
        <span style="color:#66d9ef">except</span> TimeoutException:
            logger<span style="color:#f92672">.</span>error(<span style="color:#e6db74">&#34;[timeout]&#34;</span>)
            <span style="color:#66d9ef">return</span> False

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get</span>(self, url):
        logger<span style="color:#f92672">.</span>debug(f<span style="color:#e6db74">&#34;[get] {url}&#34;</span>)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>get(url)


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SpeedwifiNext</span>(BrowserOperator):
    BASE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://speedwifi-next.home/html/&#34;</span>

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">login</span>(self, user: str, pswd: str) <span style="color:#f92672">-&gt;</span> None:
        self<span style="color:#f92672">.</span>get(self<span style="color:#f92672">.</span>BASE <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;login.htm&#34;</span>)

        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;user_type&#34;</span>)<span style="color:#f92672">.</span>send_keys(user)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;input_password&#34;</span>)<span style="color:#f92672">.</span>send_keys(pswd)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;login&#34;</span>)<span style="color:#f92672">.</span>click()

        status <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>wait(EC<span style="color:#f92672">.</span>url_to_be(self<span style="color:#f92672">.</span>BASE <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;status.htm&#34;</span>))
        <span style="color:#66d9ef">if</span> status:
            logger<span style="color:#f92672">.</span>debug(<span style="color:#e6db74">&#34;login success&#34;</span>)
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#34;login failed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Please check your User and Pass!&#34;</span>)

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">statistics</span>(self) <span style="color:#f92672">-&gt;</span> None:
        self<span style="color:#f92672">.</span>get(self<span style="color:#f92672">.</span>BASE <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;statistics.htm&#34;</span>)
        self<span style="color:#f92672">.</span>wait(
            EC<span style="color:#f92672">.</span>text_to_be_present_in_element((By<span style="color:#f92672">.</span>ID, <span style="color:#e6db74">&#34;label_usedData&#34;</span>), <span style="color:#e6db74">&#34;0 KB&#34;</span>),
            until_not<span style="color:#f92672">=</span>True,
        )

        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f</span>(x) <span style="color:#f92672">-&gt;</span> str:
            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(x)<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;innerText&#34;</span>)

        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;1ヶ月間：&#34;</span>, f(<span style="color:#e6db74">&#34;label_usedData&#34;</span>))
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;前日までの3日間：&#34;</span>, f(<span style="color:#e6db74">&#34;label_usedData_yesterday&#34;</span>))
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;本日までの3日間：&#34;</span>, f(<span style="color:#e6db74">&#34;label_usedData_today&#34;</span>))


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    user <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    pswd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

    sn <span style="color:#f92672">=</span> SpeedwifiNext(headless<span style="color:#f92672">=</span>True)
    sn<span style="color:#f92672">.</span>login(user, pswd)
    sn<span style="color:#f92672">.</span>statistics()

</code></pre></div><h2 id="動作確認">動作確認</h2>
<pre><code>2020-05-31 19:34:22.570 | DEBUG    | __main__:get:31 - [get] http://speedwifi-next.home/html/login.htm
2020-05-31 19:34:25.238 | DEBUG    | __main__:login:47 - login success
2020-05-31 19:34:25.238 | DEBUG    | __main__:get:31 - [get] http://speedwifi-next.home/html/statistics.htm
1ヶ月間： 129.68 GB
前日までの3日間： 12.51 GB
本日までの3日間： 13.77 GB
</code></pre><h2 id="後書き">後書き</h2>
<p>python のログ関連ってあまり素直に使えないですよね<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>そんな中<code>Loguru</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>という ライブラリを見つけたので使ってみました。</p>
<ul>
<li>デフォルトのログレベルが DEBUG</li>
<li>CUI カラー表示</li>
<li>import するだけで使える</li>
</ul>
<p>とかなり使い勝手が良かったです。今後簡単なデバックにも<code>print</code>に変わり使って行きたいなと思いました。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://qiita.com/amedama/items/b856b2f30c2f38665701">ログ出力のための print と import logging はやめてほしい - Qiita</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://python.libhunt.com/loguru-alternatives">Loguru Alternatives - Python Logging | LibHunt</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #6 前半</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-06/</link>
            <pubDate>Sat, 30 May 2020 17:16:34 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-06/</guid>
            <description>言語処理 100 本ノック(第 6 章: 機械学習) 50. データの入手・整形 News Aggregator Data Setをダウンロードし、以下の要領で学習データ（train.txt），検証デ</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch06.html">言語処理 100 本ノック(第 6 章: 機械学習)</a></p>
<h2 id="50-データの入手整形">50. データの入手・整形</h2>
<blockquote>
<p><a href="https://archive.ics.uci.edu/ml/datasets/News+Aggregator">News Aggregator Data Set</a>をダウンロードし、以下の要領で学習データ（train.txt），検証データ（valid.txt），評価データ（test.txt）を作成せよ．</p>
<ol>
<li>ダウンロードした zip ファイルを解凍し，readme.txt の説明を読む．</li>
<li>情報源（publisher）が&quot;Reuters&rdquo;, &ldquo;Huffington Post&rdquo;, &ldquo;Businessweek&rdquo;, &ldquo;Contactmusic.com&rdquo;, &ldquo;Daily Mail&quot;の事例（記事）のみを抽出する．</li>
<li>抽出された事例をランダムに並び替える．</li>
<li>抽出された事例の 80%を学習データ，残りの 10%ずつを検証データと評価データに分割し，それぞれ train.txt，valid.txt，test.txt というファイル名で保存する．ファイルには，１行に１事例を書き出すこととし，カテゴリ名と記事見出しのタブ区切り形式とせよ（このファイルは後に問題 70 で再利用する）．</li>
</ol>
<p>学習データと評価データを作成したら，各カテゴリの事例数を確認せよ．</p>
</blockquote>
<h3 id="ダウンロードと解凍">ダウンロードと解凍</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/00359/NewsAggregatorDataset.zip
$ unzip NewsAggregatorDataset.zip
$ cat readme.txt
</code></pre></div><h3 id="メインコード">メインコード</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;newsCorpora.csv&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

<span style="color:#75715e"># 2. 記事の抽出</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filter_articles</span>(lines):
    allow_publishers <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Reuters&#34;</span>, <span style="color:#e6db74">&#34;Huffington Post&#34;</span>, <span style="color:#e6db74">&#34;Businessweek&#34;</span>, <span style="color:#e6db74">&#34;Contactmusic.com&#34;</span>, <span style="color:#e6db74">&#34;Daily Mail&#34;</span>]
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        _, title, _, publisher, category, <span style="color:#f92672">*</span>_  <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)
        <span style="color:#66d9ef">if</span> publisher <span style="color:#f92672">in</span> allow_publishers:
            <span style="color:#66d9ef">yield</span> <span style="color:#e6db74">&#34;{}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(category, title)

allow_articles <span style="color:#f92672">=</span> list(filter_articles(lines))
<span style="color:#66d9ef">print</span>(len(allow_articles)) <span style="color:#75715e">#&gt; 13356</span>

<span style="color:#75715e"># 3. 並び替え</span>
<span style="color:#f92672">import</span> random
random<span style="color:#f92672">.</span>seed(<span style="color:#ae81ff">0</span>)
random<span style="color:#f92672">.</span>shuffle(allow_articles)

<span style="color:#75715e"># 4. データの分割と書き出し</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write_articles</span>(fname, lines):
    <span style="color:#66d9ef">with</span> open(fname, mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;x&#39;</span>) <span style="color:#66d9ef">as</span> f:
        f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(lines))

len_allow_articles <span style="color:#f92672">=</span> len(allow_articles)
s1, s2 <span style="color:#f92672">=</span> int(len_allow_articles<span style="color:#f92672">*</span><span style="color:#ae81ff">0.8</span>), int(len_allow_articles<span style="color:#f92672">*</span><span style="color:#ae81ff">0.9</span>)
train, valid, test <span style="color:#f92672">=</span> allow_articles[:s1], allow_articles[s1:s2], allow_articles[s2:]

write_articles(<span style="color:#e6db74">&#34;train.txt&#34;</span>, train)
write_articles(<span style="color:#e6db74">&#34;valid.txt&#34;</span>, valid)
write_articles(<span style="color:#e6db74">&#34;test.txt&#34;</span>, test)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">! cat train.txt | wc -l <span style="color:#75715e"># 10684</span>
! cat valid.txt | wc -l <span style="color:#75715e"># 1336</span>
! cat test.txt | wc -l <span style="color:#75715e"># 1336</span>
</code></pre></div><h4 id="memo">memo</h4>
<p>おそらく csv 形式の問題で<code>pandas</code>を使って読み込むと読み込み後の行数が変わる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat newsCorpora.csv | wc -l <span style="color:#75715e"># 422937</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pandas <span style="color:#f92672">as</span> pd
df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;newsCorpora.csv&#34;</span>,sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>, header<span style="color:#f92672">=</span>None)
<span style="color:#66d9ef">print</span>(len(df<span style="color:#f92672">.</span>index)) <span style="color:#75715e">#&gt; 422419</span>
</code></pre></div><h5 id="検証">検証</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;newsCorpora.csv&#34;</span>,sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>, header<span style="color:#f92672">=</span>None, engine<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;python&#34;</span>, error_bad_lines<span style="color:#f92672">=</span>False)
</code></pre></div><pre><code># エラー一部抽出
Skipping line 9180: '	' expected after '&quot;'
Skipping line 10581: '	' expected after '&quot;'
</code></pre><h5 id="他の方法">他の方法</h5>
<p><code>cat newsCorpora.csv | awk -F '\t' '{print $4}'</code> とかでうまく分けられると思う。</p>
<h3 id="各カテゴリ事例数">各カテゴリ事例数</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">echo <span style="color:#e6db74">&#34;train.txt&#34;</span>; cut -f <span style="color:#ae81ff">1</span> train.txt | sort | uniq -c | sort -r; echo;
echo <span style="color:#e6db74">&#34;valid.txt&#34;</span>; cut -f <span style="color:#ae81ff">1</span> valid.txt | sort | uniq -c | sort -r; echo;
echo <span style="color:#e6db74">&#34;test.txt&#34;</span>; cut -f <span style="color:#ae81ff">1</span> test.txt | sort | uniq -c | sort -r; echo;
</code></pre></div><pre><code>train.txt
4557 b
4180 e
1203 t
 744 m

valid.txt
 543 b
 542 e
 159 t
  92 m

test.txt
 572 e
 527 b
 163 t
  74 m


</code></pre><h2 id="51-特徴量抽出">51. 特徴量抽出</h2>
<blockquote>
<p>学習データ，検証データ，評価データから特徴量を抽出し，それぞれ train.feature.txt，valid.feature.txt，test.feature.txt というファイル名で保存せよ． なお，カテゴリ分類に有用そうな特徴量は各自で自由に設計せよ．記事の見出しを単語列に変換したものが最低限のベースラインとなるであろう．</p>
</blockquote>
<p>いまいち何をすれば良いのかわからないので以下の処理をしようと思う</p>
<ol>
<li>記事見出しのトークン化</li>
<li>クリーニングとフィルタリング</li>
<li>レンマ化</li>
</ol>
<h3 id="中間ファイルの作成">中間ファイルの作成</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> spacy

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_middle</span>(fname1, fname2):
  <span style="color:#66d9ef">with</span> open (fname1) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

  nlp <span style="color:#f92672">=</span> spacy<span style="color:#f92672">.</span>load(<span style="color:#e6db74">&#34;en_core_web_sm&#34;</span>)
  text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
  <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
    category, topic <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)
    doc <span style="color:#f92672">=</span> nlp(topic)
    tokens <span style="color:#f92672">=</span> [e<span style="color:#f92672">.</span>lemma_ <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc <span style="color:#66d9ef">if</span> e<span style="color:#f92672">.</span>pos_ <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#34;PUNCT&#34;</span>, <span style="color:#e6db74">&#34;SYM&#34;</span>, <span style="color:#e6db74">&#34;NUM&#34;</span>, <span style="color:#e6db74">&#34;SPACE&#34;</span>] <span style="color:#f92672">and</span> <span style="color:#f92672">not</span>  e<span style="color:#f92672">.</span>is_stop]
    text <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;{}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(category, <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(tokens))

  <span style="color:#66d9ef">with</span> open (fname2, mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;x&#39;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(text)

generate_middle(<span style="color:#e6db74">&#34;train.txt&#34;</span>, <span style="color:#e6db74">&#34;train.middle.txt&#34;</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ diff &lt;<span style="color:#f92672">(</span>head -n <span style="color:#ae81ff">5</span> train.txt<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>head -n <span style="color:#ae81ff">5</span> train.middle.txt<span style="color:#f92672">)</span>
</code></pre></div><pre><code>1,5c1,5
&lt; t	White House Science Fair Will Focus On Girls In STEM
&lt; b	US STOCKS-Wall St dips after Fed's Bullard talks about rates
&lt; m	UPDATE 1-Some on downed Malaysian plane were heading to AIDS conference
&lt; b	FOREX-Euro struggles after German data, nears 2-year low vs sterling
&lt; b	Fitch Affirms Tula Region at 'BB'; Outlook Stable
---
&gt; t	White House Science Fair focus girl STEM
&gt; b	stock Wall St dip Fed Bullard talk rate
&gt; m	UPDATE down malaysian plane head AIDS conference
&gt; b	FOREX Euro struggle german datum near low vs sterling
&gt; b	Fitch Affirms Tula Region BB Outlook Stable
</code></pre><h3 id="train-データを元に特徴量作成">train データを元に特徴量作成</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> gensim <span style="color:#f92672">import</span> corpora

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;train.middle.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
  lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

docs <span style="color:#f92672">=</span> [line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines]
tokens <span style="color:#f92672">=</span> [doc<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>) <span style="color:#66d9ef">for</span> doc <span style="color:#f92672">in</span> docs]

dct <span style="color:#f92672">=</span> corpora<span style="color:#f92672">.</span>Dictionary(tokens)
<span style="color:#66d9ef">print</span>(len(dct)) <span style="color:#75715e">#&gt; 13945</span>

dct<span style="color:#f92672">.</span>filter_extremes(no_below<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
<span style="color:#66d9ef">print</span>(len(dct)) <span style="color:#75715e">#&gt; 7469</span>

dct<span style="color:#f92672">.</span>save_as_text(<span style="color:#e6db74">&#39;train.feature.dict.txt&#39;</span>)
</code></pre></div><p>参考: <a href="https://tedboy.github.io/nlps/generated/generated/gensim.corpora.Dictionary.filter_extremes.html">https://tedboy.github.io/nlps/generated/generated/gensim.corpora.Dictionary.filter_extremes.html</a></p>
<p>参考: <a href="https://qiita.com/tatsuya-miyamoto/items/f505dfa8d5307f8c6e98">https://qiita.com/tatsuya-miyamoto/items/f505dfa8d5307f8c6e98</a></p>
<h2 id="52-学習">52. 学習</h2>
<blockquote>
<p>51 で構築した学習データを用いて，ロジスティック回帰モデルを学習せよ．</p>
</blockquote>
<h3 id="トレーニングデータ検証データの読み込み">トレーニングデータ、検証データの読み込み</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> itertools <span style="color:#f92672">import</span> chain

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_f</span>(path):
  <span style="color:#66d9ef">with</span> open(path) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

  docs <span style="color:#f92672">=</span> [line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>) <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines]
  flatten_docs <span style="color:#f92672">=</span> list(chain<span style="color:#f92672">.</span>from_iterable(docs))
  cats <span style="color:#f92672">=</span> flatten_docs[::<span style="color:#ae81ff">2</span>]
  texts <span style="color:#f92672">=</span> flatten_docs[<span style="color:#ae81ff">1</span>::<span style="color:#ae81ff">2</span>]

  <span style="color:#66d9ef">return</span> cats, texts

train_cats, train_texts <span style="color:#f92672">=</span> read_f(<span style="color:#e6db74">&#34;train.middle.txt&#34;</span>)
valid_cats, valid_texts <span style="color:#f92672">=</span> read_f(<span style="color:#e6db74">&#34;valid.middle.txt&#34;</span>)
</code></pre></div><h3 id="学習データの作成">学習データの作成</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> gensim <span style="color:#f92672">import</span> corpora

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">c_mat</span>(texts, dct):
  tokens <span style="color:#f92672">=</span> [text<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>) <span style="color:#66d9ef">for</span> text <span style="color:#f92672">in</span> texts]
  corpus <span style="color:#f92672">=</span> [dct<span style="color:#f92672">.</span>doc2bow(token) <span style="color:#66d9ef">for</span> token <span style="color:#f92672">in</span> tokens]

  NUM <span style="color:#f92672">=</span> len(dct)
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">corpus_to_list</span>(arr):
    ll <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> NUM
    <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> arr:
      ll[k] <span style="color:#f92672">=</span> v
    <span style="color:#66d9ef">return</span> ll

  <span style="color:#66d9ef">return</span>  [corpus_to_list(c) <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> corpus]

dct <span style="color:#f92672">=</span> corpora<span style="color:#f92672">.</span>Dictionary<span style="color:#f92672">.</span>load_from_text(<span style="color:#e6db74">&#39;train.feature.dict.txt&#39;</span>)
train_X <span style="color:#f92672">=</span> c_mat(train_texts, dct)
valid_X <span style="color:#f92672">=</span> c_mat(valid_texts, dct)

cat_d <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;b&#34;</span> : <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;e&#34;</span> : <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;m&#34;</span> : <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;t&#34;</span> : <span style="color:#ae81ff">4</span>}
train_Y <span style="color:#f92672">=</span> [cat_d[e] <span style="color:#66d9ef">if</span> cat_d<span style="color:#f92672">.</span>get(e) <span style="color:#66d9ef">else</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> train_cats]
valid_Y <span style="color:#f92672">=</span> [cat_d[e] <span style="color:#66d9ef">if</span> cat_d<span style="color:#f92672">.</span>get(e) <span style="color:#66d9ef">else</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> valid_cats]

<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>map(len, [train_X, train_Y, valid_X, valid_Y])) <span style="color:#75715e">#&gt; 10684 10684 1336 1336</span>
</code></pre></div><h3 id="フィッティング">フィッティング</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> sklearn.linear_model <span style="color:#f92672">import</span> LogisticRegression
lr <span style="color:#f92672">=</span> LogisticRegression(max_iter<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>)
lr<span style="color:#f92672">.</span>fit(train_X, train_Y)
</code></pre></div><pre><code>LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
</code></pre><p>参考: <a href="https://qiita.com/nymwa/items/774ca6c542c1eaff160d">https://qiita.com/nymwa/items/774ca6c542c1eaff160d</a></p>
<h2 id="53-予測">53. 予測</h2>
<blockquote>
<p>52 で学習したロジスティック回帰モデルを用い，与えられた記事見出しからカテゴリとその予測確率を計算するプログラムを実装せよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">train_Y_pred <span style="color:#f92672">=</span> lr<span style="color:#f92672">.</span>predict(train_X)
valid_Y_pred <span style="color:#f92672">=</span> lr<span style="color:#f92672">.</span>predict(valid_X)

train_Y_prob <span style="color:#f92672">=</span> list(map(max, lr<span style="color:#f92672">.</span>predict_proba(train_X)))
valid_Y_prob <span style="color:#f92672">=</span> list(map(max, lr<span style="color:#f92672">.</span>predict_proba(valid_X)))
</code></pre></div><p>予測カテゴリと確率の導出だけで許してください。</p>
<h2 id="54-正解率の計測">54. 正解率の計測</h2>
<blockquote>
<p>52 で学習したロジスティック回帰モデルの正解率を，学習データおよび評価データ上で計測せよ．</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> sklearn.metrics <span style="color:#f92672">import</span> accuracy_score

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;訓練データ&#34;</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;accuracy = &#39;</span>, accuracy_score(y_true<span style="color:#f92672">=</span>train_Y, y_pred<span style="color:#f92672">=</span>train_Y_pred))
<span style="color:#66d9ef">print</span>()
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;検証データ&#34;</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;accuracy = &#39;</span>, accuracy_score(y_true<span style="color:#f92672">=</span>valid_Y, y_pred<span style="color:#f92672">=</span>valid_Y_pred))
</code></pre></div><pre><code>訓練データ
accuracy =  0.9873642830400599

検証データ
accuracy =  0.8959580838323353
</code></pre><p>参考: <a href="https://qiita.com/0NE_shoT_/items/b702ab482466df6e5569">https://qiita.com/0NE_shoT_/items/b702ab482466df6e5569</a></p>
]]></content>
        </item>
        
        <item>
            <title>Raspberry Pi セットアップのTips</title>
            <link>https://tomowarkar.github.io/blog/posts/raspberrypi/</link>
            <pubDate>Fri, 22 May 2020 21:55:40 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/raspberrypi/</guid>
            <description>raspberry pi の環境を作っては壊し、壊しては作りを繰り返しているので備忘録 実行環境 Mac Book Pro により ssh 接続でraspberry piに接続、CUI操作をメイン</description>
            <content type="html"><![CDATA[<p>raspberry pi の環境を作っては壊し、壊しては作りを繰り返しているので備忘録</p>
<h2 id="実行環境">実行環境</h2>
<p>Mac Book Pro により ssh 接続で<code>raspberry pi</code>に接続、<code>CUI</code>操作をメインとする。</p>
<h3 id="mac">Mac</h3>
<pre><code>ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266
</code></pre><h3 id="raspberry-pi">Raspberry pi</h3>
<p>基本的に<code>Zero WH</code>で動作確認をしているが、一部<code>4</code>でも動作確認済み</p>
<ul>
<li>Raspberry Pi Zero WH</li>
<li><a href="https://amzn.to/2LQ2y1Z">Raspberry Pi 4 Model B (2GB)</a></li>
</ul>
<h2 id="raspbian-のダウンロード">Raspbian のダウンロード</h2>
<ul>
<li><a href="https://www.raspberrypi.org/downloads/raspbian/">公式</a></li>
<li><a href="http://ftp.jaist.ac.jp/pub/raspberrypi/">日本ミラーサイト</a></li>
</ul>
<h3 id="raspbian-litevar20200213-の例">raspbian-lite(var.2020/02/13) の例</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -O http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian_lite/images/raspbian_lite-2020-02-14/2020-02-13-raspbian-buster-lite.zip
</code></pre></div><h2 id="sd-カードのフォーマット">SD カードのフォーマット</h2>
<h3 id="ディスクの確認">ディスクの確認</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">diskutil list
</code></pre></div><p>自分の場合他の外部デバイス接続をしていない場合基本的に <code>/dev/disk2</code> に SD カードが割り当てられている。</p>
<h3 id="sd-カードフォーマット">SD カードフォーマット</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">diskutil eraseDisk MS-DOS RPI /dev/disk2
</code></pre></div><p>フォーマット形式(<code>MS-DOS</code>)、ディスクの名前(<code>RPI</code>)、フォーマット対象ディスク(<code>/dev/disk2</code>)の順</p>
<h4 id="memo">memo</h4>
<p><a href="https://www.raspberrypi.org/documentation/installation/noobs.md">NOOBS のインストールドキュメント</a>を見てると <code>~32GB</code> 容量の SD カードであれば <code>MS-DOS</code> でフォーマットしてやれば良さげ。</p>
<h2 id="イメージの書き込み">イメージの書き込み</h2>
<p><code>dd</code>コマンドなるものでもできるらしいが、<a href="https://www.balena.io/etcher/">Etcher</a>で行った。</p>
<p><a href="https://www.raspberrypi.org/documentation/installation/installing-images/mac.md">Copying an operating system image to an SD card using Mac OS</a></p>
<h2 id="無線-lan-設定">無線 LAN 設定</h2>
<p>Mac でイメージを書き込んだあとに SD カードの名前が　<code>/Volumes/boot</code> と変わっている。</p>
<p>よってこのファイル内を変更することにより Mac 側で<code>raspberry pi</code>の設定を行う。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">touch /Volumes/boot/ssh
</code></pre></div><h2 id="ネットワーク設定">ネットワーク設定</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">read -p <span style="color:#e6db74">&#39;wifi_ssid: &#39;</span> wifi_ssid
read -sp <span style="color:#e6db74">&#39;wifi_pswd: &#39;</span> wifi_pswd

cat <span style="color:#e6db74">&lt;&lt;EOF &gt;/Volumes/boot/wpa_supplicant.conf
</span><span style="color:#e6db74">country=JP
</span><span style="color:#e6db74">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
</span><span style="color:#e6db74">update_config=1
</span><span style="color:#e6db74">network={
</span><span style="color:#e6db74">    ssid=&#34;$wifi_ssid&#34;
</span><span style="color:#e6db74">    psk=&#34;$wifi_pswd&#34;
</span><span style="color:#e6db74">}
</span><span style="color:#e6db74">EOF</span>
</code></pre></div><p>平文パスワードを嫌う場合<a href="http://jorisvr.nl/wpapsk.html">WPA key calculation</a>を使ってパスワードを暗号化して記載することもできる。</p>
<p>また以下コマンドで Mac が接続している<code>Wi-Fi</code>を確認できる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">networksetup -getairportnetwork en0
</code></pre></div><h2 id="ssh-接続">ssh 接続</h2>
<p><code>ssh ユーザー名@IPアドレス</code>で接続することができる。</p>
<p>初期パスワードは<code>raspberry</code></p>
<h3 id="raspberry-pi-の-ip-アドレス確認">raspberry pi の IP アドレス確認</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">arp -a
</code></pre></div><h3 id="raspberrypi-への接続">raspberrypi への接続</h3>
<p>より簡単には以下でも可能</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ssh pi@raspberrypi.local
</code></pre></div><h2 id="これより以下-mac-上で-raspberri-pi-に-ssh-接続していることが前提">これより以下 Mac 上で Raspberri Pi に ssh 接続していることが前提</h2>
<h2 id="pi-ユーザーのパスワード変更">pi ユーザーのパスワード変更</h2>
<p>raspberrypi の初期ユーザーとパスワードは公開されているため、一番最低限のセキュリティ対策として<code>pi</code>ユーザーのパスワード変更をすべきである。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ passwd
</code></pre></div><h2 id="root-ユーザーのパスワード変更">root ユーザーのパスワード変更</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo passwd root
</code></pre></div><h2 id="新規ユーザーの追加">新規ユーザーの追加</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo adduser ユーザー名
</code></pre></div><h2 id="新規ユーザーに-sudo-権限を追加">新規ユーザーに sudo 権限を追加</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo gpasswd -a ユーザー名 sudo
</code></pre></div><h2 id="pi-ユーザを-sudo-から外す">pi ユーザを sudo から外す</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo gpasswd -d pi sudo
</code></pre></div><h2 id="記載予定-cron-のログ出力">[記載予定] cron のログ出力</h2>
<pre><code># sed -i -e 's/^#cron.* /^cron.* /' /etc/rsyslog.conf
</code></pre><h2 id="記載予定-ip-アドレスの固定化">[記載予定] ip アドレスの固定化</h2>
<h2 id="記載予定-エディタ設定">[記載予定] エディタ設定</h2>
<p><code>nano</code> も良いが、せっかくだし<code>vim</code>を使えるようになりたい</p>
<p><a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E6%88%A6%E4%BA%89">エディタ戦争</a></p>
]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #05 後半</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-05_2/</link>
            <pubDate>Wed, 20 May 2020 23:22:46 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-05_2/</guid>
            <description>途中でかなりめんどくさくなってしまって関数名とか実行時間と考えず適当になったのは内緒。 自作ライブラリのインストール MeCab と CaboCha の解析結果をパースし</description>
            <content type="html"><![CDATA[<p>途中でかなりめんどくさくなってしまって関数名とか実行時間と考えず適当になったのは内緒。</p>
<h2 id="自作ライブラリのインストール">自作ライブラリのインストール</h2>
<p>MeCab と CaboCha の解析結果をパースしてオブジェクトとして扱えるようにするライブラリを作ったのでそれを使って解いていく。</p>
<p>Github: <a href="https://github.com/tomowarkar/cucurbita">https://github.com/tomowarkar/cucurbita</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/tomowarkar/cucurbita.git
pip install ./cucurbita
</code></pre></div><h2 id="45">45</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> CaboCha
<span style="color:#f92672">from</span> cucurbita.cab <span style="color:#f92672">import</span> Sect

text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;吾輩はここで始めて人間というものを見た&#34;</span>
c <span style="color:#f92672">=</span> CaboCha<span style="color:#f92672">.</span>Parser()
cabocha_result <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>parse(text)<span style="color:#f92672">.</span>toString(CaboCha<span style="color:#f92672">.</span>FORMAT_LATTICE)
sect <span style="color:#f92672">=</span> Sect(cabocha_result)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">relations</span>(sect):
  <span style="color:#66d9ef">return</span> [(c<span style="color:#f92672">.</span>pos, c<span style="color:#f92672">.</span>dst) <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> sect<span style="color:#f92672">.</span>chunks]

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">nlp_45</span>(sect):
    d <span style="color:#f92672">=</span> {}
    <span style="color:#66d9ef">for</span> pos, dst <span style="color:#f92672">in</span> relations(sect):
      <span style="color:#66d9ef">if</span> dst <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
        <span style="color:#66d9ef">continue</span>
      key <span style="color:#f92672">=</span> sect<span style="color:#f92672">.</span>chunks[dst]
      value <span style="color:#f92672">=</span> sect<span style="color:#f92672">.</span>chunks[pos]

      varbs <span style="color:#f92672">=</span> [m<span style="color:#f92672">.</span>base <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> key<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;動詞&#34;</span>]
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> any(varbs):
        <span style="color:#66d9ef">continue</span>

      posts <span style="color:#f92672">=</span> [m<span style="color:#f92672">.</span>base <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> value<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;助詞&#34;</span>]
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> any(posts):
        <span style="color:#66d9ef">continue</span>

      <span style="color:#66d9ef">if</span> d<span style="color:#f92672">.</span>get(varbs[<span style="color:#ae81ff">0</span>]):
          d[varbs[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">+=</span>posts
      <span style="color:#66d9ef">else</span>:
          d[varbs[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> posts
    <span style="color:#66d9ef">return</span> d

<span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> nlp_45(sect)<span style="color:#f92672">.</span>items():
  <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;{}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{}&#34;</span><span style="color:#f92672">.</span>format(k, <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(sorted(v))))
</code></pre></div><pre><code>見る	は を
始める	で
</code></pre><h2 id="46">46</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">nlp_46</span>(sect):
    d <span style="color:#f92672">=</span> {}
    <span style="color:#66d9ef">for</span> pos, dst <span style="color:#f92672">in</span> relations(sect):
      <span style="color:#66d9ef">if</span> dst <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
        <span style="color:#66d9ef">continue</span>
      key <span style="color:#f92672">=</span> sect<span style="color:#f92672">.</span>chunks[dst]
      value <span style="color:#f92672">=</span> sect<span style="color:#f92672">.</span>chunks[pos]

      varbs <span style="color:#f92672">=</span> [m<span style="color:#f92672">.</span>base <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> key<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;動詞&#34;</span>]
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> any(varbs):
        <span style="color:#66d9ef">continue</span>

      posts <span style="color:#f92672">=</span> [m<span style="color:#f92672">.</span>base <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> value<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;助詞&#34;</span>]
      <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> any(posts):
        <span style="color:#66d9ef">continue</span>

      <span style="color:#66d9ef">if</span> d<span style="color:#f92672">.</span>get(varbs[<span style="color:#ae81ff">0</span>]):
          d[varbs[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">+=</span>[value]
      <span style="color:#66d9ef">else</span>:
          d[varbs[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> [value]
    <span style="color:#66d9ef">return</span> d

<span style="color:#66d9ef">for</span> key, values <span style="color:#f92672">in</span> nlp_46(sect)<span style="color:#f92672">.</span>items():
  f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: [m<span style="color:#f92672">.</span>base <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;助詞&#34;</span>][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
  values <span style="color:#f92672">=</span> sorted(values, key<span style="color:#f92672">=</span>f)
  <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;{}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{}&#34;</span><span style="color:#f92672">.</span>format(key, <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([f(value) <span style="color:#66d9ef">for</span> value <span style="color:#f92672">in</span> values]), <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(map(str, values))))
</code></pre></div><pre><code>見る	は を	吾輩は ものを
始める	で	ここで
</code></pre><h2 id="47">47</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">c <span style="color:#f92672">=</span> CaboCha<span style="color:#f92672">.</span>Parser()
text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;別段くるにも及ばんさと、主人は手紙に返事をする。&#34;</span>
cabocha_result <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>parse(text)<span style="color:#f92672">.</span>toString(CaboCha<span style="color:#f92672">.</span>FORMAT_LATTICE)
sect <span style="color:#f92672">=</span> Sect(cabocha_result)

is_sahen_noun <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> morph: morph<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;名詞&#39;</span> <span style="color:#f92672">and</span> morph<span style="color:#f92672">.</span>pos1 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;サ変接続&#39;</span>
is_wo <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> morph: morph<span style="color:#f92672">.</span>base <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;を&#39;</span> <span style="color:#f92672">and</span> morph<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;助詞&#39;</span>
is_target <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> morphs:  is_sahen_noun(morphs[i]) <span style="color:#f92672">and</span> is_wo(morphs[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>])

find_verb <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> chunk: list(filter(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;動詞&#34;</span>, chunk<span style="color:#f92672">.</span>morphs))[<span style="color:#ae81ff">0</span>]

<span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> sect<span style="color:#f92672">.</span>chunks:
  morphs <span style="color:#f92672">=</span> chunk<span style="color:#f92672">.</span>morphs
  <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(morphs) <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
    verb <span style="color:#f92672">=</span> find_verb(sect<span style="color:#f92672">.</span>chunks[chunk<span style="color:#f92672">.</span>dst])
    <span style="color:#66d9ef">if</span> is_target(morphs) <span style="color:#f92672">and</span> verb:
      <span style="color:#66d9ef">print</span>(chunk, verb, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)
      f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: [m<span style="color:#f92672">.</span>base <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;助詞&#34;</span>][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
      values <span style="color:#f92672">=</span>  [c <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> sect<span style="color:#f92672">.</span>chunks <span style="color:#66d9ef">if</span> c<span style="color:#f92672">.</span>dst <span style="color:#f92672">==</span> chunk<span style="color:#f92672">.</span>dst <span style="color:#f92672">and</span> c <span style="color:#f92672">!=</span> chunk]
      values <span style="color:#f92672">=</span> sorted(values, key<span style="color:#f92672">=</span>f)
      <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;{} {}&#34;</span><span style="color:#f92672">.</span>format(<span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([f(value) <span style="color:#66d9ef">for</span> value <span style="color:#f92672">in</span> values]), <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(map(str, values))))
</code></pre></div><pre><code>返事をする	と に は 及ばんさと、 手紙に 主人は
</code></pre><h2 id="48">48</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> sect<span style="color:#f92672">.</span>chunks:
  <span style="color:#66d9ef">if</span> [m <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> c<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;名詞&#34;</span>]:
    <span style="color:#66d9ef">print</span>(c, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
    dst <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>dst
    <span style="color:#66d9ef">while</span> dst <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
      <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34; -&gt; &#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
      <span style="color:#66d9ef">print</span>(sect<span style="color:#f92672">.</span>chunks[dst], end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
      dst <span style="color:#f92672">=</span> sect<span style="color:#f92672">.</span>chunks[dst]<span style="color:#f92672">.</span>dst
    <span style="color:#66d9ef">print</span>()
</code></pre></div><pre><code>吾輩は -&gt; 見た
ここで -&gt; 始めて -&gt; 人間という -&gt; ものを -&gt; 見た
人間という -&gt; ものを -&gt; 見た
ものを -&gt; 見た
</code></pre><h2 id="49">49</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">noun2root</span>(sect):
  <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> sect<span style="color:#f92672">.</span>chunks:
    <span style="color:#66d9ef">if</span> [m <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> c<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;名詞&#34;</span>]:
      list_ <span style="color:#f92672">=</span> [c]
      dst <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>dst
      <span style="color:#66d9ef">while</span> dst <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
        list_<span style="color:#f92672">.</span>append(sect<span style="color:#f92672">.</span>chunks[dst])
        dst <span style="color:#f92672">=</span> sect<span style="color:#f92672">.</span>chunks[dst]<span style="color:#f92672">.</span>dst
      <span style="color:#66d9ef">yield</span> list_

routes <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> noun2root(sect)]

<span style="color:#f92672">from</span> copy <span style="color:#f92672">import</span> deepcopy <span style="color:#66d9ef">as</span> dc

to_str <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> chunks: <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(map(str, chunks))
f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> chunk, string: <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([m<span style="color:#f92672">.</span>surface <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">!=</span><span style="color:#e6db74">&#34;名詞&#34;</span> <span style="color:#66d9ef">else</span> string <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> chunk<span style="color:#f92672">.</span>morphs])
dupl <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> list_: sorted([x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> set(list_) <span style="color:#66d9ef">if</span> list_<span style="color:#f92672">.</span>count(x) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>], key<span style="color:#f92672">=</span>list_<span style="color:#f92672">.</span>index)
filt <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> chunks, strs, d, face: [str(e) <span style="color:#66d9ef">if</span> strs<span style="color:#f92672">.</span>index(str(e)) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> f(e, face) <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> chunks <span style="color:#66d9ef">if</span> strs<span style="color:#f92672">.</span>index(str(e)) <span style="color:#f92672">&lt;</span> strs<span style="color:#f92672">.</span>index(d)]

<span style="color:#66d9ef">for</span> i, n <span style="color:#f92672">in</span> enumerate(routes, start<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
  <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(routes) <span style="color:#f92672">-</span> i):
    X, Y <span style="color:#f92672">=</span> dc(n), dc(routes[i<span style="color:#f92672">+</span>j])
    <span style="color:#75715e">#文節iから構文木の根に至る経路上に文節jが存在する場合</span>
    <span style="color:#66d9ef">if</span> str(Y[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">in</span> map(str, X):
      X[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> f(X[<span style="color:#ae81ff">0</span>], <span style="color:#e6db74">&#34;X&#34;</span>)
      <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> X:
        <span style="color:#66d9ef">if</span> str(e) <span style="color:#f92672">==</span> str(Y[<span style="color:#ae81ff">0</span>]):
          <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Y&#34;</span>)
          <span style="color:#66d9ef">break</span>
        <span style="color:#66d9ef">print</span>(e, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34; -&gt; &#34;</span>)
    <span style="color:#75715e"># else</span>
    <span style="color:#66d9ef">else</span>:
      xl, yl <span style="color:#f92672">=</span> list(map(str, X)), list(map(str, Y))
      d <span style="color:#f92672">=</span> dupl(xl <span style="color:#f92672">+</span> yl)[<span style="color:#ae81ff">0</span>]
      <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34; -&gt; &#34;</span><span style="color:#f92672">.</span>join(filt(X, xl, d, <span style="color:#e6db74">&#34;X&#34;</span>)), <span style="color:#e6db74">&#34;|&#34;</span>, <span style="color:#e6db74">&#34; -&gt; &#34;</span><span style="color:#f92672">.</span>join(filt(Y, yl, d, <span style="color:#e6db74">&#34;Y&#34;</span>)), <span style="color:#e6db74">&#34;|&#34;</span>, d)

</code></pre></div><pre><code>Xは | Yで -&gt; 始めて -&gt; 人間という -&gt; ものを | 見た
Xは | Yという -&gt; ものを | 見た
Xは | Yを | 見た
Xで -&gt; 始めて -&gt; Y
Xで -&gt; 始めて -&gt; 人間という -&gt; Y
Xという -&gt; Y
</code></pre><h2 id="以下古いやつ">以下古いやつ</h2>
<p>時間が空いてやり直したのがいくつかあるのでアーカイブ</p>
<h3 id="fuctions">fuctions</h3>
<ul>
<li><code>read_cabocha</code> を<code>v3</code>に更新</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Morph</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;cabochaの形態素解析結果
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">        line (str): e.x. &#39;名前</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">名詞,一般,*,*,*,*,名前,ナマエ,ナマエ&#39;
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">        surface (str): 表層形
</span><span style="color:#e6db74">        base (str): 基本形
</span><span style="color:#e6db74">        pos (str): 品詞
</span><span style="color:#e6db74">        pos1 (str): 品詞細分類1
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">def</span> __init__(self, line):
        pattern <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;^([^,]*?)\t([^,]*?),([^,]*?)(?:,[^,]*?){4},([^,]*?)(?:(?:,[^,]*?){2})?$&#34;</span>
        <span style="color:#66d9ef">try</span>:
            [(self<span style="color:#f92672">.</span>surface, self<span style="color:#f92672">.</span>pos, self<span style="color:#f92672">.</span>pos1, self<span style="color:#f92672">.</span>base)] <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(pattern, line)
        <span style="color:#66d9ef">except</span>:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(f<span style="color:#e6db74">&#34;Invalid line pattern: </span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">{repr(line)}&#34;</span>, )

    <span style="color:#66d9ef">def</span> __str__(self):
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>surface

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Chunk</span>:
    <span style="color:#66d9ef">def</span> __init__(self, dst):
        self<span style="color:#f92672">.</span>morphs <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>srcs <span style="color:#f92672">=</span> []
        self<span style="color:#f92672">.</span>dst <span style="color:#f92672">=</span> dst

    <span style="color:#66d9ef">def</span>  __str__(self):
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(list(map(str, self<span style="color:#f92672">.</span>morphs)))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_cabocha_v3</span>(text):
    sentences <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;EOS</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
    p <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>compile(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\*\ (\d+)\ (-1|\d+)D\ \d+\/\d+\ -?\d+\.\d+&#34;</span>)
    <span style="color:#66d9ef">for</span> sentence <span style="color:#f92672">in</span> sentences:
        dep <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>findall(sentence)
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> dep:
            <span style="color:#66d9ef">continue</span>

        chunks <span style="color:#f92672">=</span> []
        <span style="color:#66d9ef">for</span> (index, dst) <span style="color:#f92672">in</span> dep:
            c <span style="color:#f92672">=</span> Chunk(int(dst))
            c<span style="color:#f92672">.</span>srcs <span style="color:#f92672">=</span> [int(f) <span style="color:#66d9ef">for</span> f, t <span style="color:#f92672">in</span> dep <span style="color:#66d9ef">if</span> t <span style="color:#f92672">==</span> index]
            chunks<span style="color:#f92672">.</span>append(c)

        cnt <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> sentence<span style="color:#f92672">.</span>splitlines():
            <span style="color:#66d9ef">if</span> p<span style="color:#f92672">.</span>match(line):
                cnt <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
                <span style="color:#66d9ef">continue</span>
            <span style="color:#66d9ef">else</span>:
                chunks[cnt]<span style="color:#f92672">.</span>morphs<span style="color:#f92672">.</span>append(Morph(line))
        <span style="color:#66d9ef">yield</span> chunks

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;neko.txt.cabocha&#34;</span>) <span style="color:#66d9ef">as</span> f:
    text <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()

sentences <span style="color:#f92672">=</span> list(read_cabocha_v3(text))
</code></pre></div><h3 id="45-動詞の格パターンの抽出">45. 動詞の格パターンの抽出</h3>
<p>今回用いている文章をコーパスと見なし，日本語の述語が取りうる格を調査したい． 動詞を述語，動詞に係っている文節の助詞を格と考え，述語と格をタブ区切り形式で出力せよ． ただし，出力は以下の仕様を満たすようにせよ．</p>
<p>動詞を含む文節において，最左の動詞の基本形を述語とする
述語に係る助詞を格とする
述語に係る助詞（文節）が複数あるときは，すべての助詞をスペース区切りで辞書順に並べる
「吾輩はここで始めて人間というものを見た」という例文（neko.txt.cabocha の 8 文目）を考える． この文は「始める」と「見る」の２つの動詞を含み，「始める」に係る文節は「ここで」，「見る」に係る文節は「吾輩は」と「ものを」と解析された場合は，次のような出力になるはずである．</p>
<pre><code>始める  で
見る    は を
</code></pre><p>このプログラムの出力をファイルに保存し，以下の事項を UNIX コマンドを用いて確認せよ．</p>
<p>コーパス中で頻出する述語と格パターンの組み合わせ
「する」「見る」「与える」という動詞の格パターン（コーパス中で出現頻度の高い順に並べよ）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y: [m<span style="color:#f92672">.</span>base <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> x <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> y]
text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> sentence <span style="color:#f92672">in</span> sentences:
    verbs_and_pptls <span style="color:#f92672">=</span> [(f(chunk<span style="color:#f92672">.</span>morphs, <span style="color:#e6db74">&#34;動詞&#34;</span>), f(chunk<span style="color:#f92672">.</span>morphs, <span style="color:#e6db74">&#34;助詞&#34;</span>)) <span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> sentence]
    <span style="color:#66d9ef">for</span> i, (v, p) <span style="color:#f92672">in</span> enumerate(verbs_and_pptls):
        <span style="color:#66d9ef">if</span> v:
            pptls <span style="color:#f92672">=</span> sum([verbs_and_pptls[s][<span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> sentence[i]<span style="color:#f92672">.</span>srcs], [])
            pptls <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(sorted(pptls))
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> pptls:
                <span style="color:#66d9ef">continue</span>
            text <span style="color:#f92672">+=</span> f<span style="color:#e6db74">&#34;{v[0]}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{pptls}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;neko.txt.corpus&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(text)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">10</span> neko.txt.corpus
生れる	で
つく	が と
泣く	で
する	だけ て は
始める	で
見る	は を
聞く	で
捕える	を
煮る	て
食う	て
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat neko.txt.corpus | sort -t <span style="color:#e6db74">&#34;\t&#34;</span> -k <span style="color:#ae81ff">1</span> | uniq -c | sort -n -r | head -n <span style="color:#ae81ff">20</span>
 <span style="color:#ae81ff">560</span> 云う	と
 <span style="color:#ae81ff">436</span> する	を
 <span style="color:#ae81ff">247</span> 思う	と
 <span style="color:#ae81ff">199</span> ある	が
 <span style="color:#ae81ff">184</span> なる	に
 <span style="color:#ae81ff">174</span> する	に
 <span style="color:#ae81ff">172</span> 見る	て
 <span style="color:#ae81ff">120</span> する	と
 <span style="color:#ae81ff">119</span> する	が
 <span style="color:#ae81ff">108</span> する	に を
  <span style="color:#ae81ff">93</span> 見る	を
  <span style="color:#ae81ff">90</span> 見える	と
  <span style="color:#ae81ff">79</span> する	て を
  <span style="color:#ae81ff">60</span> する	が を
  <span style="color:#ae81ff">58</span> もつ	を
  <span style="color:#ae81ff">57</span> する	は
  <span style="color:#ae81ff">57</span> する	て
  <span style="color:#ae81ff">55</span> 云う	を
  <span style="color:#ae81ff">53</span> ある	の
  <span style="color:#ae81ff">50</span> 出来る	が

$ cat neko.txt.corpus | grep <span style="color:#e6db74">&#34;^する\t&#34;</span> | sort -t <span style="color:#e6db74">&#34;\t&#34;</span> -k <span style="color:#ae81ff">1</span> | uniq -c | sort -n -r | head -n <span style="color:#ae81ff">5</span>
 <span style="color:#ae81ff">436</span> する	を
 <span style="color:#ae81ff">174</span> する	に
 <span style="color:#ae81ff">120</span> する	と
 <span style="color:#ae81ff">119</span> する	が
 <span style="color:#ae81ff">108</span> する	に を

$ cat neko.txt.corpus | grep <span style="color:#e6db74">&#34;^見る\t&#34;</span> | sort -t <span style="color:#e6db74">&#34;\t&#34;</span> -k <span style="color:#ae81ff">1</span> | uniq -c | sort -n -r | head -n <span style="color:#ae81ff">5</span>
 <span style="color:#ae81ff">172</span> 見る	て
  <span style="color:#ae81ff">93</span> 見る	を
  <span style="color:#ae81ff">19</span> 見る	て を
  <span style="color:#ae81ff">19</span> 見る	て て
  <span style="color:#ae81ff">19</span> 見る	から

$ cat neko.txt.corpus | grep <span style="color:#e6db74">&#34;^与える\t&#34;</span> | sort -t <span style="color:#e6db74">&#34;\t&#34;</span> -k <span style="color:#ae81ff">1</span> | uniq -c | sort -n -r | head -n <span style="color:#ae81ff">5</span>
   <span style="color:#ae81ff">3</span> 与える	に を
   <span style="color:#ae81ff">2</span> 与える	て に は を
   <span style="color:#ae81ff">1</span> 与える	ば を
   <span style="color:#ae81ff">1</span> 与える	に に対して のみ は は も
   <span style="color:#ae81ff">1</span> 与える	て も を
</code></pre></div><h3 id="46-動詞の格フレーム情報の抽出">46. 動詞の格フレーム情報の抽出</h3>
<p>45 のプログラムを改変し，述語と格パターンに続けて項（述語に係っている文節そのもの）をタブ区切り形式で出力せよ．45 の仕様に加えて，以下の仕様を満たすようにせよ．</p>
<p>項は述語に係っている文節の単語列とする（末尾の助詞を取り除く必要はない）
述語に係る文節が複数あるときは，助詞と同一の基準・順序でスペース区切りで並べる
「吾輩はここで始めて人間というものを見た」という例文（neko.txt.cabocha の 8 文目）を考える． この文は「始める」と「見る」の２つの動詞を含み，「始める」に係る文節は「ここで」，「見る」に係る文節は「吾輩は」と「ものを」と解析された場合は，次のような出力になるはずである．</p>
<pre><code>始める  で      ここで
見る    は を   吾輩は ものを
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">nlp100_46</span>(sentence):
    text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y: [m<span style="color:#f92672">.</span>base <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>morphs <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>pos <span style="color:#f92672">==</span> y]
    verbs <span style="color:#f92672">=</span> [f(chunk, <span style="color:#e6db74">&#34;動詞&#34;</span>) <span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> sentence]
    <span style="color:#66d9ef">for</span> i, v <span style="color:#f92672">in</span> enumerate(verbs):
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> v:
            <span style="color:#66d9ef">continue</span>
        pptls <span style="color:#f92672">=</span> [(sentence[src], f(sentence[src], <span style="color:#e6db74">&#34;助詞&#34;</span>)) <span style="color:#66d9ef">for</span> src <span style="color:#f92672">in</span> sentence[i]<span style="color:#f92672">.</span>srcs <span style="color:#66d9ef">if</span>  f(sentence[src], <span style="color:#e6db74">&#34;助詞&#34;</span>)]
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> pptls:
            <span style="color:#66d9ef">continue</span>
        pptls <span style="color:#f92672">=</span> sorted(pptls, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>])
        text <span style="color:#f92672">+=</span> v[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>
        text <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([pptl[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> pptl <span style="color:#f92672">in</span> pptls]) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>
        text <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([str(pptl[<span style="color:#ae81ff">0</span>]) <span style="color:#66d9ef">for</span> pptl <span style="color:#f92672">in</span> pptls]) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
    <span style="color:#66d9ef">return</span> text


<span style="color:#66d9ef">print</span>(nlp100_46(sentences[<span style="color:#ae81ff">5</span>]))
</code></pre></div><h4 id="memo">memo</h4>
<p><code>サ変接続</code>は<code>pos1</code>と<code>pos2</code>ででくるが、今回後者は対象外</p>
<pre><code>$ cat neko.txt.cabocha | grep &quot;サ変接続&quot; | cut -f 2 | cut -d &quot;,&quot; -f 1-3 | sort -r | uniq -c
4842 名詞,サ変接続,*
  21 名詞,接尾,サ変接続
</code></pre>]]></content>
        </item>
        
        <item>
            <title>RaspbianをDocker イメージに変換した(for Mac)</title>
            <link>https://tomowarkar.github.io/blog/posts/docker_raspbian/</link>
            <pubDate>Fri, 15 May 2020 11:14:25 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/docker_raspbian/</guid>
            <description>モチベーション Raspberry pi 上で Docker を使ってサーバーを立てる記事を漁っていたら 「Raspbian を Docker イメージに変換する」 という記事を見つけ、Docker</description>
            <content type="html"><![CDATA[<h2 id="モチベーション">モチベーション</h2>
<p>Raspberry pi 上で Docker を使ってサーバーを立てる記事を漁っていたら 「<a href="https://qiita.com/yuyakato/items/5dd06fb179922206044d">Raspbian を Docker イメージに変換する</a>」 という記事を見つけ、Docker の勉強にもなりそうだしやってみようかっていうところが始点。</p>
<h2 id="実行環境">実行環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266
</code></pre></div><h2 id="raspbian-のダウンロード">Raspbian のダウンロード</h2>
<p><a href="https://www.raspberrypi.org/downloads/raspbian/">本家</a>ではかなり時間がかかるので, <a href="http://ftp.jaist.ac.jp/pub/raspberrypi/">日本のミラーサイト</a>でダウンロードする</p>
<h3 id="ちなみに-sha-256-って何に使うんや">ちなみに SHA-256 って何に使うんや?</h3>
<p>本家のダウンロードサイトにはダウンロードファイルと一緒に SHA-256 の文字列が記載されている。最初これは何に使うんだろうかって思っていたのだが、どうやら破損や改変がないか調べるためらしい。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -O http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian_lite/images/raspbian_lite-2020-02-14/2020-02-13-raspbian-buster-lite.zip

$ sha256sum 2020-02-13-raspbian-buster-lite.zip
12ae6e17bf95b6ba83beca61e7394e7411b45eba7e6a520f434b0748ea7370e8  2020-02-13-raspbian-buster-lite.zip
</code></pre></div><p><code>$ diff &lt;(echo before) &lt;(echo after)</code> とかで本家記載のと差分が出なければ破損や改変がないと言えるっぽい</p>
<h2 id="今回はルートファイルシステムを使う">今回はルートファイルシステムを使う</h2>
<p>参考: <a href="https://docs.docker.com/engine/reference/commandline/import/">https://docs.docker.com/engine/reference/commandline/import/</a></p>
<h3 id="ダウンロードとイメージ作成を別々に行う">ダウンロードとイメージ作成を別々に行う</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -O http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian_lite/archive/2020-02-14-13:49/root.tar.xz
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span style="color:#ae81ff">100</span>  273M  <span style="color:#ae81ff">100</span>  273M    <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>  3543k      <span style="color:#ae81ff">0</span>  0:01:18  0:01:18 --:--:-- 2465k

$ docker image import ./root.tar.xz raspbian-buster-lite:2020-02-13
sha256:93b0d6a68bdedb4659c8311c55a2edf2717c63ff1c9e0e3e57f831fddc806cdc

$ docker image ls raspbian-buster-lite:2020-02-13
REPOSITORY             TAG                 IMAGE ID            CREATED              SIZE
raspbian-buster-lite   2020-02-13          93b0d6a68bde        About a minute ago   1.03GB

</code></pre></div><h3 id="ダウンロードとイメージ作成を一緒に">ダウンロードとイメージ作成を一緒に</h3>
<p>上記でイメージを作った後に公式ドキュメントを見て, こちらでもできるのではないかと思いやって見たらできたのでこちらも載せます。</p>
<p>同じイメージを作るのもなので、通常盤の<code>raspbian</code>のイメージを作りました。</p>
<pre><code>$ docker image import http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian/archive/2020-02-14-13:48/root.tar.xz raspbian-buster:2020-02-13
Downloading from http://ftp.jaist.ac.jp/pub/raspberrypi/raspbian/archive/2020-02-14-13:48/root.tar.xz
Importing [==================================================&gt;]  833.1MB/833.1MB
sha256:38ac3326cfc4a5a8dca2d6f09505cfd26b884ff448c26aaff31fb60aee3c131d

$ docker image ls raspbian-buster:2020-02-13
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
raspbian-buster     2020-02-13          38ac3326cfc4        About a minute ago      2.6GB
</code></pre>
<p>どちらもイメージにするとサイズが 3 倍近くになっているのがわかりますね。</p>
<h2 id="アーキテクチャとか">アーキテクチャとか</h2>
<p>CPU に関しての知識は<code>Intel</code>と<code>AMD</code>は聞いたことがあるぞ!</p>
<p>うちの MacBook Pro にはデュアルコアの Intel Core i5 がのってるぞ!</p>
<p>くらいの知識程度しかないので実際にコマンドを叩いて確認していく。</p>
<h3 id="mac-のアーキテクチャ">Mac のアーキテクチャ</h3>
<p><code>arch</code> コマンドと <code>uname -m</code>コマンドは同じとの説明を見たが、実際コマンドを叩いてみると値が違ったなぜ??</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ arch <span style="color:#f92672">&amp;&amp;</span> uname -m
i386
x86_64
</code></pre></div><p>システム詳細の該当部分は多分これ?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sysctl hw.machine
hw.machine: x86_64
</code></pre></div><p><code>arc</code>コマンドで 32 ビットバージョンで認識されてるのはなぜなのか。いつかソースを見にいこう。きっと。多分。</p>
<h3 id="raspbian-のアーキテクチャ">raspbian のアーキテクチャ</h3>
<p>armv7l という 32bit プロセッサを使っているらしい</p>
<p><a href="https://www.raspbian.org/RaspbianFAQ">RaspbianFAQ</a></p>
<h3 id="作成した-raspbian-docker-イメージのアーキテクチャ">作成した raspbian docker イメージのアーキテクチャ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ docker inspect --format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{{.Architecture}}&#39;</span> raspbian-buster-lite:2020-02-13
amd64
</code></pre></div><h3 id="完全に理解したうん全くわからん">完全に理解した(うん、全くわからん)</h3>
<p>つまりインテルの 64bitCPU 搭載の MacBookPro で, ARM の 32bit プロセッサ用の OS(Rapbian)を AMD の 64bit アーキテクチャとして Docker Image 化したってこと???</p>
<h2 id="とりあえず動かせば良い">とりあえず動かせば良い</h2>
<p><a href="http://docs.docker.jp/engine/reference/run.html#">Docker docs</a></p>
<pre><code>$ docker container run --interactive --tty --rm raspbian-buster-lite:2020-02-13 /bin/bash

# uname -a
Linux 1b55f48bb6e4 4.19.76-linuxkit #1 SMP Thu Oct 17 19:31:58 UTC 2019 armv7l GNU/Linux
</code></pre>
<p>どうやらアーキテクチャは armv7l になっている。</p>
<h3 id="docker-で気になったところ">docker で気になったところ</h3>
<p>docker 初心者なので<code>docker run</code>と<code>docker container run</code>って何が違うんやと気になったのでメモ</p>
<p>結から言えば, 新コマンド と旧コマンドの違いだけでやっていることは同じらしい。ざっと見た感じ<code>image</code>を扱っているのか,　<code>container</code>を扱っているのかをわかりやすく明示的になるようコマンドが再編されたっぽい。</p>
<p><a href="https://qiita.com/zembutsu/items/6e1ad18f0d548ce6c266">docker container / image コマンド新旧比較</a></p>
<h2 id="おわりに">おわりに</h2>
<p>結構軽い気持ちで Raspbian を Docker イメージに変換してみたワケだがものすごく簡単にでき、かつアーキテクチャや Docker を学ぶ良い機会になった。</p>
<p>以下に Raspbian Lite のインストールパッケージリストと 通常盤 Raspbian との差分を載せておく</p>
<h2 id="インストールされているパッケージリストraspbian-lite-var-2020-02-13">インストールされているパッケージリスト(Raspbian Lite var 2020-02-13)</h2>
<pre><code># dpkg --get-selections | grep -v deinstall | wc -l
472

# dpkg -l
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                           Version                             Architecture Description
+++-==============================-===================================-============-===============================================================================
ii  adduser                        3.118                               all          add and remove users and groups
ii  alsa-utils                     1.1.8-2                             armhf        Utilities for configuring and using ALSA
ii  apt                            1.8.2                               armhf        commandline package manager
ii  apt-listchanges                3.19                                all          package change history notification tool
ii  apt-utils                      1.8.2                               armhf        package management related utility programs
ii  avahi-daemon                   0.7-4+b1                            armhf        Avahi mDNS/DNS-SD daemon
ii  base-files                     10.3+rpi1+deb10u2                   armhf        Debian base system miscellaneous files
ii  base-passwd                    3.5.46                              armhf        Debian base system master password and group files
ii  bash                           5.0-4                               armhf        GNU Bourne Again SHell
ii  bash-completion                1:2.8-6                             all          programmable completion for the bash shell
ii  bind9-host                     1:9.11.5.P4+dfsg-5.1                armhf        DNS lookup utility (deprecated)
ii  binutils                       2.31.1-16+rpi1                      armhf        GNU assembler, linker and binary utilities
ii  binutils-arm-linux-gnueabihf   2.31.1-16+rpi1                      armhf        GNU binary utilities, for arm-linux-gnueabihf target
ii  binutils-common:armhf          2.31.1-16+rpi1                      armhf        Common files for the GNU assembler, linker and binary utilities
ii  bluez                          5.50-1+rpt1                         armhf        Bluetooth tools and daemons
ii  bluez-firmware                 1.2-4+rpt2                          all          Firmware for Bluetooth devices
ii  bsdmainutils                   11.1.2                              armhf        collection of more utilities from FreeBSD
ii  bsdutils                       1:2.33.1-0.1                        armhf        basic utilities from 4.4BSD-Lite
ii  build-essential                12.6                                armhf        Informational list of build-essential packages
ii  busybox                        1:1.30.1-4                          armhf        Tiny utilities for small and embedded systems
ii  bzip2                          1.0.6-9.2~deb10u1                   armhf        high-quality block-sorting file compressor - utilities
ii  ca-certificates                20190110                            all          Common CA certificates
ii  cifs-utils                     2:6.8-2                             armhf        Common Internet File System utilities
ii  console-setup                  1.193~deb10u1                       all          console font and keymap setup program
ii  console-setup-linux            1.193~deb10u1                       all          Linux specific part of console-setup
ii  coreutils                      8.30-3                              armhf        GNU core utilities
ii  cpio                           2.12+dfsg-9                         armhf        GNU cpio -- a program to manage archives of files
ii  cpp                            4:8.3.0-1+rpi2                      armhf        GNU C preprocessor (cpp)
ii  cpp-8                          8.3.0-6+rpi1                        armhf        GNU C preprocessor
ii  crda                           3.18-1                              armhf        wireless Central Regulatory Domain Agent
ii  cron                           3.0pl1-134+deb10u1                  armhf        process scheduling daemon
ii  curl                           7.64.0-4                            armhf        command line tool for transferring data with URL syntax
ii  dash                           0.5.10.2-5                          armhf        POSIX-compliant shell
ii  dbus                           1.12.16-1                           armhf        simple interprocess messaging system (daemon and utilities)
ii  dc                             1.07.1-2                            armhf        GNU dc arbitrary precision reverse-polish calculator
ii  debconf                        1.5.71                              all          Debian configuration management system
ii  debconf-i18n                   1.5.71                              all          full internationalization support for debconf
ii  debconf-utils                  1.5.71                              all          debconf utilities
ii  debianutils                    4.8.6.1                             armhf        Miscellaneous utilities specific to Debian
ii  device-tree-compiler           1.4.7-3+rpt1                        armhf        Device Tree Compiler for Flat Device Trees
ii  dhcpcd5                        1:8.1.2-1+rpt1                      armhf        DHCPv4, IPv6RA and DHCPv6 client with IPv4LL support
ii  diffutils                      1:3.7-3                             armhf        File comparison utilities
ii  dirmngr                        2.2.12-1+rpi1+deb10u1               armhf        GNU privacy guard - network certificate management service
ii  distro-info-data               0.41+deb10u1                        all          information about the distributions' releases (data files)
ii  dmidecode                      3.2-1                               armhf        SMBIOS/DMI table decoder
ii  dmsetup                        2:1.02.155-3                        armhf        Linux Kernel Device Mapper userspace library
ii  dosfstools                     4.1-2                               armhf        utilities for making and checking MS-DOS FAT filesystems
ii  dphys-swapfile                 20100506-5                          all          Autogenerate and use a swap file
ii  dpkg                           1.19.7                              armhf        Debian package management system
ii  dpkg-dev                       1.19.7                              all          Debian package development tools
ii  e2fsprogs                      1.44.5-1+deb10u2                    armhf        ext2/ext3/ext4 file system utilities
ii  ed                             1.15-1                              armhf        classic UNIX line editor
ii  ethtool                        1:4.19-1                            armhf        display or change Ethernet device settings
ii  fake-hwclock                   0.11+rpt1                           all          Save/restore system clock on machines without working RTC hardware
ii  fakeroot                       1.23-1                              armhf        tool for simulating superuser privileges
ii  fbset                          2.1-30                              armhf        framebuffer device maintenance program
ii  fdisk                          2.33.1-0.1                          armhf        collection of partitioning utilities
ii  file                           1:5.35-4+deb10u1                    armhf        Recognize the type of data in a file using &quot;magic&quot; numbers
ii  findutils                      4.6.0+git+20190209-2                armhf        utilities for finding files--find, xargs
ii  firmware-atheros               1:20190114-1+rpt4                   all          Binary firmware for Atheros wireless cards
ii  firmware-brcm80211             1:20190114-1+rpt4                   all          Binary firmware for Broadcom/Cypress 802.11 wireless cards
ii  firmware-libertas              1:20190114-1+rpt4                   all          Binary firmware for Marvell wireless cards
ii  firmware-misc-nonfree          1:20190114-1+rpt4                   all          Binary firmware for various drivers in the Linux kernel
ii  firmware-realtek               1:20190114-1+rpt4                   all          Binary firmware for Realtek wired/wifi/BT adapters
ii  flashrom                       1.0-1                               armhf        Identify, read, write, erase, and verify BIOS/ROM/flash chips
ii  fuse                           2.9.9-1                             armhf        Filesystem in Userspace
ii  g++                            4:8.3.0-1+rpi2                      armhf        GNU C++ compiler
ii  g++-8                          8.3.0-6+rpi1                        armhf        GNU C++ compiler
ii  gcc                            4:8.3.0-1+rpi2                      armhf        GNU C compiler
ii  gcc-4.9-base:armhf             4.9.4-2+rpi1+b19                    armhf        GCC, the GNU Compiler Collection (base package)
ii  gcc-5-base:armhf               5.5.0-8                             armhf        GCC, the GNU Compiler Collection (base package)
ii  gcc-6-base:armhf               6.5.0-1+rpi1+b1                     armhf        GCC, the GNU Compiler Collection (base package)
ii  gcc-7-base:armhf               7.3.0-19                            armhf        GCC, the GNU Compiler Collection (base package)
ii  gcc-8                          8.3.0-6+rpi1                        armhf        GNU C compiler
ii  gcc-8-base:armhf               8.3.0-6+rpi1                        armhf        GCC, the GNU Compiler Collection (base package)
ii  gdb                            8.2.1-2                             armhf        GNU Debugger
ii  gdbm-l10n                      1.18.1-4                            all          GNU dbm database routines (translation files)
ii  geoip-database                 20181108-1                          all          IP lookup command line tools that use the GeoIP library (country database)
ii  gettext-base                   0.19.8.1-9                          armhf        GNU Internationalization utilities for the base system
ii  gnupg                          2.2.12-1+rpi1+deb10u1               all          GNU privacy guard - a free PGP replacement
ii  gnupg-l10n                     2.2.12-1+rpi1+deb10u1               all          GNU privacy guard - localization files
ii  gnupg-utils                    2.2.12-1+rpi1+deb10u1               armhf        GNU privacy guard - utility programs
ii  gpg                            2.2.12-1+rpi1+deb10u1               armhf        GNU Privacy Guard -- minimalist public key operations
ii  gpg-agent                      2.2.12-1+rpi1+deb10u1               armhf        GNU privacy guard - cryptographic agent
ii  gpg-wks-client                 2.2.12-1+rpi1+deb10u1               armhf        GNU privacy guard - Web Key Service client
ii  gpg-wks-server                 2.2.12-1+rpi1+deb10u1               armhf        GNU privacy guard - Web Key Service server
ii  gpgconf                        2.2.12-1+rpi1+deb10u1               armhf        GNU privacy guard - core configuration utilities
ii  gpgsm                          2.2.12-1+rpi1+deb10u1               armhf        GNU privacy guard - S/MIME version
ii  gpgv                           2.2.12-1+rpi1+deb10u1               armhf        GNU privacy guard - signature verification tool
ii  grep                           3.3-1                               armhf        GNU grep, egrep and fgrep
ii  groff-base                     1.22.4-3                            armhf        GNU troff text-formatting system (base system components)
ii  gzip                           1.9-3                               armhf        GNU compression utilities
ii  hardlink                       0.3.2                               armhf        Hardlinks multiple copies of the same file
ii  hostname                       3.21                                armhf        utility to set/show the host name or domain name
ii  htop                           2.2.0-1                             armhf        interactive processes viewer
ii  ifupdown                       0.8.35                              armhf        high level tools to configure network interfaces
ii  info                           6.5.0.dfsg.1-4+b1                   armhf        Standalone GNU Info documentation browser
ii  init                           1.56+nmu1                           armhf        metapackage ensuring an init system is installed
ii  init-system-helpers            1.56+nmu1                           all          helper tools for all init systems
ii  initramfs-tools                0.133+deb10u1                       all          generic modular initramfs generator (automation)
ii  initramfs-tools-core           0.133+deb10u1                       all          generic modular initramfs generator (core tools)
ii  install-info                   6.5.0.dfsg.1-4+b1                   armhf        Manage installed documentation in info format
ii  iproute2                       4.20.0-2                            armhf        networking and traffic control tools
ii  iptables                       1.8.2-4                             armhf        administration tools for packet filtering and NAT
ii  iputils-ping                   3:20180629-2                        armhf        Tools to test the reachability of network hosts
ii  isc-dhcp-client                4.4.1-2                             armhf        DHCP client for automatically obtaining an IP address
ii  isc-dhcp-common                4.4.1-2                             armhf        common manpages relevant to all of the isc-dhcp packages
ii  iso-codes                      4.2-1                               all          ISO language, territory, currency, script codes and their translations
ii  iw                             5.0.1-1                             armhf        tool for configuring Linux wireless devices
ii  kbd                            2.0.4-4                             armhf        Linux console font and keytable utilities
ii  keyboard-configuration         1.193~deb10u1                       all          system-wide keyboard preferences
ii  keyutils                       1.6-6                               armhf        Linux Key Management Utilities
ii  klibc-utils                    2.0.6-1+rpi1                        armhf        small utilities built with klibc for early boot
ii  kmod                           26-1                                armhf        tools for managing Linux kernel modules
ii  less                           487-0.1                             armhf        pager program similar to more
ii  libacl1:armhf                  2.2.53-4                            armhf        access control list - shared library
ii  libalgorithm-diff-perl         1.19.03-2                           all          module to find differences between files
ii  libalgorithm-diff-xs-perl      0.04-5+b1                           armhf        module to find differences between files (XS accelerated)
ii  libalgorithm-merge-perl        0.08-3                              all          Perl module for three-way merge of textual data
ii  libapparmor1:armhf             2.13.2-10                           armhf        changehat AppArmor library
ii  libapt-inst2.0:armhf           1.8.2                               armhf        deb package format runtime library
ii  libapt-pkg5.0:armhf            1.8.2                               armhf        package management runtime library
ii  libargon2-1:armhf              0~20171227-0.2                      armhf        memory-hard hashing function - runtime library
ii  libasan5:armhf                 8.3.0-6+rpi1                        armhf        AddressSanitizer -- a fast memory error detector
ii  libasound2:armhf               1.1.8-1+rpt1                        armhf        shared library for ALSA applications
ii  libasound2-data                1.1.8-1+rpt1                        all          Configuration files and profiles for ALSA drivers
ii  libassuan0:armhf               2.5.2-1                             armhf        IPC library for the GnuPG components
ii  libatomic1:armhf               8.3.0-6+rpi1                        armhf        support library providing __atomic built-in functions
ii  libattr1:armhf                 1:2.4.48-4                          armhf        extended attribute handling - shared library
ii  libaudit-common                1:2.8.4-3                           all          Dynamic library for security auditing - common files
ii  libaudit1:armhf                1:2.8.4-3                           armhf        Dynamic library for security auditing
ii  libavahi-common-data:armhf     0.7-4+b1                            armhf        Avahi common data files
ii  libavahi-common3:armhf         0.7-4+b1                            armhf        Avahi common library
ii  libavahi-core7:armhf           0.7-4+b1                            armhf        Avahi's embeddable mDNS/DNS-SD library
ii  libbabeltrace1:armhf           1.5.6-2+deb10u1                     armhf        Babeltrace conversion libraries
ii  libbind9-161:armhf             1:9.11.5.P4+dfsg-5.1                armhf        BIND9 Shared Library used by BIND
ii  libbinutils:armhf              2.31.1-16+rpi1                      armhf        GNU binary utilities (private shared library)
ii  libblkid1:armhf                2.33.1-0.1                          armhf        block device ID library
ii  libboost-iostreams1.58.0:armhf 1.58.0+dfsg-5.1+rpi1+b4             armhf        Boost.Iostreams Library
ii  libbsd0:armhf                  0.9.1-2                             armhf        utility functions from BSD systems - shared library
ii  libbz2-1.0:armhf               1.0.6-9.2~deb10u1                   armhf        high-quality block-sorting file compressor library - runtime
ii  libc-bin                       2.28-10+rpi1                        armhf        GNU C Library: Binaries
ii  libc-dev-bin                   2.28-10+rpi1                        armhf        GNU C Library: Development binaries
ii  libc-l10n                      2.28-10+rpi1                        all          GNU C Library: localization files
ii  libc6:armhf                    2.28-10+rpi1                        armhf        GNU C Library: Shared libraries
ii  libc6-dbg:armhf                2.28-10+rpi1                        armhf        GNU C Library: detached debugging symbols
ii  libc6-dev:armhf                2.28-10+rpi1                        armhf        GNU C Library: Development Libraries and Header Files
ii  libcap-ng0:armhf               0.7.9-2                             armhf        An alternate POSIX capabilities library
ii  libcap2:armhf                  1:2.25-2                            armhf        POSIX 1003.1e capabilities (library)
ii  libcap2-bin                    1:2.25-2                            armhf        POSIX 1003.1e capabilities (utilities)
ii  libcc1-0:armhf                 8.3.0-6+rpi1                        armhf        GCC cc1 plugin for GDB
ii  libcom-err2:armhf              1.44.5-1+deb10u2                    armhf        common error description library
ii  libcryptsetup12:armhf          2:2.1.0-5+deb10u2                   armhf        disk encryption support - shared library
ii  libcurl4:armhf                 7.64.0-4                            armhf        easy-to-use client-side URL transfer library (OpenSSL flavour)
ii  libdaemon0:armhf               0.14-7                              armhf        lightweight C library for daemons - runtime library
ii  libdb5.3:armhf                 5.3.28+dfsg1-0.5                    armhf        Berkeley v5.3 Database Libraries [runtime]
ii  libdbus-1-3:armhf              1.12.16-1                           armhf        simple interprocess messaging system (library)
ii  libdebconfclient0:armhf        0.249                               armhf        Debian Configuration Management System (C-implementation library)
ii  libdevmapper1.02.1:armhf       2:1.02.155-3                        armhf        Linux Kernel Device Mapper userspace library
ii  libdns-export1104              1:9.11.5.P4+dfsg-5.1                armhf        Exported DNS Shared Library
ii  libdns1104:armhf               1:9.11.5.P4+dfsg-5.1                armhf        DNS Shared Library used by BIND
ii  libdpkg-perl                   1.19.7                              all          Dpkg perl modules
ii  libdw1:armhf                   0.176-1.1                           armhf        library that provides access to the DWARF debug information
ii  libedit2:armhf                 3.1-20181209-1                      armhf        BSD editline and history libraries
ii  libelf1:armhf                  0.176-1.1                           armhf        library to read and write ELF files
ii  libestr0:armhf                 0.1.10-2.1                          armhf        Helper functions for handling strings (lib)
ii  libevent-2.1-6:armhf           2.1.8-stable-4                      armhf        Asynchronous event notification library
ii  libexpat1:armhf                2.2.6-2+deb10u1                     armhf        XML parsing C library - runtime library
ii  libext2fs2:armhf               1.44.5-1+deb10u2                    armhf        ext2/ext3/ext4 file system libraries
ii  libfakeroot:armhf              1.23-1                              armhf        tool for simulating superuser privileges - shared libraries
ii  libfastjson4:armhf             0.99.8-2                            armhf        fast json library for C
ii  libfdisk1:armhf                2.33.1-0.1                          armhf        fdisk partitioning library
ii  libffi6:armhf                  3.2.1-9                             armhf        Foreign Function Interface library runtime
ii  libfftw3-single3:armhf         3.3.8-2                             armhf        Library for computing Fast Fourier Transforms - Single precision
ii  libfile-fcntllock-perl         0.22-3+b4                           armhf        Perl module for file locking with fcntl(2)
ii  libfreetype6:armhf             2.9.1-3+deb10u1                     armhf        FreeType 2 font engine, shared library files
ii  libfreetype6-dev:armhf         2.9.1-3+deb10u1                     armhf        FreeType 2 font engine, development files
ii  libfribidi0:armhf              1.0.5-3.1+deb10u1                   armhf        Free Implementation of the Unicode BiDi algorithm
ii  libfstrm0:armhf                0.4.0-1                             armhf        Frame Streams (fstrm) library
ii  libftdi1-2:armhf               1.4-1+b2                            armhf        Library to control and program the FTDI USB controllers
ii  libfuse2:armhf                 2.9.9-1                             armhf        Filesystem in Userspace (library)
ii  libgcc-8-dev:armhf             8.3.0-6+rpi1                        armhf        GCC support library (development files)
ii  libgcc1:armhf                  1:8.3.0-6+rpi1                      armhf        GCC support library
ii  libgcrypt20:armhf              1.8.4-5                             armhf        LGPL Crypto library - runtime library
ii  libgdbm-compat4:armhf          1.18.1-4                            armhf        GNU dbm database routines (legacy support runtime version)
ii  libgdbm6:armhf                 1.18.1-4                            armhf        GNU dbm database routines (runtime version)
ii  libgeoip1:armhf                1.6.12-1                            armhf        non-DNS IP-to-country resolver library
ii  libglib2.0-0:armhf             2.58.3-2+deb10u2                    armhf        GLib library of C routines
ii  libglib2.0-data                2.58.3-2+deb10u2                    all          Common files for GLib library
ii  libgmp10:armhf                 2:6.1.2+dfsg-4                      armhf        Multiprecision arithmetic library
ii  libgnutls30:armhf              3.6.7-4                             armhf        GNU TLS library - main runtime library
ii  libgomp1:armhf                 8.3.0-6+rpi1                        armhf        GCC OpenMP (GOMP) support library
ii  libgpg-error0:armhf            1.35-1                              armhf        GnuPG development runtime library
ii  libgpm2:armhf                  1.20.7-5                            armhf        General Purpose Mouse - shared library
ii  libgssapi-krb5-2:armhf         1.17-3                              armhf        MIT Kerberos runtime libraries - krb5 GSS-API Mechanism
ii  libhogweed4:armhf              3.4.1-1                             armhf        low level cryptographic library (public-key cryptos)
ii  libicu63:armhf                 63.1-6                              armhf        International Components for Unicode
ii  libident                       0.22-3.1                            armhf        simple RFC1413 client library - runtime
ii  libidn11:armhf                 1.33-2.2                            armhf        GNU Libidn library, implementation of IETF IDN specifications
ii  libidn2-0:armhf                2.0.5-1+deb10u1                     armhf        Internationalized domain names (IDNA2008/TR46) library
ii  libip4tc0:armhf                1.8.2-4                             armhf        netfilter libip4tc library
ii  libip6tc0:armhf                1.8.2-4                             armhf        netfilter libip6tc library
ii  libiptc0:armhf                 1.8.2-4                             armhf        netfilter libiptc library
ii  libisc-export1100:armhf        1:9.11.5.P4+dfsg-5.1                armhf        Exported ISC Shared Library
ii  libisc1100:armhf               1:9.11.5.P4+dfsg-5.1                armhf        ISC Shared Library used by BIND
ii  libisccc161:armhf              1:9.11.5.P4+dfsg-5.1                armhf        Command Channel Library used by BIND
ii  libisccfg163:armhf             1:9.11.5.P4+dfsg-5.1                armhf        Config File Handling Library used by BIND
ii  libisl19:armhf                 0.20-2                              armhf        manipulating sets and relations of integer points bounded by linear constraints
ii  libiw30:armhf                  30~pre9-13                          armhf        Wireless tools - library
ii  libjim0.77:armhf               0.77+dfsg0-3                        armhf        small-footprint implementation of Tcl - shared library
ii  libjpeg62-turbo:armhf          1:1.5.2-2+b1                        armhf        libjpeg-turbo JPEG runtime library
ii  libjson-c3:armhf               0.12.1+ds-2                         armhf        JSON manipulation library - shared library
ii  libk5crypto3:armhf             1.17-3                              armhf        MIT Kerberos runtime libraries - Crypto Library
ii  libkeyutils1:armhf             1.6-6                               armhf        Linux Key Management Utilities (library)
ii  libklibc:armhf                 2.0.6-1+rpi1                        armhf        minimal libc subset for use with initramfs
ii  libkmod2:armhf                 26-1                                armhf        libkmod shared library
ii  libkrb5-3:armhf                1.17-3                              armhf        MIT Kerberos runtime libraries
ii  libkrb5support0:armhf          1.17-3                              armhf        MIT Kerberos runtime libraries - Support library
ii  libksba8:armhf                 1.3.5-2                             armhf        X.509 and CMS support library
ii  libldap-2.4-2:armhf            2.4.47+dfsg-3+rpi1+deb10u1          armhf        OpenLDAP libraries
ii  libldap-common                 2.4.47+dfsg-3+rpi1+deb10u1          all          OpenLDAP common files for libraries
ii  liblmdb0:armhf                 0.9.22-1                            armhf        Lightning Memory-Mapped Database shared library
ii  liblocale-gettext-perl         1.07-3+b3                           armhf        module using libc functions for internationalization in Perl
ii  liblognorm5:armhf              2.0.5-1                             armhf        log normalizing library
ii  libluajit-5.1-2:armhf          2.1.0~beta3+dfsg-5.1                armhf        Just in time compiler for Lua - library version
ii  libluajit-5.1-common           2.1.0~beta3+dfsg-5.1                all          Just in time compiler for Lua - common files
ii  liblwres161:armhf              1:9.11.5.P4+dfsg-5.1                armhf        Lightweight Resolver Library used by BIND
ii  liblz4-1:armhf                 1.8.3-1                             armhf        Fast LZ compression algorithm library - runtime
ii  liblzma5:armhf                 5.2.4-1                             armhf        XZ-format compression library
ii  libmagic-mgc                   1:5.35-4+deb10u1                    armhf        File type determination library using &quot;magic&quot; numbers (compiled magic file)
ii  libmagic1:armhf                1:5.35-4+deb10u1                    armhf        Recognize the type of data in a file using &quot;magic&quot; numbers - library
ii  libmnl-dev                     1.0.4-2                             armhf        minimalistic Netlink communication library (devel)
ii  libmnl0:armhf                  1.0.4-2                             armhf        minimalistic Netlink communication library
ii  libmount1:armhf                2.33.1-0.1                          armhf        device mounting library
ii  libmpc3:armhf                  1.1.0-1                             armhf        multiple precision complex floating-point library
ii  libmpdec2:armhf                2.4.2-2                             armhf        library for decimal floating point arithmetic (runtime library)
ii  libmpfr6:armhf                 4.0.2-1                             armhf        multiple precision floating-point computation
ii  libmtp-common                  1.1.16-2                            all          Media Transfer Protocol (MTP) common files
ii  libmtp-runtime                 1.1.16-2                            armhf        Media Transfer Protocol (MTP) runtime tools
ii  libmtp9:armhf                  1.1.16-2                            armhf        Media Transfer Protocol (MTP) library
ii  libncurses6:armhf              6.1+20181013-2+deb10u2              armhf        shared libraries for terminal handling
ii  libncursesw5:armhf             6.1+20181013-2+deb10u2              armhf        shared libraries for terminal handling (wide character legacy version)
ii  libncursesw6:armhf             6.1+20181013-2+deb10u2              armhf        shared libraries for terminal handling (wide character support)
ii  libnetfilter-conntrack3:armhf  1.0.7-1                             armhf        Netfilter netlink-conntrack library
ii  libnettle6:armhf               3.4.1-1                             armhf        low level cryptographic library (symmetric and one-way cryptos)
ii  libnewt0.52:armhf              0.52.20-8                           armhf        Not Erik's Windowing Toolkit - text mode windowing with slang
ii  libnfnetlink0:armhf            1.0.1-3                             armhf        Netfilter netlink library
ii  libnfsidmap2:armhf             0.25-5.1                            armhf        NFS idmapping library
ii  libnftnl11:armhf               1.1.2-2                             armhf        Netfilter nftables userspace API library
ii  libnghttp2-14:armhf            1.36.0-2+deb10u1                    armhf        library implementing HTTP/2 protocol (shared library)
ii  libnl-3-200:armhf              3.4.0-1                             armhf        library for dealing with netlink sockets
ii  libnl-genl-3-200:armhf         3.4.0-1                             armhf        library for dealing with netlink sockets - generic netlink
ii  libnl-route-3-200:armhf        3.4.0-1                             armhf        library for dealing with netlink sockets - route interface
ii  libnpth0:armhf                 1.6-1                               armhf        replacement for GNU Pth using system threads
ii  libnss-mdns:armhf              0.14.1-1+b5                         armhf        NSS module for Multicast DNS name resolution
ii  libntfs-3g883                  1:2017.3.23AR.3-3                   armhf        read/write NTFS driver for FUSE (runtime library)
ii  libp11-kit0:armhf              0.23.15-2                           armhf        library for loading and coordinating access to PKCS#11 modules - runtime
ii  libpam-chksshpwd:armhf         1.3.1-5+rpt1                        armhf        PAM module to enable SSH password checking support
ii  libpam-modules:armhf           1.3.1-5+rpt1                        armhf        Pluggable Authentication Modules for PAM
ii  libpam-modules-bin             1.3.1-5+rpt1                        armhf        Pluggable Authentication Modules for PAM - helper binaries
ii  libpam-runtime                 1.3.1-5+rpt1                        all          Runtime support for the PAM library
ii  libpam-systemd:armhf           241-7~deb10u2+rpi1                  armhf        system and service manager - PAM module
ii  libpam0g:armhf                 1.3.1-5+rpt1                        armhf        Pluggable Authentication Modules library
ii  libparted2:armhf               3.2-25                              armhf        disk partition manipulator - shared library
ii  libpci3:armhf                  1:3.5.2-1                           armhf        Linux PCI Utilities (shared library)
ii  libpcre2-8-0:armhf             10.32-5                             armhf        New Perl Compatible Regular Expression Library- 8 bit runtime files
ii  libpcre2-posix0:armhf          10.32-5                             armhf        New Perl Compatible Regular Expression Library - posix-compatible runtime files
ii  libpcre3:armhf                 2:8.39-12                           armhf        Old Perl 5 Compatible Regular Expression Library - runtime files
ii  libpcsclite1:armhf             1.8.24-1                            armhf        Middleware to access a smart card using PC/SC (library)
ii  libperl5.28:armhf              5.28.1-6                            armhf        shared Perl library
ii  libpipeline1:armhf             1.5.1-2                             armhf        pipeline manipulation library
ii  libpng-dev:armhf               1.6.36-6                            armhf        PNG library - development (version 1.6)
ii  libpng-tools                   1.6.36-6                            armhf        PNG library - tools (version 1.6)
ii  libpng16-16:armhf              1.6.36-6                            armhf        PNG library - runtime (version 1.6)
ii  libpolkit-agent-1-0:armhf      0.105-25                            armhf        PolicyKit Authentication Agent API
ii  libpolkit-backend-1-0:armhf    0.105-25                            armhf        PolicyKit backend API
ii  libpolkit-gobject-1-0:armhf    0.105-25                            armhf        PolicyKit Authorization API
ii  libpopt0:armhf                 1.16-12                             armhf        lib for parsing cmdline parameters
ii  libprocps7:armhf               2:3.3.15-2                          armhf        library for accessing process information from /proc
ii  libprotobuf-c1:armhf           1.3.1-1+b1                          armhf        Protocol Buffers C shared library (protobuf-c)
ii  libpsl5:armhf                  0.20.2-2                            armhf        Library for Public Suffix List (shared libraries)
ii  libpython-stdlib:armhf         2.7.16-1                            armhf        interactive high-level object-oriented language (Python2)
ii  libpython2-stdlib:armhf        2.7.16-1                            armhf        interactive high-level object-oriented language (Python2)
ii  libpython2.7-minimal:armhf     2.7.16-2+deb10u1                    armhf        Minimal subset of the Python language (version 2.7)
ii  libpython2.7-stdlib:armhf      2.7.16-2+deb10u1                    armhf        Interactive high-level object-oriented language (standard library, version 2.7)
ii  libpython3-stdlib:armhf        3.7.3-1                             armhf        interactive high-level object-oriented language (default python3 version)
ii  libpython3.7:armhf             3.7.3-2                             armhf        Shared Python runtime library (version 3.7)
ii  libpython3.7-minimal:armhf     3.7.3-2                             armhf        Minimal subset of the Python language (version 3.7)
ii  libpython3.7-stdlib:armhf      3.7.3-2                             armhf        Interactive high-level object-oriented language (standard library, version 3.7)
ii  libraspberrypi-bin             1.20200205-1                        armhf        Miscellaneous Raspberry Pi utilities
ii  libraspberrypi-dev             1.20200205-1                        armhf        EGL/GLES/OpenVG/etc. libraries for the Raspberry Pi's VideoCore IV (headers)
ii  libraspberrypi-doc             1.20200205-1                        armhf        EGL/GLES/OpenVG/etc. libraries for the Raspberry Pi's VideoCore IV (headers)
ii  libraspberrypi0                1.20200205-1                        armhf        EGL/GLES/OpenVG/etc. libraries for the Raspberry Pi's VideoCore IV
ii  libreadline6:armhf             6.3-9                               armhf        GNU readline and history libraries, run-time libraries
ii  libreadline7:armhf             7.0-5                               armhf        GNU readline and history libraries, run-time libraries
ii  librtmp1:armhf                 2.4+20151223.gitfa8646d.1-2         armhf        toolkit for RTMP streams (shared library)
ii  libsamplerate0:armhf           0.1.9-2                             armhf        Audio sample rate conversion library
ii  libsasl2-2:armhf               2.1.27+dfsg-1+deb10u1               armhf        Cyrus SASL - authentication abstraction library
ii  libsasl2-modules-db:armhf      2.1.27+dfsg-1+deb10u1               armhf        Cyrus SASL - pluggable authentication modules (DB)
ii  libseccomp2:armhf              2.3.3-4                             armhf        high level interface to Linux seccomp filter
ii  libselinux1:armhf              2.8-1+b1                            armhf        SELinux runtime shared libraries
ii  libsemanage-common             2.8-2                               all          Common files for SELinux policy management libraries
ii  libsemanage1:armhf             2.8-2                               armhf        SELinux policy management library
ii  libsepol1:armhf                2.8-1                               armhf        SELinux library for manipulating binary security policies
ii  libsigc++-1.2-5c2              1.2.7-2+b1                          armhf        type-safe Signal Framework for C++ - runtime
ii  libslang2:armhf                2.3.2-2                             armhf        S-Lang programming library - runtime version
ii  libsmartcols1:armhf            2.33.1-0.1                          armhf        smart column output alignment library
ii  libsqlite3-0:armhf             3.27.2-3                            armhf        SQLite 3 shared library
ii  libss2:armhf                   1.44.5-1+deb10u2                    armhf        command-line interface parsing library
ii  libssh2-1:armhf                1.8.0-2.1                           armhf        SSH2 client-side library
ii  libssl1.1:armhf                1.1.1d-0+deb10u2+rpt1               armhf        Secure Sockets Layer toolkit - shared libraries
ii  libstdc++-8-dev:armhf          8.3.0-6+rpi1                        armhf        GNU Standard C++ Library v3 (development files)
ii  libstdc++6:armhf               8.3.0-6+rpi1                        armhf        GNU Standard C++ Library v3
ii  libsystemd0:armhf              241-7~deb10u2+rpi1                  armhf        systemd utility library
ii  libtalloc2:armhf               2.1.14-2                            armhf        hierarchical pool based memory allocator
ii  libtasn1-6:armhf               4.13-3                              armhf        Manage ASN.1 structures (runtime)
ii  libtext-charwidth-perl         0.04-7.1+b1                         armhf        get display widths of characters on the terminal
ii  libtext-iconv-perl             1.7-5+b10                           armhf        converts between character sets in Perl
ii  libtext-wrapi18n-perl          0.06-7.1                            all          internationalized substitute of Text::Wrap
ii  libtinfo5:armhf                6.1+20181013-2+deb10u2              armhf        shared low-level terminfo library (legacy version)
ii  libtinfo6:armhf                6.1+20181013-2+deb10u2              armhf        shared low-level terminfo library for terminal handling
ii  libtirpc-common                1.1.4-0.4                           all          transport-independent RPC library - common files
ii  libtirpc3:armhf                1.1.4-0.4                           armhf        transport-independent RPC library
ii  libubsan1:armhf                8.3.0-6+rpi1                        armhf        UBSan -- undefined behaviour sanitizer (runtime)
ii  libuchardet0:armhf             0.0.6-3                             armhf        universal charset detection library - shared library
ii  libudev0:armhf                 175-7.2                             armhf        libudev shared library
ii  libudev1:armhf                 241-7~deb10u2+rpi1                  armhf        libudev shared library
ii  libunistring2:armhf            0.9.10-1                            armhf        Unicode string library for C
ii  libusb-0.1-4:armhf             2:0.1.12-32                         armhf        userspace USB programming library
ii  libusb-1.0-0:armhf             2:1.0.22-2                          armhf        userspace USB programming library
ii  libuuid1:armhf                 2.33.1-0.1                          armhf        Universally Unique ID library
ii  libv4l-0:armhf                 1.16.3-3                            armhf        Collection of video4linux support libraries
ii  libv4l2rds0:armhf              1.16.3-3                            armhf        Video4Linux Radio Data System (RDS) decoding library
ii  libv4lconvert0:armhf           1.16.3-3                            armhf        Video4linux frame format conversion library
ii  libwbclient0:armhf             2:4.9.5+dfsg-5+deb10u1+rpi1         armhf        Samba winbind client library
ii  libwrap0:armhf                 7.6.q-28                            armhf        Wietse Venema's TCP wrappers library
ii  libx11-6:armhf                 2:1.6.7-1                           armhf        X11 client-side library
ii  libx11-data                    2:1.6.7-1                           all          X11 client-side library
ii  libxau6:armhf                  1:1.0.8-1+b2                        armhf        X11 authorisation library
ii  libxcb1:armhf                  1.13.1-2                            armhf        X C Binding
ii  libxdmcp6:armhf                1:1.1.2-3                           armhf        X11 Display Manager Control Protocol library
ii  libxext6:armhf                 2:1.3.3-1+b2                        armhf        X11 miscellaneous extension library
ii  libxml2:armhf                  2.9.4+dfsg1-7+b3                    armhf        GNOME XML library
ii  libxmuu1:armhf                 2:1.1.2-2+b3                        armhf        X11 miscellaneous micro-utility library
ii  libxtables12:armhf             1.8.2-4                             armhf        netfilter xtables library
ii  libzstd1:armhf                 1.3.8+dfsg-3+rpi1                   armhf        fast lossless compression algorithm
ii  linux-base                     4.6                                 all          Linux image base package
ii  linux-libc-dev:armhf           4.18.20-2+rpi1                      armhf        Linux support headers for userspace development
ii  locales                        2.28-10+rpi1                        all          GNU C Library: National Language (locale) data [support]
ii  login                          1:4.5-1.1                           armhf        system login tools
ii  logrotate                      3.14.0-4                            armhf        Log rotation utility
ii  lsb-base                       10.2019051400+rpi1                  all          Linux Standard Base init script functionality
ii  lsb-release                    10.2019051400+rpi1                  all          Linux Standard Base version reporting utility
ii  lua5.1                         5.1.5-8.1+b1                        armhf        Simple, extensible, embeddable programming language
ii  luajit                         2.1.0~beta3+dfsg-5.1                armhf        Just in time compiler for Lua programming language version 5.1
ii  make                           4.2.1-1.2                           armhf        utility for directing compilation
ii  man-db                         2.8.5-2                             armhf        on-line manual pager
ii  manpages                       4.16-2                              all          Manual pages about using a GNU/Linux system
ii  manpages-dev                   4.16-2                              all          Manual pages about using GNU/Linux for development
ii  mawk                           1.3.3-17                            armhf        a pattern scanning and text processing language
ii  mime-support                   3.62                                all          MIME files 'mime.types' &amp; 'mailcap', and support programs
ii  mount                          2.33.1-0.1                          armhf        tools for mounting and manipulating filesystems
ii  multiarch-support              2.28-10+rpi1                        armhf        Transitional package to ensure multiarch compatibility
ii  nano                           3.2-3                               armhf        small, friendly text editor inspired by Pico
ii  ncdu                           1.13-1                              armhf        ncurses disk usage viewer
ii  ncurses-base                   6.1+20181013-2+deb10u2              all          basic terminal type definitions
ii  ncurses-bin                    6.1+20181013-2+deb10u2              armhf        terminal-related programs and man pages
ii  ncurses-term                   6.1+20181013-2+deb10u2              all          additional terminal type definitions
ii  net-tools                      1.60+git20180626.aebd88e-1          armhf        NET-3 networking toolkit
ii  netbase                        5.6                                 all          Basic TCP/IP networking system
ii  netcat-openbsd                 1.195-2                             armhf        TCP/IP swiss army knife
ii  netcat-traditional             1.10-41.1                           armhf        TCP/IP swiss army knife
ii  nfs-common                     1:1.3.4-2.5                         armhf        NFS support files common to client and server
ii  ntfs-3g                        1:2017.3.23AR.3-3                   armhf        read/write NTFS driver for FUSE
ii  openresolv                     3.8.0-1                             armhf        management framework for resolv.conf
ii  openssh-client                 1:7.9p1-10+deb10u1                  armhf        secure shell (SSH) client, for secure access to remote machines
ii  openssh-server                 1:7.9p1-10+deb10u1                  armhf        secure shell (SSH) server, for secure access from remote machines
ii  openssh-sftp-server            1:7.9p1-10+deb10u1                  armhf        secure shell (SSH) sftp server module, for SFTP access from remote machines
ii  openssl                        1.1.1d-0+deb10u2+rpt1               armhf        Secure Sockets Layer toolkit - cryptographic utility
ii  parted                         3.2-25                              armhf        disk partition manipulator
ii  passwd                         1:4.5-1.1                           armhf        change and administer password and group data
ii  patch                          2.7.6-3+deb10u1                     armhf        Apply a diff file to an original
ii  paxctld                        1.2.1-1                             armhf        Daemon to automatically set appropriate PaX flags
ii  pciutils                       1:3.5.2-1                           armhf        Linux PCI Utilities
ii  perl                           5.28.1-6                            armhf        Larry Wall's Practical Extraction and Report Language
ii  perl-base                      5.28.1-6                            armhf        minimal Perl system
ii  perl-modules-5.28              5.28.1-6                            all          Core Perl modules
ii  pi-bluetooth                   0.1.12                              all          Raspberry Pi 3 bluetooth
ii  pigz                           2.4-1                               armhf        Parallel Implementation of GZip
ii  pinentry-curses                1.1.0-2                             armhf        curses-based PIN or pass-phrase entry dialog for GnuPG
ii  pkg-config                     0.29-6                              armhf        manage compile and link flags for libraries
ii  policykit-1                    0.105-25                            armhf        framework for managing administrative policies and privileges
ii  procps                         2:3.3.15-2                          armhf        /proc file system utilities
ii  psmisc                         23.2-1                              armhf        utilities that use the proc file system
ii  publicsuffix                   20190415.1030-1                     all          accurate, machine-readable list of domain name suffixes
ii  python                         2.7.16-1                            armhf        interactive high-level object-oriented language (Python2 version)
ii  python-apt-common              1.8.4.1                             all          Python interface to libapt-pkg (locales)
ii  python-minimal                 2.7.16-1                            armhf        minimal subset of the Python2 language
ii  python-rpi.gpio                0.7.0~buster-1                      armhf        Python GPIO module for Raspberry Pi
ii  python2                        2.7.16-1                            armhf        interactive high-level object-oriented language (Python2 version)
ii  python2-minimal                2.7.16-1                            armhf        minimal subset of the Python2 language
ii  python2.7                      2.7.16-2+deb10u1                    armhf        Interactive high-level object-oriented language (version 2.7)
ii  python2.7-minimal              2.7.16-2+deb10u1                    armhf        Minimal subset of the Python language (version 2.7)
ii  python3                        3.7.3-1                             armhf        interactive high-level object-oriented language (default python3 version)
ii  python3-apt                    1.8.4.1                             armhf        Python 3 interface to libapt-pkg
ii  python3-certifi                2018.8.24-1                         all          root certificates for validating SSL certs and verifying TLS hosts (python3)
ii  python3-chardet                3.0.4-3                             all          universal character encoding detector for Python3
ii  python3-debconf                1.5.71                              all          interact with debconf from Python 3
ii  python3-idna                   2.6-1                               all          Python IDNA2008 (RFC 5891) handling (Python 3)
ii  python3-minimal                3.7.3-1                             armhf        minimal subset of the Python language (default python3 version)
ii  python3-pkg-resources          40.8.0-1                            all          Package Discovery and Resource Access using pkg_resources
ii  python3-requests               2.21.0-1                            all          elegant and simple HTTP library for Python3, built for human beings
ii  python3-six                    1.12.0-1                            all          Python 2 and 3 compatibility library (Python 3 interface)
ii  python3-urllib3                1.24.1-1                            all          HTTP library with thread-safe connection pooling for Python3
ii  python3.7                      3.7.3-2                             armhf        Interactive high-level object-oriented language (version 3.7)
ii  python3.7-minimal              3.7.3-2                             armhf        Minimal subset of the Python language (version 3.7)
ii  raspberrypi-bootloader         1.20200205-1                        armhf        Raspberry Pi bootloader
ii  raspberrypi-kernel             1.20200205-1                        armhf        Raspberry Pi bootloader
ii  raspberrypi-net-mods           1.3.0                               all          Network configuration for the Raspberry Pi UI
ii  raspberrypi-sys-mods           20191105                            armhf        System tweaks for the Raspberry Pi
ii  raspbian-archive-keyring       20120528.2                          all          GnuPG archive keys of the raspbian archive
ii  raspi-config                   20200205                            all          Raspberry Pi configuration tool
ii  raspi-copies-and-fills         0.13                                armhf        ARM-accelerated versions of selected functions from string.h
ii  readline-common                7.0-5                               all          GNU readline and history libraries, common files
ii  rfkill                         2.33.1-0.1                          armhf        tool for enabling and disabling wireless devices
ii  rng-tools                      2-unofficial-mt.14-1                armhf        Daemon to use a Hardware TRNG
ii  rpcbind                        1.2.5-0.3+deb10u1                   armhf        converts RPC program numbers into universal addresses
ii  rpi-eeprom                     4.0-1                               armhf        Raspberry Pi 4 boot EEPROM updater
ii  rpi-eeprom-images              4.0-1                               all          Raspberry Pi 4 boot EEPROM images
ii  rpi-update                     20140705                            all          Raspberry Pi firmware updating tool
ii  rsync                          3.1.3-6                             armhf        fast, versatile, remote (and local) file-copying tool
ii  rsyslog                        8.1901.0-1                          armhf        reliable system and kernel logging daemon
ii  sed                            4.7-1                               armhf        GNU stream editor for filtering/transforming text
ii  sensible-utils                 0.0.12                              all          Utilities for sensible alternative selection
ii  shared-mime-info               1.10-1                              armhf        FreeDesktop.org shared MIME database and spec
ii  ssh                            1:7.9p1-10+deb10u1                  all          secure shell client and server (metapackage)
ii  ssh-import-id                  5.7-1                               all          securely retrieve an SSH public key and install it locally
ii  strace                         4.26-0.2                            armhf        System call tracer
ii  sudo                           1.8.27-1+deb10u1                    armhf        Provide limited super user privileges to specific users
ii  systemd                        241-7~deb10u2+rpi1                  armhf        system and service manager
ii  systemd-sysv                   241-7~deb10u2+rpi1                  armhf        system and service manager - SysV links
ii  sysvinit-utils                 2.93-8                              armhf        System-V-like utilities
ii  tar                            1.30+dfsg-6                         armhf        GNU version of the tar archiving utility
ii  tasksel                        3.53                                all          tool for selecting tasks for installation on Debian systems
ii  tasksel-data                   3.53                                all          official tasks used for installation of Debian systems
ii  traceroute                     1:2.1.0-2                           armhf        Traces the route taken by packets over an IPv4/IPv6 network
ii  triggerhappy                   0.5.0-1                             armhf        global hotkey daemon for Linux
ii  tzdata                         2019c-0+deb10u1                     all          time zone and daylight-saving time data
ii  ucf                            3.0038+nmu1                         all          Update Configuration File(s): preserve user changes to config files
ii  udev                           241-7~deb10u2+rpi1                  armhf        /dev/ and hotplug management daemon
ii  unzip                          6.0-23+deb10u1                      armhf        De-archiver for .zip files
ii  usb-modeswitch                 2.5.2+repack0-2                     armhf        mode switching tool for controlling &quot;flip flop&quot; USB devices
ii  usb-modeswitch-data            20170806-2                          all          mode switching data for usb-modeswitch
ii  usb.ids                        2019.07.27-0+deb10u1                all          USB ID Repository
ii  usbutils                       1:010-3                             armhf        Linux USB utilities
ii  util-linux                     2.33.1-0.1                          armhf        miscellaneous system utilities
ii  v4l-utils                      1.16.3-3                            armhf        Collection of command line video4linux utilities
ii  vim-common                     2:8.1.0875-5                        all          Vi IMproved - Common files
ii  vim-tiny                       2:8.1.0875-5                        armhf        Vi IMproved - enhanced vi editor - compact version
ii  vl805fw                        0.2                                 all          Firmware loader for VL805 USB host controller
ii  wget                           1.20.1-1.1                          armhf        retrieves files from the web
ii  whiptail                       0.52.20-8                           armhf        Displays user-friendly dialog boxes from shell scripts
ii  wireless-regdb                 2018.05.09-0~rpt1                   all          wireless regulatory database
ii  wireless-tools                 30~pre9-13                          armhf        Tools for manipulating Linux Wireless Extensions
ii  wpasupplicant                  2:2.7+git20190128+0c1e29f-6+deb10u1 armhf        client support for WPA and WPA2 (IEEE 802.11i)
ii  xauth                          1:1.0.10-1                          armhf        X authentication utility
ii  xdg-user-dirs                  0.17-2                              armhf        tool to manage well known user directories
ii  xkb-data                       2.26-2                              all          X Keyboard Extension (XKB) configuration data
ii  xxd                            2:8.1.0875-5                        armhf        tool to make (or reverse) a hex dump
ii  xz-utils                       5.2.4-1                             armhf        XZ-format compression utilities
ii  zlib1g:armhf                   1:1.2.11.dfsg-1                     armhf        compression library - runtime
ii  zlib1g-dev:armhf               1:1.2.11.dfsg-1                     armhf        compression library - development
</code></pre>
<h2 id="ファイル構成2-階層">ファイル構成(2 階層)</h2>
<pre><code># ls *$x
bin:
bash     bzip2         cp             dumpkeys   fusermount  keyctl    login        more            netcat         ntfsfix       pidof     rmdir      su                        systemd-sysusers                uname          zegrep
bunzip2  bzip2recover  cpio           echo       grep        kill      loginctl     mount           netstat        ntfsinfo      ping      rnano      sync                      systemd-tmpfiles                uncompress     zfgrep
busybox  bzless        dash           ed         gunzip      kmod      lowntfs-3g   mountpoint      networkctl     ntfsls        ping4     run-parts  systemctl                 systemd-tty-ask-password-agent  unicode_start  zforce
bzcat    bzmore        date           egrep      gzexe       less      ls           mt              nisdomainname  ntfsmove      ping6     sed        systemd                   tar                             vdir           zgrep
bzcmp    cat           dd             false      gzip        lessecho  lsblk        mt-gnu          ntfs-3g        ntfsrecover   ps        setfont    systemd-ask-password      tempfile                        wdctl          zless
bzdiff   chgrp         df             fbset      hciconfig   lessfile  lsmod        mv              ntfs-3g.probe  ntfssecaudit  pwd       setupcon   systemd-escape            touch                           which          zmore
bzegrep  chmod         dir            fgconsole  hostname    lesskey   mkdir        nano            ntfscat        ntfstruncate  rbash     sh         systemd-hwdb              true                            ypdomainname   znew
bzexe    chown         dmesg          fgrep      ip          lesspipe  mknod        nc              ntfscluster    ntfsusermap   readlink  sleep      systemd-inhibit           udevadm                         zcat
bzfgrep  chvt          dnsdomainname  findmnt    journalctl  ln        mktemp       nc.openbsd      ntfscmp        ntfswipe      red       ss         systemd-machine-id-setup  ulockmgr_server                 zcmp
bzgrep   con2fbmap     domainname     fuser      kbd_mode    loadkeys  modeline2fb  nc.traditional  ntfsfallocate  openvt        rm        stty       systemd-notify            umount                          zdiff

boot:

dev:
console  core  fd  full  mqueue  null  ptmx  pts  random  shm  stderr  stdin  stdout  tty  urandom  zero

etc:
X11                     ca-certificates.conf  debian_version     gai.conf     ifplugd          ld.so.conf.d    machine-id      mtab           perl       rc1.d             rmt           ssh          triggerhappy
adduser.conf            calendar              default            gdb          init             ld.so.preload   magic           nanorc         polkit-1   rc2.d             rpc           ssl          ucf.conf
alternatives            cifs-utils            deluser.conf       groff        init.d           ldap            magic.mime      netconfig      ppp        rc3.d             rpi-issue     subgid       udev
apparmor.d              console-setup         dhcp               group        initramfs-tools  libaudit.conf   mailcap         network        profile    rc4.d             rsyslog.conf  subuid       ufw
apt                     cron.d                dhcpcd.conf        gshadow      inputrc          libnl-3         mailcap.order   networks       profile.d  rc5.d             rsyslog.d     sudoers      update-motd.d
avahi                   cron.daily            dphys-swapfile     gss          insserv.conf.d   locale.alias    manpath.config  nsswitch.conf  protocols  rc6.d             securetty     sudoers.d    usb_modeswitch.conf
bash.bashrc             cron.hourly           dpkg               host.conf    iproute2         locale.gen      mime.types      opt            python     rcS.d             security      sysctl.conf  usb_modeswitch.d
bash_completion         cron.monthly          environment        hostname     issue            localtime       mke2fs.conf     os-release     python2.7  request-key.conf  selinux       sysctl.d     vim
bindresvport.blacklist  cron.weekly           fake-hwclock.data  hosts        issue.net        logcheck        modprobe.d      pam.conf       python3    request-key.d     services      systemd      wgetrc
binfmt.d                crontab               fb.modes           hosts.allow  kernel           login.defs      modules         pam.d          python3.7  resolv.conf       shadow        terminfo     wpa_supplicant
bluetooth               dbus-1                fstab              hosts.deny   ld.so.cache      logrotate.conf  modules-load.d  passwd         rc.local   resolvconf        shells        timezone     xattr.conf
ca-certificates         debconf.conf          fuse.conf          idmapd.conf  ld.so.conf       logrotate.d     motd            paxctld.conf   rc0.d      resolvconf.conf   skel          tmpfiles.d   xdg

home:
pi

lib:
arm-linux-gnueabihf  console-setup  cpp  crda  dhcpcd  firmware  ifupdown  init  klibc-fAGGTaZfOmYXUytsXgfSuL5MT48.so  ld-linux-armhf.so.3  ld-linux.so.3  lsb  modprobe.d  modules  resolvconf  systemd  terminfo  udev

lost+found:

media:

mnt:

opt:
vc

proc:
1     buddyinfo  cmdline    cpuinfo  diskstats  execdomains  fs          ioports   kcore      kmsg         kpageflags  meminfo  mounts  net           sched_debug  softirqs  sys            thread-self  uptime       vmstat
139   bus        config.gz  crypto   dma        fb           interrupts  irq       key-users  kpagecgroup  loadavg     misc     mpt     pagetypeinfo  self         stat      sysrq-trigger  timer_list   version      zoneinfo
acpi  cgroups    consoles   devices  driver     filesystems  iomem       kallsyms  keys       kpagecount   locks       modules  mtrr    partitions    slabinfo     swaps     sysvipc        tty          vmallocinfo

root:

run:
lock  mount  utmp

sbin:
agetty         ctrlaltdel       dphys-swapfile  fsck          getcap         ip                 iwevent           mii-tool     mkfs.ntfs         mount.ntfs     partprobe    rmmod         shutdown           tipc
badblocks      debugfs          dumpe2fs        fsck.cramfs   getpcaps       ip6tables          iwgetid           mkdosfs      mkfs.vfat         mount.ntfs-3g  paxctld      route         slattach           tune2fs
blkdeactivate  depmod           e2fsck          fsck.ext2     getty          ip6tables-restore  iwlist            mke2fs       mkhomedir_helper  nameif         pivot_root   rpc.statd     sm-notify          udevadm
blkdiscard     devlink          e2image         fsck.ext3     halt           ip6tables-save     iwpriv            mkfs         mkntfs            ntfsclone      plipconfig   rpcbind       start-stop-daemon  umount.nfs
blkid          dhclient         e2label         fsck.ext4     hwclock        ipmaddr            iwspy             mkfs.bfs     mkswap            ntfscp         poweroff     rtacct        sulogin            umount.nfs4
blkzone        dhclient-script  e2mmpstatus     fsck.fat      ifconfig       iptables           kbdrate           mkfs.cramfs  modinfo           ntfslabel      rarp         rtmon         swaplabel          unix_chkpwd
blockdev       dhcpcd           e2undo          fsck.minix    ifdown         iptables-restore   key.dns_resolver  mkfs.ext2    modprobe          ntfsresize     raw          runlevel      swapoff            unix_update
bridge         dhcpcd5          ethtool         fsck.msdos    ifquery        iptables-save      killall5          mkfs.ext3    mount.cifs        ntfsundelete   reboot       runuser       swapon             wipefs
capsh          dmsetup          fake-hwclock    fsck.vfat     ifup           iptunnel           ldconfig          mkfs.ext4    mount.fuse        osd_login      regdbdump    setcap        switch_root        wpa_action
cfdisk         dmstats          fatlabel        fsfreeze      init           isosize            logsave           mkfs.fat     mount.lowntfs-3g  pam_tally      request-key  sfdisk        sysctl             wpa_cli
chcpu          dosfsck          fdisk           fstab-decode  insmod         iw                 losetup           mkfs.minix   mount.nfs         pam_tally2     resize2fs    shadowconfig  tc                 wpa_supplicant
crda           dosfslabel       findfs          fstrim        installkernel  iwconfig           lsmod             mkfs.msdos   mount.nfs4        parted         resolvconf   showmount     telinit            zramctl

srv:

sys:
block  bus  class  dev  devices  firmware  fs  hypervisor  kernel  module  power

tmp:

usr:
bin  games  include  lib  local  sbin  share  src

var:
backups  cache  lib  local  lock  log  mail  opt  run  spool  tmp
</code></pre>
<h2 id="通常盤との差分パッケージ">通常盤との差分(パッケージ)</h2>
<p>Lite 版にはなく, 通常版にはインストールされているパッケージのリストが以下である。
減分はなかったので省略する。</p>
<p>なお通常版 Lite 版それぞれ, docker image 内で<code>dpkg --get-selections | grep -v deinstall</code>を実行した結果を<code>pkg.txt</code> と <code>lite_pkg.txt</code>に保存し差分を評価した。</p>
<pre><code>$ diff -u {lite_,}pkg.txt | grep  -e ^+ | grep -v ^++
+adwaita-icon-theme                              install
+alacarte                                        install
+arandr                                          install
+aspell                                          install
+aspell-en                                       install
+blt                                             install
+bluealsa                                        install
+bubblewrap                                      install
+chromium-browser                                install
+chromium-browser-l10n                           install
+chromium-codecs-ffmpeg-extra                    install
+dbus-user-session                               install
+dbus-x11                                        install
+dconf-gsettings-backend:armhf                   install
+dconf-service                                   install
+debian-reference-common                         install
+debian-reference-en                             install
+desktop-base                                    install
+desktop-file-utils                              install
+dh-python                                       install
+dictionaries-common                             install
+dillo                                           install
+docutils-common                                 install
+eject                                           install
+emacsen-common                                  install
+ffmpeg                                          install
+fontconfig                                      install
+fontconfig-config                               install
+fonts-dejavu-core                               install
+fonts-droid-fallback                            install
+fonts-freefont-ttf                              install
+fonts-liberation2                               install
+fonts-noto-mono                                 install
+fonts-piboto                                    install
+fonts-quicksand                                 install
+galculator                                      install
+gdisk                                           install
+geany                                           install
+geany-common                                    install
+giblib1:armhf                                   install
+gir1.2-atk-1.0:armhf                            install
+gir1.2-freedesktop:armhf                        install
+gir1.2-gdkpixbuf-2.0:armhf                      install
+gir1.2-glib-2.0:armhf                           install
+gir1.2-gmenu-3.0:armhf                          install
+gir1.2-gtk-3.0:armhf                            install
+gir1.2-pango-1.0:armhf                          install
+git                                             install
+git-man                                         install
+gldriver-test                                   install
+glib-networking:armhf                           install
+glib-networking-common                          install
+glib-networking-services                        install
+gnome-accessibility-themes                      install
+gnome-icon-theme                                install
+gnome-menus                                     install
+gnome-themes-extra:armhf                        install
+gnome-themes-extra-data                         install
+gnome-themes-standard                           install
+gpicview                                        install
+gsettings-desktop-schemas                       install
+gstreamer1.0-alsa:armhf                         install
+gstreamer1.0-libav:armhf                        install
+gstreamer1.0-omx                                install
+gstreamer1.0-omx-rpi                            install
+gstreamer1.0-omx-rpi-config                     install
+gstreamer1.0-plugins-bad:armhf                  install
+gstreamer1.0-plugins-base:armhf                 install
+gstreamer1.0-plugins-good:armhf                 install
+gstreamer1.0-x:armhf                            install
+gtk-update-icon-cache                           install
+gtk2-engines:armhf                              install
+gtk2-engines-clearlookspix:armhf                install
+gtk2-engines-pixbuf:armhf                       install
+gtk2-engines-pixflat:armhf                      install
+gvfs:armhf                                      install
+gvfs-backends                                   install
+gvfs-common                                     install
+gvfs-daemons                                    install
+gvfs-fuse                                       install
+gvfs-libs:armhf                                 install
+hicolor-icon-theme                              install
+hunspell-en-gb                                  install
+hyphen-en-gb                                    install
+i2c-tools                                       install
+javascript-common                               install
+laptop-detect                                   install
+liba52-0.7.4:armhf                              install
+libaa1:armhf                                    install
+libaom0:armhf                                   install
+libappstream4:armhf                             install
+libarchive13:armhf                              install
+libaribb24-0:armhf                              install
+libaspell15:armhf                               install
+libass9:armhf                                   install
+libasyncns0:armhf                               install
+libatasmart4:armhf                              install
+libatk-bridge2.0-0:armhf                        install
+libatk1.0-0:armhf                               install
+libatk1.0-data                                  install
+libatspi2.0-0:armhf                             install
+libavahi-client3:armhf                          install
+libavahi-glib1:armhf                            install
+libavc1394-0:armhf                              install
+libavcodec58:armhf                              install
+libavdevice58:armhf                             install
+libavfilter7:armhf                              install
+libavformat58:armhf                             install
+libavresample4:armhf                            install
+libavutil56:armhf                               install
+libbasicusageenvironment1:armhf                 install
+libblas3:armhf                                  install
+libblockdev-fs2:armhf                           install
+libblockdev-loop2:armhf                         install
+libblockdev-part-err2:armhf                     install
+libblockdev-part2:armhf                         install
+libblockdev-swap2:armhf                         install
+libblockdev-utils2:armhf                        install
+libblockdev2:armhf                              install
+libbluetooth3:armhf                             install
+libbluray2:armhf                                install
+libbrotli1:armhf                                install
+libbs2b0:armhf                                  install
+libcaca0:armhf                                  install
+libcairo-gobject2:armhf                         install
+libcairo2:armhf                                 install
+libcanberra-gtk3-0:armhf                        install
+libcanberra0:armhf                              install
+libcddb2                                        install
+libcdio-cdda2:armhf                             install
+libcdio-paranoia2:armhf                         install
+libcdio18:armhf                                 install
+libcdparanoia0:armhf                            install
+libchromaprint1:armhf                           install
+libcodec2-0.8.1:armhf                           install
+libcolord2:armhf                                install
+libcroco3:armhf                                 install
+libcups2:armhf                                  install
+libcupsfilters1:armhf                           install
+libcupsimage2:armhf                             install
+libcurl3-gnutls:armhf                           install
+libdatrie1:armhf                                install
+libdav1d3:armhf                                 install
+libdbus-glib-1-2:armhf                          install
+libdc1394-22:armhf                              install
+libdca0:armhf                                   install
+libdconf1:armhf                                 install
+libde265-0:armhf                                install
+libdjvulibre-text                               install
+libdjvulibre21:armhf                            install
+libdouble-conversion1:armhf                     install
+libdrm-amdgpu1:armhf                            install
+libdrm-common                                   install
+libdrm-nouveau2:armhf                           install
+libdrm-radeon1:armhf                            install
+libdrm2:armhf                                   install
+libdv4:armhf                                    install
+libdvbpsi10:armhf                               install
+libdvdnav4:armhf                                install
+libdvdread4:armhf                               install
+libebml4v5:armhf                                install
+libegl-mesa0:armhf                              install
+libegl1:armhf                                   install
+libenchant1c2a:armhf                            install
+libepoxy0:armhf                                 install
+liberror-perl                                   install
+libevdev2:armhf                                 install
+libexif12:armhf                                 install
+libexpat1-dev:armhf                             install
+libfaad2:armhf                                  install
+libfftw3-double3:armhf                          install
+libflac8:armhf                                  install
+libflite1:armhf                                 install
+libfltk1.3:armhf                                install
+libfluidsynth1:armhf                            install
+libfm-data                                      install
+libfm-extra4:armhf                              install
+libfm-gtk-data                                  install
+libfm-gtk4:armhf                                install
+libfm-modules:armhf                             install
+libfm4:armhf                                    install
+libfontconfig1:armhf                            install
+libfontenc1:armhf                               install
+libgbm1:armhf                                   install
+libgck-1-0:armhf                                install
+libgcr-base-3-1:armhf                           install
+libgd3:armhf                                    install
+libgdata-common                                 install
+libgdata22:armhf                                install
+libgdk-pixbuf2.0-0:armhf                        install
+libgdk-pixbuf2.0-common                         install
+libgfortran5:armhf                              install
+libgif7:armhf                                   install
+libgirepository-1.0-1:armhf                     install
+libgl1:armhf                                    install
+libgl1-mesa-dri:armhf                           install
+libglapi-mesa:armhf                             install
+libgles1:armhf                                  install
+libgles2:armhf                                  install
+libgles2-mesa:armhf                             install
+libglib2.0-bin                                  install
+libglvnd0:armhf                                 install
+libglx-mesa0:armhf                              install
+libglx0:armhf                                   install
+libgme0:armhf                                   install
+libgnome-menu-3-0:armhf                         install
+libgoa-1.0-0b:armhf                             install
+libgoa-1.0-common                               install
+libgphoto2-6:armhf                              install
+libgphoto2-port12:armhf                         install
+libgraphite2-3:armhf                            install
+libgroupsock8:armhf                             install
+libgs9:armhf                                    install
+libgs9-common                                   install
+libgsm1:armhf                                   install
+libgssdp-1.0-3:armhf                            install
+libgstreamer-gl1.0-0:armhf                      install
+libgstreamer-plugins-bad1.0-0:armhf             install
+libgstreamer-plugins-base1.0-0:armhf            install
+libgstreamer1.0-0:armhf                         install
+libgtk-3-0:armhf                                install
+libgtk-3-common                                 install
+libgtk2.0-0:armhf                               install
+libgtk2.0-bin                                   install
+libgtk2.0-common                                install
+libgtksourceview-3.0-1:armhf                    install
+libgtksourceview-3.0-common                     install
+libgudev-1.0-0:armhf                            install
+libgupnp-1.0-4:armhf                            install
+libgupnp-igd-1.0-4:armhf                        install
+libharfbuzz-icu0:armhf                          install
+libharfbuzz0b:armhf                             install
+libhunspell-1.7-0:armhf                         install
+libhyphen0:armhf                                install
+libi2c0:armhf                                   install
+libice6:armhf                                   install
+libid3tag0:armhf                                install
+libiec61883-0:armhf                             install
+libijs-0.35:armhf                               install
+libilmbase23:armhf                              install
+libimagequant0:armhf                            install
+libimlib2:armhf                                 install
+libimobiledevice6:armhf                         install
+libindicator3-7:armhf                           install
+libinput-bin                                    install
+libinput10:armhf                                install
+libixml10:armhf                                 install
+libjack-jackd2-0:armhf                          install
+libjansson4:armhf                               install
+libjavascriptcoregtk-4.0-18:armhf               install
+libjbig0:armhf                                  install
+libjbig2dec0:armhf                              install
+libjs-jquery                                    install
+libjs-sphinxdoc                                 install
+libjs-underscore                                install
+libjson-glib-1.0-0:armhf                        install
+libjson-glib-1.0-common                         install
+libkate1:armhf                                  install
+libkeybinder0                                   install
+liblapack3:armhf                                install
+liblcms2-2:armhf                                install
+libldb1:armhf                                   install
+liblightdm-gobject-1-0:armhf                    install
+liblilv-0-0:armhf                               install
+liblirc-client0:armhf                           install
+liblivemedia64:armhf                            install
+libllvm9:armhf                                  install
+libltdl7:armhf                                  install
+liblua5.2-0:armhf                               install
+libmad0:armhf                                   install
+libmatroska6v5:armhf                            install
+libmenu-cache-bin                               install
+libmenu-cache3:armhf                            install
+libmicrodns0:armhf                              install
+libmikmod3:armhf                                install
+libmjpegutils-2.1-0                             install
+libmms0:armhf                                   install
+libmodplug1:armhf                               install
+libmp3lame0:armhf                               install
+libmpcdec6:armhf                                install
+libmpeg2-4:armhf                                install
+libmpeg2encpp-2.1-0                             install
+libmpg123-0:armhf                               install
+libmplex2-2.1-0                                 install
+libmtdev1:armhf                                 install
+libmysofa0:armhf                                install
+libnfs12:armhf                                  install
+libnice10:armhf                                 install
+libnorm1:armhf                                  install
+libnotify4:armhf                                install
+libnspr4:armhf                                  install
+libnss3:armhf                                   install
+liboauth0:armhf                                 install
+libobrender32v5                                 install
+libobt2v5                                       install
+libofa0:armhf                                   install
+libogg0:armhf                                   install
+libopenal-data                                  install
+libopenal1:armhf                                install
+libopenexr23:armhf                              install
+libopenjp2-7:armhf                              install
+libopenmpt-modplug1:armhf                       install
+libopenmpt0:armhf                               install
+libopus0:armhf                                  install
+liborc-0.4-0:armhf                              install
+libossp-uuid16:armhf                            install
+libpackagekit-glib2-18:armhf                    install
+libpango-1.0-0:armhf                            install
+libpangocairo-1.0-0:armhf                       install
+libpangoft2-1.0-0:armhf                         install
+libpangoxft-1.0-0:armhf                         install
+libpaper-utils                                  install
+libpaper1:armhf                                 install
+libparted-fs-resize0:armhf                      install
+libpciaccess0:armhf                             install
+libpcre2-16-0:armhf                             install
+libpgm-5.2-0:armhf                              install
+libpigpio-dev                                   install
+libpigpio1                                      install
+libpigpiod-if-dev                               install
+libpigpiod-if1                                  install
+libpigpiod-if2-1                                install
+libpixman-1-0:armhf                             install
+libplacebo7:armhf                               install
+libplist3:armhf                                 install
+libplymouth4:armhf                              install
+libpoppler-qt5-1:armhf                          install
+libpoppler82:armhf                              install
+libportmidi0:armhf                              install
+libpostproc55:armhf                             install
+libprotobuf-lite17:armhf                        install
+libproxy-tools                                  install
+libproxy1v5:armhf                               install
+libpulse0:armhf                                 install
+libpython-all-dev:armhf                         install
+libpython-dev:armhf                             install
+libpython2-dev:armhf                            install
+libpython2.7:armhf                              install
+libpython2.7-dev:armhf                          install
+libpython3-dev:armhf                            install
+libpython3.7-dev:armhf                          install
+libqt5concurrent5:armhf                         install
+libqt5core5a:armhf                              install
+libqt5dbus5:armhf                               install
+libqt5gui5:armhf                                install
+libqt5network5:armhf                            install
+libqt5printsupport5:armhf                       install
+libqt5sql5:armhf                                install
+libqt5sql5-sqlite:armhf                         install
+libqt5svg5:armhf                                install
+libqt5widgets5:armhf                            install
+libqt5x11extras5:armhf                          install
+libqt5xml5:armhf                                install
+libraw1394-11:armhf                             install
+libresid-builder0c2a                            install
+librest-0.7-0:armhf                             install
+librsvg2-2:armhf                                install
+librsvg2-common:armhf                           install
+librtimulib-dev                                 install
+librtimulib-utils                               install
+librtimulib7                                    install
+librubberband2:armhf                            install
+libsbc1:armhf                                   install
+libsdl-image1.2:armhf                           install
+libsdl-mixer1.2:armhf                           install
+libsdl-ttf2.0-0:armhf                           install
+libsdl1.2debian:armhf                           install
+libsdl2-2.0-0:armhf                             install
+libsecret-1-0:armhf                             install
+libsecret-common                                install
+libsensors-config                               install
+libsensors5:armhf                               install
+libserd-0-0:armhf                               install
+libshine3:armhf                                 install
+libshout3:armhf                                 install
+libsidplay2                                     install
+libsm6:armhf                                    install
+libsmbclient:armhf                              install
+libsnappy1v5:armhf                              install
+libsndfile1:armhf                               install
+libsndio7.0:armhf                               install
+libsodium23:armhf                               install
+libsord-0-0:armhf                               install
+libsoundtouch1:armhf                            install
+libsoup-gnome2.4-1:armhf                        install
+libsoup2.4-1:armhf                              install
+libsoxr0:armhf                                  install
+libspandsp2:armhf                               install
+libspatialaudio0:armhf                          install
+libspectre1:armhf                               install
+libspeex1:armhf                                 install
+libspeexdsp1:armhf                              install
+libsratom-0-0:armhf                             install
+libsrtp2-1:armhf                                install
+libssh-gcrypt-4:armhf                           install
+libstartup-notification0:armhf                  install
+libstemmer0d:armhf                              install
+libswresample3:armhf                            install
+libswscale5:armhf                               install
+libsynctex2:armhf                               install
+libtag1v5:armhf                                 install
+libtag1v5-vanilla:armhf                         install
+libtcl8.6:armhf                                 install
+libtdb1:armhf                                   install
+libtevent0:armhf                                install
+libthai-data                                    install
+libthai0:armhf                                  install
+libtheora0:armhf                                install
+libtiff5:armhf                                  install
+libtk8.6:armhf                                  install
+libtwolame0:armhf                               install
+libudisks2-0:armhf                              install
+libunique-1.0-0                                 install
+libunwind8:armhf                                install
+libupnp13:armhf                                 install
+libusageenvironment3:armhf                      install
+libusbmuxd4:armhf                               install
+libva-drm2:armhf                                install
+libva-x11-2:armhf                               install
+libva2:armhf                                    install
+libvdpau-va-gl1:armhf                           install
+libvdpau1:armhf                                 install
+libvidstab1.1:armhf                             install
+libvisual-0.4-0:armhf                           install
+libvlc-bin:armhf                                install
+libvlc5:armhf                                   install
+libvlccore9:armhf                               install
+libvo-aacenc0:armhf                             install
+libvo-amrwbenc0:armhf                           install
+libvorbis0a:armhf                               install
+libvorbisenc2:armhf                             install
+libvorbisfile3:armhf                            install
+libvpx5:armhf                                   install
+libvte-2.91-0:armhf                             install
+libvte-2.91-common                              install
+libvulkan1:armhf                                install
+libwacom-common                                 install
+libwacom2:armhf                                 install
+libwavpack1:armhf                               install
+libwayland-client0:armhf                        install
+libwayland-cursor0:armhf                        install
+libwayland-egl1:armhf                           install
+libwayland-server0:armhf                        install
+libwebkit2gtk-4.0-37:armhf                      install
+libwebp6:armhf                                  install
+libwebpdemux2:armhf                             install
+libwebpmux3:armhf                               install
+libwebrtc-audio-processing1:armhf               install
+libwildmidi2:armhf                              install
+libwnck-common                                  install
+libwnck22:armhf                                 install
+libwoff1:armhf                                  install
+libx11-xcb1:armhf                               install
+libx264-155:armhf                               install
+libx265-165:armhf                               install
+libxaw7:armhf                                   install
+libxcb-dri2-0:armhf                             install
+libxcb-dri3-0:armhf                             install
+libxcb-glx0:armhf                               install
+libxcb-icccm4:armhf                             install
+libxcb-image0:armhf                             install
+libxcb-keysyms1:armhf                           install
+libxcb-present0:armhf                           install
+libxcb-randr0:armhf                             install
+libxcb-render-util0:armhf                       install
+libxcb-render0:armhf                            install
+libxcb-shape0:armhf                             install
+libxcb-shm0:armhf                               install
+libxcb-sync1:armhf                              install
+libxcb-util0:armhf                              install
+libxcb-xfixes0:armhf                            install
+libxcb-xinerama0:armhf                          install
+libxcb-xkb1:armhf                               install
+libxcb-xv0:armhf                                install
+libxcomposite1:armhf                            install
+libxcursor1:armhf                               install
+libxdamage1:armhf                               install
+libxfixes3:armhf                                install
+libxfont2:armhf                                 install
+libxft2:armhf                                   install
+libxi6:armhf                                    install
+libxinerama1:armhf                              install
+libxkbcommon-x11-0:armhf                        install
+libxkbcommon0:armhf                             install
+libxkbfile1:armhf                               install
+libxklavier16:armhf                             install
+libxmu6:armhf                                   install
+libxpm4:armhf                                   install
+libxrandr2:armhf                                install
+libxrender1:armhf                               install
+libxres1:armhf                                  install
+libxshmfence1:armhf                             install
+libxslt1.1:armhf                                install
+libxss1:armhf                                   install
+libxt6:armhf                                    install
+libxtst6:armhf                                  install
+libxv1:armhf                                    install
+libxvidcore4:armhf                              install
+libxxf86dga1:armhf                              install
+libxxf86vm1:armhf                               install
+libyaml-0-2:armhf                               install
+libzbar0:armhf                                  install
+libzmq5:armhf                                   install
+libzvbi-common                                  install
+libzvbi0:armhf                                  install
+lightdm                                         install
+lightdm-gtk-greeter                             install
+lsof                                            install
+lxappearance                                    install
+lxappearance-obconf                             install
+lxde                                            install
+lxde-common                                     install
+lxde-core                                       install
+lxde-icon-theme                                 install
+lxhotkey-core                                   install
+lxhotkey-gtk                                    install
+lxinput                                         install
+lxmenu-data                                     install
+lxpanel                                         install
+lxpanel-data                                    install
+lxplug-bluetooth                                install
+lxplug-cputemp                                  install
+lxplug-ejecter                                  install
+lxplug-network                                  install
+lxplug-ptbatt                                   install
+lxplug-volume                                   install
+lxpolkit                                        install
+lxrandr                                         install
+lxsession                                       install
+lxsession-data                                  install
+lxsession-edit                                  install
+lxsession-logout                                install
+lxtask                                          install
+lxterminal                                      install
+menu-xdg                                        install
+mesa-va-drivers:armhf                           install
+mesa-vdpau-drivers:armhf                        install
+mousepad                                        install
+mypy                                            install
+obconf                                          install
+omxplayer                                       install
+openbox                                         install
+openbox-lxde-session                            install
+packagekit                                      install
+pcmanfm                                         install
+pi-greeter                                      install
+pi-language-support                             install
+pi-package                                      install
+pi-package-data                                 install
+pi-package-session                              install
+piclone                                         install
+pigpio                                          install
+pigpio-tools                                    install
+pigpiod                                         install
+pipanel                                         install
+pishutdown                                      install
+piwiz                                           install
+pixflat-icons                                   install
+plymouth                                        install
+plymouth-label                                  install
+plymouth-themes                                 install
+poppler-data                                    install
+pprompt                                         install
+pylint3                                         install
+pypy                                            install
+pypy-lib:armhf                                  install
+python-all                                      install
+python-all-dev                                  install
+python-asn1crypto                               install
+python-automationhat                            install
+python-blinker                                  install
+python-blinkt                                   install
+python-buttonshim                               install
+python-cairo:armhf                              install
+python-cap1xxx                                  install
+python-certifi                                  install
+python-cffi-backend                             install
+python-chardet                                  install
+python-click                                    install
+python-colorama                                 install
+python-colorzero                                install
+python-configparser                             install
+python-cookies                                  install
+python-crypto                                   install
+python-cryptography                             install
+python-dbus                                     install
+python-dev                                      install
+python-drumhat                                  install
+python-entrypoints                              install
+python-enum34                                   install
+python-envirophat                               install
+python-explorerhat                              install
+python-flask                                    install
+python-fourletterphat                           install
+python-funcsigs                                 install
+python-gi                                       install
+python-gobject-2                                install
+python-gpiozero                                 install
+python-gtk2                                     install
+python-idna                                     install
+python-ipaddress                                install
+python-itsdangerous                             install
+python-jinja2                                   install
+python-jwt                                      install
+python-keyring                                  install
+python-keyrings.alt                             install
+python-markupsafe                               install
+python-microdotphat                             install
+python-mock                                     install
+python-mote                                     install
+python-motephat                                 install
+python-numpy                                    install
+python-oauthlib                                 install
+python-olefile                                  install
+python-openssl                                  install
+python-pantilthat                               install
+python-pbr                                      install
+python-phatbeat                                 install
+python-pianohat                                 install
+python-picamera                                 install
+python-piglow                                   install
+python-pigpio                                   install
+python-pil:armhf                                install
+python-pip                                      install
+python-pip-whl                                  install
+python-pkg-resources                            install
+python-pygame                                   install
+python-pyinotify                                install
+python-rainbowhat                               install
+python-requests                                 install
+python-requests-oauthlib                        install
+python-responses                                install
+python-rtimulib                                 install
+python-scrollphat                               install
+python-scrollphathd                             install
+python-secretstorage                            install
+python-sense-hat                                install
+python-serial                                   install
+python-setuptools                               install
+python-simplejson                               install
+python-six                                      install
+python-skywriter                                install
+python-smbus:armhf                              install
+python-sn3218                                   install
+python-spidev                                   install
+python-talloc:armhf                             install
+python-tk                                       install
+python-touchphat                                install
+python-twython                                  install
+python-unicornhathd                             install
+python-urllib3                                  install
+python-werkzeug                                 install
+python-wheel                                    install
+python-xdg                                      install
+python2-dev                                     install
+python2.7-dev                                   install
+python3-asn1crypto                              install
+python3-astroid                                 install
+python3-asttokens                               install
+python3-automationhat                           install
+python3-blinker                                 install
+python3-blinkt                                  install
+python3-bs4                                     install
+python3-buttonshim                              install
+python3-cap1xxx                                 install
+python3-cffi-backend                            install
+python3-click                                   install
+python3-colorama                                install
+python3-colorzero                               install
+python3-cookies                                 install
+python3-crypto                                  install
+python3-cryptography                            install
+python3-dbus                                    install
+python3-dev                                     install
+python3-distutils                               install
+python3-docutils                                install
+python3-drumhat                                 install
+python3-entrypoints                             install
+python3-envirophat                              install
+python3-explorerhat                             install
+python3-flask                                   install
+python3-fourletterphat                          install
+python3-gi                                      install
+python3-gpiozero                                install
+python3-html5lib                                install
+python3-isort                                   install
+python3-itsdangerous                            install
+python3-jedi                                    install
+python3-jinja2                                  install
+python3-jwt                                     install
+python3-keyring                                 install
+python3-keyrings.alt                            install
+python3-lazy-object-proxy                       install
+python3-lib2to3                                 install
+python3-logilab-common                          install
+python3-lxml:armhf                              install
+python3-markupsafe                              install
+python3-mccabe                                  install
+python3-microdotphat                            install
+python3-mote                                    install
+python3-motephat                                install
+python3-mypy                                    install
+python3-mypy-extensions                         install
+python3-numpy                                   install
+python3-oauthlib                                install
+python3-olefile                                 install
+python3-openssl                                 install
+python3-pantilthat                              install
+python3-parso                                   install
+python3-pgzero                                  install
+python3-phatbeat                                install
+python3-pianohat                                install
+python3-picamera                                install
+python3-piglow                                  install
+python3-pigpio                                  install
+python3-pil:armhf                               install
+python3-pip                                     install
+python3-psutil                                  install
+python3-pygame                                  install
+python3-pygments                                install
+python3-pyinotify                               install
+python3-rainbowhat                              install
+python3-requests-oauthlib                       install
+python3-responses                               install
+python3-roman                                   install
+python3-rpi.gpio                                install
+python3-rtimulib                                install
+python3-scrollphat                              install
+python3-scrollphathd                            install
+python3-secretstorage                           install
+python3-send2trash                              install
+python3-sense-hat                               install
+python3-serial                                  install
+python3-setuptools                              install
+python3-simplejson                              install
+python3-skywriter                               install
+python3-smbus:armhf                             install
+python3-sn3218                                  install
+python3-soupsieve                               install
+python3-spidev                                  install
+python3-tk:armhf                                install
+python3-touchphat                               install
+python3-twython                                 install
+python3-typed-ast                               install
+python3-unicornhathd                            install
+python3-venv                                    install
+python3-webencodings                            install
+python3-werkzeug                                install
+python3-wheel                                   install
+python3-wrapt                                   install
+python3-xdg                                     install
+python3.7-dev                                   install
+python3.7-venv                                  install
+qpdfview                                        install
+qpdfview-djvu-plugin                            install
+qpdfview-ps-plugin                              install
+qpdfview-translations                           install
+qt5-gtk-platformtheme:armhf                     install
+qt5-style-plugins:armhf                         install
+qt5ct                                           install
+qttranslations5-l10n                            install
+raspberrypi-artwork                             install
+raspberrypi-ui-mods                             install
+raspi-gpio                                      install
+rc-gui                                          install
+read-edid                                       install
+realvnc-vnc-server                              install
+rp-prefapps                                     install
+rpd-plym-splash                                 install
+rpd-wallpaper                                   install
+rpi-chromium-mods                               install
+samba-libs:armhf                                install
+scrot                                           install
+sense-hat                                       install
+sgml-base                                       install
+sound-theme-freedesktop                         install
+thonny                                          install
+timgm6mb-soundfont                              install
+tk8.6-blt2.5                                    install
+tree                                            install
+udisks2                                         install
+uuid                                            install
+va-driver-all:armhf                             install
+vdpau-driver-all:armhf                          install
+vlc                                             install
+vlc-bin                                         install
+vlc-data                                        install
+vlc-l10n                                        install
+vlc-plugin-base:armhf                           install
+vlc-plugin-notify:armhf                         install
+vlc-plugin-qt:armhf                             install
+vlc-plugin-samba:armhf                          install
+vlc-plugin-skins2:armhf                         install
+vlc-plugin-video-output:armhf                   install
+vlc-plugin-video-splitter:armhf                 install
+vlc-plugin-visualization:armhf                  install
+wamerican                                       install
+wbritish                                        install
+wiringpi                                        install
+x11-common                                      install
+x11-utils                                       install
+x11-xkb-utils                                   install
+x11-xserver-utils                               install
+xarchiver                                       install
+xcompmgr                                        install
+xdg-dbus-proxy                                  install
+xdg-utils                                       install
+xinit                                           install
+xinput                                          install
+xml-core                                        install
+xsel                                            install
+xserver-common                                  install
+xserver-xorg                                    install
+xserver-xorg-core                               install
+xserver-xorg-input-all                          install
+xserver-xorg-input-libinput                     install
+xserver-xorg-video-fbdev                        install
+xserver-xorg-video-fbturbo                      install
+zenity                                          install
+zenity-common                                   install
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>MarkdownからHTMLに変換する系のやつ</title>
            <link>https://tomowarkar.github.io/blog/posts/markdown_parser/</link>
            <pubDate>Tue, 12 May 2020 20:27:32 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/markdown_parser/</guid>
            <description>マークダウンから html に変換コンバーターを bash で書いた。 pandocとか使えば良いやんって話だけど、自家製で作りたいお年頃ですよね。 とは言っても、</description>
            <content type="html"><![CDATA[<p>マークダウンから html に変換コンバーターを bash で書いた。</p>
<p><a href="https://pandoc.org/">pandoc</a>とか使えば良いやんって話だけど、自家製で作りたいお年頃ですよね。</p>
<p>とは言っても、既存のものをガッツリ使用するのでサクッと作れてしまった。</p>
<h2 id="require">require</h2>
<ol>
<li><a href="https://github.com/jasonm23/markdown-css-themes">マークダウンのスタイルを整えてくれるやつ</a></li>
<li><a href="https://github.com/markedjs/marked">マークダウンを HTML にしてくれるやつ</a></li>
<li><a href="https://highlightjs.org/">コードにハイライト入れてくれるやつ</a></li>
</ol>
<p>を使います。</p>
<h2 id="マークダウンを-html-にしてくれるやつ-のインストール">マークダウンを HTML にしてくれるやつ のインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">npm install -g marked
</code></pre></div><h2 id="ファイル構成">ファイル構成</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">.
├── footer.html
├── header.html
├── hoge.md
├── parse.sh
└── style.css
</code></pre></div><h3 id="hogemd">hoge.md</h3>
<p><a href="#hogemd-1">今回のターゲット</a></p>
<h3 id="footerhtml">footer.html</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- highlight.js パーサー--&gt;</span>
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/highlight.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;<span style="color:#a6e22e">hljs</span>.<span style="color:#a6e22e">initHighlightingOnLoad</span>();&lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;

&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><h3 id="headerhtml">header.html</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ja&#34;</span>&gt;

&lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span>&gt;
    <span style="color:#75715e">&lt;!-- markdown 全体 css --&gt;</span>
    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://rawgithub.com/jasonm23/markdown-css-themes/gh-pages/markdown7.css&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span>&gt;
    &lt;/<span style="color:#f92672">link</span>&gt;
    <span style="color:#75715e">&lt;!-- markdown highlight.js css--&gt;</span>
    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/styles/vs.min.css&#34;</span>&gt;
    <span style="color:#75715e">&lt;!-- 調整用 css --&gt;</span>
    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;style.css&#34;</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;

&lt;<span style="color:#f92672">body</span>&gt;
</code></pre></div><h3 id="stylecss">style.css</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">hljs</span> {
  <span style="color:#66d9ef">background</span>: <span style="color:#66d9ef">none</span>;
}

.<span style="color:#a6e22e">code-title</span> {
  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">inline</span><span style="color:#f92672">-</span><span style="color:#66d9ef">block</span>;
  <span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">4</span><span style="color:#66d9ef">px</span>;
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#333</span>;
  <span style="color:#66d9ef">transform</span>: translateY(<span style="color:#ae81ff">-0.5</span><span style="color:#66d9ef">em</span>);
  <span style="color:#66d9ef">padding-bottom</span>: <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">font-weight</span>: <span style="color:#66d9ef">bold</span>;
  <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#999</span>;
}
</code></pre></div><h2 id="メインコード">メインコード</h2>
<p><code>header</code> と <code>footer</code>はテンプレートで使用し、マークダウンを HTML に変換した結果をサンドイッチする形をとります。</p>
<h3 id="parsesh">parse.sh</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash -eu
</span><span style="color:#75715e"></span><span style="color:#75715e"># @(#) セルフパーサー</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>1##*.<span style="color:#e6db74">}</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;md&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">||</span> <span style="color:#f92672">[</span> ! -f $1 <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    echo <span style="color:#f92672">[</span>error<span style="color:#f92672">]</span> $1 is not markdown or valid file
    exit <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">fi</span>

tmpfile<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>mktemp<span style="color:#66d9ef">)</span>

cat $1 |
    marked |
    sed <span style="color:#e6db74">&#39;s/&lt;code class=&#34;language-\([^:]*:\)\([^&#34;]*\)&#34;&gt;/&lt;div class=&#34;code-title&#34;&gt;\2&lt;\/div&gt;&lt;code class=&#34;language-\1\2&#34;&gt;/g&#39;</span> &gt;<span style="color:#e6db74">${</span>tmpfile<span style="color:#e6db74">}</span>

cat header.html <span style="color:#e6db74">${</span>tmpfile<span style="color:#e6db74">}</span> footer.html &gt;<span style="color:#e6db74">${</span>1%.*<span style="color:#e6db74">}</span>.html

rm <span style="color:#e6db74">${</span>tmpfile<span style="color:#e6db74">}</span>

</code></pre></div><ol>
<li>とりあえず申し訳程度に入力形式を<code>md</code>に絞って、ファイルの存在を確かめてあげてから</li>
<li>一時ファイルにマークダウンを HTML に変換した結果を格納</li>
<li>あとはテンプレートでサンドイッチ</li>
</ol>
<p>としました。</p>
<p>間に使っている <code>sed</code> 処理は、マークダウンのコード部分にタイトルを挿入するためのやつです</p>

    <img src="https://i.imgur.com/iIWAQ7M.png"  alt="blog top page"  class="center"  />


<p>正直これをしたいがためにマークダウン コンバーターを作りました。</p>
<p>ただ CSS をいじれば良いだけなのに無駄に労力を使った感じです。</p>
<h2 id="動作検証">動作検証</h2>
<p>これが</p>
<h3 id="hogemd-1">hoge.md</h3>
<pre><code># H1
## H2

\`\`\`python:main.py
import numpy as np

arr = np.array([1, 2, 3])
\`\`\`

&gt; 参照
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sh parse.sh hoge.md
</code></pre></div><h3 id="hogehtml">hoge.html</h3>
<p>こうなって</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ja&#34;</span>&gt;

&lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span>&gt;
    <span style="color:#75715e">&lt;!-- markdown 全体 css --&gt;</span>
    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://rawgithub.com/jasonm23/markdown-css-themes/gh-pages/markdown7.css&#34;</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span>&gt;
    &lt;/<span style="color:#f92672">link</span>&gt;
    <span style="color:#75715e">&lt;!-- markdown highlight.js css--&gt;</span>
    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/styles/vs.min.css&#34;</span>&gt;
    <span style="color:#75715e">&lt;!-- 調整用 css --&gt;</span>
    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;style.css&#34;</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;

&lt;<span style="color:#f92672">body</span>&gt;&lt;<span style="color:#f92672">h1</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;h1&#34;</span>&gt;H1&lt;/<span style="color:#f92672">h1</span>&gt;
&lt;<span style="color:#f92672">h2</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;h2&#34;</span>&gt;H2&lt;/<span style="color:#f92672">h2</span>&gt;
&lt;<span style="color:#f92672">pre</span>&gt;&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;code-title&#34;</span>&gt;main.py&lt;/<span style="color:#f92672">div</span>&gt;&lt;<span style="color:#f92672">code</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;language-python:main.py&#34;</span>&gt;import numpy as np

arr = np.array([1, 2, 3])&lt;/<span style="color:#f92672">code</span>&gt;&lt;/<span style="color:#f92672">pre</span>&gt;
&lt;<span style="color:#f92672">blockquote</span>&gt;
&lt;<span style="color:#f92672">p</span>&gt;参照&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">blockquote</span>&gt;

<span style="color:#75715e">&lt;!-- highlight.js パーサー--&gt;</span>
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/highlight.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;<span style="color:#a6e22e">hljs</span>.<span style="color:#a6e22e">initHighlightingOnLoad</span>();&lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;

&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><h3 id="blowser">blowser</h3>
<p>こうなります

    <img src="https://i.imgur.com/PCnvKeK.png"  alt="blog top page"  class="center"  />

</p>
<p>やりたかったコードのタイトル部分もうまくできていて良きです。</p>
<h2 id="まとめ">まとめ</h2>
<p>Github でドキュメント作るときに変なプラグインを入れずに作れるので良さそう</p>
]]></content>
        </item>
        
        <item>
            <title>Google Colab で MeCab と CaboCha を使う。</title>
            <link>https://tomowarkar.github.io/blog/posts/colab_mecab/</link>
            <pubDate>Wed, 06 May 2020 01:41:30 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/colab_mecab/</guid>
            <description>ソースコード Gist 概要 MeCab MeCab 公式サイト 本体 src: mecab-0.996.tar.gz DLlink:https://drive.google.com/uc?export=download&amp;amp;id=0B4y35FiV1wh7cENtOXlicTFaRUE 辞書 src: mecab-ipadic-2.7.0-20070801.tar.gz DLlink: https://drive.google.com/uc?export=download&amp;amp;id=0B4y35FiV1wh7MWVlSDBCSXZMTXM CaboCha CaboCha 公式サイト 本体 src: cabocha-0.69.tar.bz2 DLlink: https://drive.google.com/uc?export=download&amp;amp;id=0B4y35FiV1wh7SDd1Q1dUQkZQaUU Versions: https://drive.google.com/drive/folders/0B4y35FiV1wh7cGRCUUJHVTNJRnM 依存: CRF++ (0.55 以降), MeCab (0.993 以降), mecab-ipadic, mecab-jumandic, unidic のいずれか CRF++ CRF++ 公式サ</description>
            <content type="html"><![CDATA[<p><a href="https://gist.github.com/tomowarkar/021580fa52781ed0b0d913f46c8bb7e5">ソースコード Gist</a></p>
<h2 id="概要">概要</h2>
<h3 id="mecab">MeCab</h3>
<p><a href="http://taku910.github.io/mecab/">MeCab 公式サイト</a></p>
<p>本体 src: <code>mecab-0.996.tar.gz</code></p>
<p>DLlink:<code>https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7cENtOXlicTFaRUE</code></p>
<p>辞書 src: <code>mecab-ipadic-2.7.0-20070801.tar.gz</code></p>
<p>DLlink: <code>https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7MWVlSDBCSXZMTXM</code></p>
<h3 id="cabocha">CaboCha</h3>
<p><a href="http://taku910.github.io/cabocha/">CaboCha 公式サイト</a></p>
<p>本体 src: <code>cabocha-0.69.tar.bz2</code></p>
<p>DLlink: <code>https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7SDd1Q1dUQkZQaUU</code></p>
<p>Versions: <a href="https://drive.google.com/drive/folders/0B4y35FiV1wh7cGRCUUJHVTNJRnM">https://drive.google.com/drive/folders/0B4y35FiV1wh7cGRCUUJHVTNJRnM</a></p>
<p>依存: CRF++ (0.55 以降), MeCab (0.993 以降), mecab-ipadic, mecab-jumandic, unidic のいずれか</p>
<h3 id="crf">CRF++</h3>
<p><a href="http://taku910.github.io/crfpp/">CRF++ 公式サイト</a></p>
<p>本体 src: <code>CRF++-0.58.tar.gz</code></p>
<p>DLlink: <code>https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7QVR6VXJ5dWExSTQ</code></p>
<p>Versions: <a href="https://drive.google.com/drive/folders/0B4y35FiV1wh7fngteFhHQUN2Y1B5eUJBNHZUemJYQV9VWlBUb3JlX0xBdWVZTWtSbVBneU0">https://drive.google.com/drive/folders/0B4y35FiV1wh7fngteFhHQUN2Y1B5eUJBNHZUemJYQV9VWlBUb3JlX0xBdWVZTWtSbVBneU0</a></p>
<p>依存: C++ compiler (gcc 3.0 or higher)</p>
<h2 id="mecab-インストール">MeCab インストール</h2>
<p><code>%%bash</code>も含めること</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">%%bash
<span style="color:#75715e"># mecabのインストール</span>
apt-get install mecab swig libmecab-dev mecab-ipadic-utf8 &gt;/dev/null
<span style="color:#75715e"># mecab-pythonのインストール</span>
pip -q install mecab-python3
</code></pre></div><h2 id="crf-インストール">CRF++ インストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">%%bash
<span style="color:#75715e"># crfppソースファイルダウンロード</span>
fname<span style="color:#f92672">=</span>CRF++-0.58
curl -sL -o <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>.tar.gz <span style="color:#e6db74">&#34;https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7QVR6VXJ5dWExSTQ&#34;</span>
tar -zxf <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>.tar.gz
cd <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>
<span style="color:#75715e"># crfppインストール</span>
./configure --quiet
make &gt;/dev/null
make install &gt;/dev/null
ldconfig
cd ..
</code></pre></div><h2 id="cabocha-インストール">CaboCha インストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">%%bash
<span style="color:#75715e"># cabochaソースファイルダウンロード</span>
fname<span style="color:#f92672">=</span>cabocha-0.69
url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7SDd1Q1dUQkZQaUU&#34;</span>
curl -sc /tmp/cookie <span style="color:#e6db74">${</span>url<span style="color:#e6db74">}</span> &gt;/dev/null
code<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>awk <span style="color:#e6db74">&#39;/_warning_/ {print $NF}&#39;</span> /tmp/cookie<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
curl -sLb /tmp/cookie <span style="color:#e6db74">${</span>url<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;&amp;confirm=</span><span style="color:#e6db74">${</span>code<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> -o <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>.tar.bz2

<span style="color:#75715e"># 少し時間がかかる</span>
tar -jxf <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>.tar.bz2
<span style="color:#75715e"># cabochaインストール</span>
cd <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>
./configure  --quiet -with-charset<span style="color:#f92672">=</span>utf-8
make &gt;/dev/null
make check &gt;/dev/null
make install &gt;/dev/null
ldconfig
cd ..

<span style="color:#75715e"># cabocha-pythonのインストール</span>
pip -q install cabocha-0.69/python/
</code></pre></div><h2 id="結果確認">結果確認</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">!mecab -v
!pip show mecab-python3
!cabocha -v
!pip show cabocha-python
</code></pre></div><pre><code>mecab of 0.996

Name: mecab-python3
Version: 0.996.5

cabocha of 0.69

Name: cabocha-python
Version: 0.69
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> MeCab
tagger <span style="color:#f92672">=</span> MeCab<span style="color:#f92672">.</span>Tagger()
<span style="color:#66d9ef">print</span>(tagger<span style="color:#f92672">.</span>parse(<span style="color:#e6db74">&#34;隣の客はよく柿食う客だ。&#34;</span>))

<span style="color:#f92672">import</span> CaboCha
cp <span style="color:#f92672">=</span> CaboCha<span style="color:#f92672">.</span>Parser()
<span style="color:#66d9ef">print</span>(cp<span style="color:#f92672">.</span>parseToString(<span style="color:#e6db74">&#34;隣の客はよく柿食う客だ。&#34;</span>))
</code></pre></div><h2 id="補足">補足</h2>
<h3 id="mecab-をソースからビルド">MeCab をソースからビルド</h3>
<h4 id="mecab-本体">mecab 本体</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">%%bash
fname<span style="color:#f92672">=</span>mecab-0.996
curl -sL -o <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>.tar.gz <span style="color:#e6db74">&#34;https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7cENtOXlicTFaRUE&#34;</span>
tar zxfv <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>.tar.gz
cd <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>
./configure
make
make check
sudo make install
ldconfig
cd ..
</code></pre></div><h4 id="辞書mecab-ipadic">辞書(mecab-ipadic)</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">%%bash
fname<span style="color:#f92672">=</span>mecab-ipadic-2.7.0-20070801
curl -L -o <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>.tar.gz <span style="color:#e6db74">&#34;https://drive.google.com/uc?export=download&amp;id=0B4y35FiV1wh7MWVlSDBCSXZMTXM&#34;</span>
tar zxfv <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>.tar.gz
cd <span style="color:#e6db74">${</span>fname<span style="color:#e6db74">}</span>
./configure --with-charset<span style="color:#f92672">=</span>utf8
make
sudo make install
ldconfig
cd ..
</code></pre></div><h3 id="make-に失敗するエラー">make に失敗するエラー</h3>
<p>現象: <code>No such file or directory</code>とでて<code>make</code>に失敗する</p>
<p>原因: インストールしたばかりのファイルのリンクができていない</p>
<p>解決法 1: <code>ldconfig</code>を使う</p>
<p>解決法 2: 自分でシンボリックリンクを作成</p>
<p>参考: <a href="https://irukanobox.blogspot.com/2017/09/raspberry-pipython3mecab.html">Raspberry Pi の Python3 で Mecab を使う</a></p>
<h2 id="おわりに">おわりに</h2>
<p><code>apt</code>と<code>make</code>のサイレントコマンドがうまく機能せず,とりあえず<code>&gt;/dev/null</code>にぶち込む形になってしまった。</p>
<p>とはいえこれで<a href="https://nlp100.github.io/ja/">言語処理 100 本ノック 2020</a>の 5, 6 章が Google Colab 上で完結できるようになりました。</p>
<p>Colab でのインストールは永続化されないので、何度も使う場合は<code>drive</code>上で<code>tar</code>ファイルと依存の<code>deb</code>ファイルを保存しておくのが良さそうです。</p>
]]></content>
        </item>
        
        <item>
            <title>Google Colab の個人的 Tips</title>
            <link>https://tomowarkar.github.io/blog/posts/colab_tips/</link>
            <pubDate>Tue, 05 May 2020 22:39:13 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/colab_tips/</guid>
            <description>Google Drive のマウント 1 GUI を操作して Google Drive をマウントする 左側にある 🗂:file_folder: から ドライブをマウント アクセスを許可の確認 &amp;gt; GOOGLE ドライブに</description>
            <content type="html"><![CDATA[<h2 id="google-drive-のマウント-1">Google Drive のマウント 1</h2>
<p>GUI を操作して Google Drive をマウントする</p>
<ol>
<li>左側にある 🗂:file_folder: から</li>
<li>ドライブをマウント</li>
<li>アクセスを許可の確認 &gt; GOOGLE ドライブに接続</li>
<li>カレントディレクトリ配下に<code>drive</code>ファイルが作成されマウント完了</li>
</ol>

    <img src="https://i.imgur.com/RScyikA.png"  alt="blog top page"  class="center"  />


<h2 id="google-drive-のマウント-2">Google Drive のマウント 2</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># mount google drive</span>
<span style="color:#f92672">from</span> google.colab <span style="color:#f92672">import</span> drive
drive<span style="color:#f92672">.</span>mount(<span style="color:#e6db74">&#39;drive&#39;</span>)
</code></pre></div><p>上記コードを実行すると以下のように認証のための URL と認証コード入力画面が出る</p>
<pre><code>Go to this URL in a browser: path/to/auth

Enter your authorization code:

</code></pre><ol>
<li>認証 URL をクリック</li>
<li>アカウントの選択 &gt; 許可</li>
<li>ログインコードをコピーしてコード入力画面に貼り付け, 実行</li>
<li>カレントディレクトリ配下に<code>drive</code>(もしくは任意の)ファイルが作成されマウント完了</li>
</ol>
<h2 id="google-colab-の-ディレクトリ変更">Google Colab の ディレクトリ変更</h2>
<p>他のシェル実行コマンドと同じように <code>! cd path/to/dir</code> としてもディレクトリ変更がなされない。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">% cd path/to/dir
</code></pre></div><p><code>% cd /content/drive/My\ Drive</code> としておくと直接 drive のファイルを操作できる</p>
<h2 id="ローカルからのファイルアップロード">ローカルからのファイルアップロード</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> google.colab <span style="color:#f92672">import</span> files
uploaded <span style="color:#f92672">=</span> files<span style="color:#f92672">.</span>upload()
</code></pre></div><h2 id="ローカルへのファイルダウンロード">ローカルへのファイルダウンロード</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> google.colab <span style="color:#f92672">import</span> files

files<span style="color:#f92672">.</span>download(<span style="color:#e6db74">&#39;path/to/file.txt&#39;</span>)
</code></pre></div><h2 id="画像の表示">画像の表示</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> IPython.display <span style="color:#f92672">import</span> Image
Image(<span style="color:#e6db74">&#39;path/to/image.png&#39;</span>, width<span style="color:#f92672">=</span><span style="color:#ae81ff">200</span>)
</code></pre></div><p>参考: <a href="https://colab.research.google.com/notebooks/io.ipynb">ローカル ファイル システム</a></p>
<h2 id="個人的メモ">個人的メモ</h2>
<h3 id="util-コマンド">util コマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># drive に直接アクセス</span>
% cd /content/drive/My<span style="color:#ae81ff">\ </span>Drive

! grep <span style="color:#e6db74">&#39;hoge&#39;</span> -ilr . --include<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;*.py&#39;</span>

! find . -name *txt
</code></pre></div><h3 id="pip-系コマンド">pip 系コマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># pip install</span>
! pip install pkg

<span style="color:#75715e"># pip の パッケージリストの取得</span>
! pip list

<span style="color:#75715e"># パッケージのバージョンとか詳細</span>
! pip show pkg
</code></pre></div><h3 id="apt-系コマンド">apt 系コマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># インストール</span>
! apt-get install pkg

<span style="color:#75715e"># dpkg系</span>
! dpkg --help
! dpkg -L pkg

<span style="color:#75715e"># パッケージの削除</span>
! apt-get purge pkg
</code></pre></div><p><a href="https://qiita.com/white_aspara25/items/723ae4ebf0bfefe2115c">[Ubuntu] apt-get まとめ</a></p>
<h3 id="mecab-インストール">MeCab インストール</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># See: https://pypi.org/project/mecab-python3/</span>
! apt-get install swig libmecab-dev mecab-ipadic-utf8
! pip install mecab-python3

<span style="color:#75715e"># 必要に応じてdicdirやuserdicを書き換える</span>
! find . -name mecabrc
! cat /etc/mecabrc
</code></pre></div><h3 id="cabocha-インストール">CaboCha インストール</h3>
<p>予めcabochaとCRF++のソースをdrive内に置いていて、driveをマウントしていることが前提</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/content/drive/My Drive/src
└── make
    ├── cabocha-0.69.tar.bz2
    └── CRF++-0.58.tar.gz
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">%%bash
<span style="color:#75715e"># mecabとその依存関係もドライブ内に置いている場合</span>
<span style="color:#75715e"># apt-get install /content/drive/My\ Drive/src/apt/archives/*.deb &gt;/dev/null</span>
<span style="color:#75715e"># pip -q install /content/drive/My\ Drive/src/pip/*.tar.gz</span>

<span style="color:#75715e"># カレントディレクトリ(/content)にソースをコピー</span>
cp -R /content/drive/My<span style="color:#ae81ff">\ </span>Drive/src/make/<span style="color:#f92672">{</span>cabocha-0.69.tar.bz2,CRF++-0.58.tar.gz<span style="color:#f92672">}</span> .

<span style="color:#75715e"># crfppインストール</span>
tar -zxf CRF++-0.58.tar.gz
cd CRF++-0.58  
./configure --quiet <span style="color:#f92672">&amp;&amp;</span> make &gt;/dev/null <span style="color:#f92672">&amp;&amp;</span> make install &gt;/dev/null <span style="color:#f92672">&amp;&amp;</span> ldconfig  
cd ..

<span style="color:#75715e"># cabochaインストール</span>
tar -jxf cabocha-0.69.tar.bz2
cd cabocha-0.69
./configure  --quiet -with-charset<span style="color:#f92672">=</span>utf-8 <span style="color:#f92672">&amp;&amp;</span> make &gt;/dev/null <span style="color:#f92672">&amp;&amp;</span> make check &gt;/dev/null <span style="color:#f92672">&amp;&amp;</span> make install &gt;/dev/null <span style="color:#f92672">&amp;&amp;</span> ldconfig
pip -q install python/
cd ..
</code></pre></div><h3 id="拾い画像">拾い画像</h3>

    <img src="https://cdn.analyticsvidhya.com/wp-content/uploads/2020/03/ct14.png"  alt="blog top page"  class="center"  />


<h3 id="ドライブにパッケージを保存したかったり検証途中">ドライブにパッケージを保存したかったり(検証途中)</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># ドライブ内にパッケージのダウンロード</span>
! apt-get --download-only -o dir::cache<span style="color:#f92672">=</span>/content/drive/My<span style="color:#ae81ff">\ </span>Drive/src/apt install pkg
! pip download -d /content/drive/My<span style="color:#ae81ff">\ </span>Drive/src/pip --no-binary :all: pkg

<span style="color:#75715e"># ドライブ内からのパッケージのインストール</span>
! apt-get install /content/drive/My<span style="color:#ae81ff">\ </span>Drive/src/apt/archives/*.deb
! pip install /content/drive/My<span style="color:#ae81ff">\ </span>Drive/src/pip/*.tar.gz
</code></pre></div><h4 id="パッケージインストールの永続化のベストアンサー募集">パッケージインストールの永続化のベストアンサー募集</h4>
<p>必須ってわけじゃないけど、重いパッケージを毎回インストールするのは面倒だよね</p>
<p>とは言いつつも全部をドライブ内で管理しようとしても依存関係とかめんどそうだしどうしようかなーっていう現状</p>
<ul>
<li><a href="https://stackoverflow.com/questions/55253498/how-do-i-install-a-library-permanently-in-colab">How do I install a library permanently in Colab?</a></li>
<li><a href="https://stackoverflow.com/questions/49308803/is-there-any-way-to-not-installing-packages-on-google-colab-every-time?rq=1">is there any way to not installing packages on Google Colab every time?</a></li>
<li><a href="https://qiita.com/saten/items/d2ac85947583723246bf">pip install をオフラインで行う</a></li>
<li><a href="https://dawtrav.skr.jp/blog/ubuntu/install-package-offline/">オフラインの Ubuntu にパッケージインストール</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Hugo の目次機能を ON にしてみた</title>
            <link>https://tomowarkar.github.io/blog/posts/hugo_toc/</link>
            <pubDate>Tue, 05 May 2020 02:36:57 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/hugo_toc/</guid>
            <description>このブログで使用している Hugo のテーマは hello-friend-ng なのだが、目次機能がデフォルトでオフになっている。 そのためそもそもそんな機能あったのかというレベルだっ</description>
            <content type="html"><![CDATA[<p>このブログで使用している <code>Hugo</code> のテーマは <code>hello-friend-ng</code> なのだが、目次機能がデフォルトでオフになっている。</p>
<p>そのためそもそもそんな機能あったのかというレベルだったのだが、デフォルトをオンに変更し、今まで書いた記事も一括で目次がつくように変更してみた。</p>
<h2 id="記事のテンプレートをコピー">記事のテンプレートをコピー</h2>
<p><code>themes</code>配下のテーマソースの中から記事のテンプレートとなっている部分をコピーしてくる。</p>
<p>たぶんどのテーマも共通で <code>archetypes</code> 配下にあるのではないだろうか。</p>
<p><code>themes</code>配下のテーマソースを直接触らないように注意!!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp <span style="color:#f92672">{</span>themes/hello-friend-ng/,<span style="color:#f92672">}</span>archetypes/posts.md
</code></pre></div><h3 id="postsmd">posts.md</h3>
<p>そして値を変更する。</p>
<p><code>hello-friend-ng</code>では<code>toc: true</code>の部分が目次表示の判定部分</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">---
title: &#34;{{ replace .Name &#34;-&#34; &#34; &#34; | title }}&#34;
date: {{ .Date }}
draft: false
toc: true
images:
tags:
  <span style="color:#66d9ef">-</span> untagged
---
</code></pre></div><h2 id="目次のトピック文字変更">目次のトピック文字変更</h2>
<p><code>hello-friend-ng</code>では目次のタイトルが<code>Table of Contents</code>になっているのでそれを変更する。</p>
<p>先ほどと同じ要領で該当ソースを見つけコピーして, 変更する.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir i18n
cp <span style="color:#f92672">{</span>themes/hello-friend-ng/,<span style="color:#f92672">}</span>i18n/en.toml
</code></pre></div><h3 id="entoml">en.toml</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">tableOfContents</span>]
<span style="color:#a6e22e">other</span> = <span style="color:#e6db74">&#34;目次&#34;</span>
</code></pre></div><p>ここはもしかしたら<code>config.toml</code>をいじるだけで変更できるかもしれないが、わからないのでパス。</p>
<h2 id="過去記事を一括変更">過去記事を一括変更</h2>
<p>デフォルト値を変更しただけでは過去記事は目次非表示のままなので一括変更する。</p>
<p>みんな大好きシェルスクリプトだ。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">grep -rl -e <span style="color:#e6db74">&#39;^toc: false$&#39;</span> content/posts/ | xargs -n1 sed -i.bak <span style="color:#e6db74">&#39;s/^toc: false$/toc: true/g&#39;</span>
</code></pre></div><p><code>toc: false</code> -&gt; <code>toc: true</code>に変更するだけなのですぐにできる。</p>
<p>git 管理しているのでミスがあれば <code>git checkout</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git checkout content/posts/
</code></pre></div><p>変更差分を確認して、問題なさそうであれば <code>.bak</code>ファイルも一括で削除する</p>
<p>パイプラインに渡す前に確認を忘れずに</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">find content/posts/*bak | xargs -n1 rm
</code></pre></div><h2 id="参考">参考</h2>
<ul>
<li>
<p><a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng/blob/20810b2afdcfc2b0636d0c3277f6f2633af70916/exampleSite/content/posts/goisforlovers.md#hugo-parameters">hello-friend-ng::Hugo Parameters</a></p>
</li>
<li>
<p><a href="https://gohugo.io/content-management/toc/">Hugo::Table of Contents</a></p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>spaCyを使ってみた ~レンマ化とステミングの違い~</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp_spacy/</link>
            <pubDate>Mon, 04 May 2020 22:19:10 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp_spacy/</guid>
            <description>2020 年版 言語処理 100 本ノック 第 6 章 で自然言語処理ライブラリのspaCyを使った備忘録 Google Colab では標準で入っているので簡単に試してみるにはおすすめ 参考</description>
            <content type="html"><![CDATA[<p>2020 年版 <a href="https://nlp100.github.io/ja/ch06.html">言語処理 100 本ノック 第 6 章</a> で自然言語処理ライブラリの<code>spaCy</code>を使った備忘録</p>
<p>Google Colab では標準で入っているので簡単に試してみるにはおすすめ</p>
<h2 id="参考">参考</h2>
<p><a href="https://spacy.io/usage/spacy-101">spaCy 101: Everything you need to know</a></p>
<p><a href="https://qiita.com/miorgash/items/0eda4adcc8d9ecd143e6">spaCy 101: Everything you need to know 和訳</a></p>
<h2 id="環境">環境</h2>
<p>Google Colab</p>
<pre><code>! python -V
! pip show spacy
Python 3.6.9
Name: spacy
Version: 2.2.4
Summary: Industrial-strength Natural Language Processing (NLP) in Python
</code></pre><h2 id="トークン化">トークン化</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> spacy
nlp <span style="color:#f92672">=</span> spacy<span style="color:#f92672">.</span>load(<span style="color:#e6db74">&#34;en_core_web_sm&#34;</span>)

doc <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;So foul and fair a day I have not seen.&#34;</span>)

tokens <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc]
<span style="color:#66d9ef">print</span>(tokens) <span style="color:#75715e"># &gt; [So, foul, and, fair, a, day, I, have, not, seen, .]</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">token <span style="color:#f92672">=</span> tokens[<span style="color:#ae81ff">5</span>]
<span style="color:#66d9ef">print</span>(token<span style="color:#f92672">.</span>text, token<span style="color:#f92672">.</span>lemma_, token<span style="color:#f92672">.</span>pos_, token<span style="color:#f92672">.</span>tag_,
    token<span style="color:#f92672">.</span>dep_, token<span style="color:#f92672">.</span>shape_, token<span style="color:#f92672">.</span>is_alpha, token<span style="color:#f92672">.</span>is_stop)
    <span style="color:#75715e"># &gt; day day NOUN NN npadvmod xxx True False</span>
</code></pre></div><p>右から原文, 基本語形, 品詞, 詳細, 統計, 語形, 英字, ストップワードの順</p>
<blockquote>
<p>Text: The original word text.
Lemma: The base form of the word.
POS: The simple part-of-speech tag.
Tag: The detailed part-of-speech tag.
Dep: Syntactic dependency, i.e. the relation between tokens.
Shape: The word shape – capitalization, punctuation, digits.
is alpha: Is the token an alpha character?
is stop: Is the token part of a stop list, i.e. the most common words of the language?
参照: spaCy 101: Everything you need to know より</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># 品詞によるフィルター</span>
token_noun <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc <span style="color:#66d9ef">if</span> e<span style="color:#f92672">.</span>pos_ <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#34;NOUN&#34;</span>]]
<span style="color:#66d9ef">print</span>(token_noun) <span style="color:#75715e"># &gt; [day]</span>

<span style="color:#75715e"># ストップワードを除外</span>
token_excl_sw <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> e<span style="color:#f92672">.</span>is_stop]
<span style="color:#66d9ef">print</span>(token_excl_sw) <span style="color:#75715e"># &gt; [foul, fair, day, seen, .]</span>

<span style="color:#75715e"># 最低限のクリーニングをするなら。</span>
token_tidy <span style="color:#f92672">=</span> [e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> doc <span style="color:#66d9ef">if</span> e<span style="color:#f92672">.</span>pos_ <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#34;PUNCT&#34;</span>, <span style="color:#e6db74">&#34;SYM&#34;</span>, <span style="color:#e6db74">&#34;SPACE&#34;</span>]]
<span style="color:#66d9ef">print</span>(token_tidy) <span style="color:#75715e"># &gt; [So, foul, and, fair, a, day, I, have, not, seen]</span>
</code></pre></div><p>参考: <a href="https://spacy.io/api/annotation#section-pos-tagging">Syntactic Dependency Parsing</a></p>
<h2 id="固有表現">固有表現</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">doc <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;Apple bought 10 apples for 100 billion yen.&#34;</span>)
<span style="color:#66d9ef">for</span> ent <span style="color:#f92672">in</span> doc<span style="color:#f92672">.</span>ents:
    <span style="color:#66d9ef">print</span>(ent<span style="color:#f92672">.</span>text, ent<span style="color:#f92672">.</span>start_char, ent<span style="color:#f92672">.</span>end_char, ent<span style="color:#f92672">.</span>label_)
</code></pre></div><pre><code>Apple 0 5 ORG
10 13 15 CARDINAL
100 billion yen 27 42 MONEY
</code></pre><p>数字の有意性を図るのに使えそう?</p>
<h2 id="単語ベクトルと類似性">単語ベクトルと類似性</h2>
<p>末尾に<code>sm</code>とつく<code>en_core_web_sm</code>のような言語モデルでは単語ベクトルが含まれておらず精度が低い。</p>
<p>また実行時に<code>ModelsWarning: [W007] The model you're using has no word vectors loaded, so the ...</code>と警告される。</p>
<p>言語モデルを確認のこと、データ量の大きいモデルをダウンロードすると良い</p>
<pre><code># python -m spacy download en_core_web_md
python -m spacy download en_core_web_lg
</code></pre><p>またさらに上記コードでモデルをダウンロードして、いざ<code>nlp = spacy.load(&quot;en_core_web_lg&quot;)</code>で扱おうとしても
<code>OSError: [E050] Can't find model 'en_core_web_lg'. It doesn't ...</code>モデルみつかんねーよとエラーが出る場合がある(jupyter notebook や google colab で発現?)</p>
<p>参考: <a href="https://github.com/explosion/spaCy/issues/4577">spaCy issues #4577</a></p>
<p>上記 issue にもあるように以下コードで修正した</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> en_core_web_lg
nlp <span style="color:#f92672">=</span> en_core_web_lg<span style="color:#f92672">.</span>load()
</code></pre></div><h3 id="類似性">類似性</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dog <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;dog&#34;</span>)
cat <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;cat&#34;</span>)
apple <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;apple&#34;</span>)

<span style="color:#66d9ef">print</span>(dog<span style="color:#f92672">.</span>text, cat<span style="color:#f92672">.</span>text, dog<span style="color:#f92672">.</span>similarity(cat))
<span style="color:#66d9ef">print</span>(dog<span style="color:#f92672">.</span>text, apple<span style="color:#f92672">.</span>text, dog<span style="color:#f92672">.</span>similarity(apple))
</code></pre></div><p>2 つのモデル(<code>en_core_web_sm</code>, <code>en_core_web_lg</code>)の類似度の結果をそれぞれ載せておく</p>
<pre><code># モデル en_core_web_sm
dog cat 0.6549556828973659
dog apple 0.6209418867452425

# モデル en_core_web_lg
dog cat 0.8016854705531046
dog apple 0.2633902481063797
</code></pre><p><code>sm</code>の方は犬と猫とりんごもそんな変わらない結果となっている。データ量は偉大。</p>
<h2 id="ハッシュ化">ハッシュ化</h2>
<p>自分でやろうとしたら管理が面倒なので, 便利だなーって思ったやつ</p>
<p>文字列にハッシュ 値が割り振られている</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">nlp<span style="color:#f92672">.</span>vocab<span style="color:#f92672">.</span>strings[<span style="color:#e6db74">&#34;apple&#34;</span>] <span style="color:#75715e"># &gt; 8566208034543834098</span>

nlp<span style="color:#f92672">.</span>vocab<span style="color:#f92672">.</span>strings[<span style="color:#ae81ff">3197928453018144401</span>] <span style="color:#75715e"># &gt; &#39;coffee&#39;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">lexeme <span style="color:#f92672">=</span> nlp<span style="color:#f92672">.</span>vocab[apple<span style="color:#f92672">.</span>text]
<span style="color:#66d9ef">print</span>(lexeme<span style="color:#f92672">.</span>text, lexeme<span style="color:#f92672">.</span>orth, lexeme<span style="color:#f92672">.</span>shape_, lexeme<span style="color:#f92672">.</span>prefix_, lexeme<span style="color:#f92672">.</span>suffix_,
            lexeme<span style="color:#f92672">.</span>is_alpha, lexeme<span style="color:#f92672">.</span>is_digit, lexeme<span style="color:#f92672">.</span>is_title, lexeme<span style="color:#f92672">.</span>lang_)
<span style="color:#75715e"># &gt; apple 8566208034543834098 xxxx a ple True False False en</span>
</code></pre></div><blockquote>
<p>Text: The original text of the lexeme.
Orth: The hash value of the lexeme.
Shape: The abstract word shape of the lexeme.
Prefix: By default, the first letter of the word string.
Suffix: By default, the last three letters of the word string.
is alpha: Does the lexeme consist of alphabetic characters?
is digit: Does the lexeme consist of digits?
参照: spaCy 101: Everything you need to know より</p>
</blockquote>
<h2 id="ステミングとレンマ化">ステミングとレンマ化</h2>
<p>spaCy は Stemming(ステミング)に対応しておらず、代わりに レンマ化(Lemmatization)を使うこととなります。</p>
<p>ステミングとレンマ化の違いを説明しろと言われてもまだあまり理解しておらず少し難しいので、<code>nltk</code>のスノーボールステマーと簡単な比較をしてみます。</p>
<h3 id="lemmatization">Lemmatization</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">doc <span style="color:#f92672">=</span> nlp(<span style="color:#e6db74">&#34;compute computer computed computing computation&#34;</span>)
<span style="color:#66d9ef">for</span> token <span style="color:#f92672">in</span> doc:
    <span style="color:#66d9ef">print</span>(token<span style="color:#f92672">.</span>text<span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; --&gt; &#39;</span> <span style="color:#f92672">+</span> token<span style="color:#f92672">.</span>lemma_)
</code></pre></div><h3 id="stemming">Stemming</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> nltk.stem.snowball <span style="color:#f92672">import</span> SnowballStemmer

stemmer <span style="color:#f92672">=</span> SnowballStemmer(language<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;english&#39;</span>)
tokens <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;compute computer computed computing computation&#34;</span><span style="color:#f92672">.</span>split()

<span style="color:#66d9ef">for</span> token <span style="color:#f92672">in</span> tokens:
    <span style="color:#66d9ef">print</span>(token <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; --&gt; &#39;</span> <span style="color:#f92672">+</span> stemmer<span style="color:#f92672">.</span>stem(token))
</code></pre></div><pre><code># Lemmatization
compute --&gt; compute
computer --&gt; computer
computed --&gt; compute
computing --&gt; compute
computation --&gt; computation

# Stemming
compute --&gt; comput
computer --&gt; comput
computed --&gt; comput
computing --&gt; comput
computation --&gt; comput
</code></pre><h3 id="ステミングとレンマ化の違い">ステミングとレンマ化の違い</h3>
<p>判別の難しい<code>saw</code>を使って違いを見てみます。
比較する文は<code>a power saw</code>と<code>I saw the apple</code>で, 結果のみを記します。</p>
<pre><code># a power saw (Lemmatization)
a --&gt; a
power --&gt; power
saw --&gt; see

# a power saw (Stemming)
a --&gt; a
power --&gt; power
saw --&gt; saw

# I saw the apple (Lemmatization)
I --&gt; -PRON-
saw --&gt; see
the --&gt; the
apple --&gt; apple

# I saw the apple (Stemming)
I --&gt; i
saw --&gt; saw
the --&gt; the
apple --&gt; appl
</code></pre><p>レンマ化ではノコギリの方の<code>saw</code>を<code>see</code>と誤認していますし、ステミンングでは<code>saw</code>を<code>see</code>と見抜けていません
。またステミンングでは<code>apple --&gt; appl</code>となっています。</p>
<p>この辺りがステミングとレンマ化の違いと言えるのではないでしょうか。</p>
<p>ステミングでは主に接尾の除去による処理が行われ、レンマ化では辞書参照が行われているという認識でしょうか?</p>
<p>とはいえステミングとレンマ化の違いは手段の違いでしかないので、目的に合わせて判断やチューニングするのが大事でしょう。(自分は目的がうまく達成されるならどっちでもいいと捉えます)</p>
<h4 id="眺めた記事たち">眺めた記事たち</h4>
<ul>
<li><a href="https://stackabuse.com/python-for-nlp-tokenization-stemming-and-lemmatization-with-spacy-library/">Python for NLP: Tokenization, Stemming, and Lemmatization with SpaCy Library</a></li>
<li><a href="https://www.haya-programming.com/entry/2018/03/25/203836">【python】nltk で英語の Stemming と Lemmatization</a></li>
<li><a href="https://stackoverflow.com/questions/1787110/what-is-the-difference-between-lemmatization-vs-stemming">What is the difference between lemmatization vs stemming?</a></li>
<li><a href="https://www.quora.com/What-are-the-advantages-of-Spacy-vs-NLTK">What-are-the-advantages-of-Spacy-vs-NLTK</a></li>
</ul>
<h2 id="おわりに">おわりに</h2>
<p>英語での自然言語処理を始めようとしたとき、機械的に空白で tokenize して、正規表現でクリーニングして、 <code>nltk</code>のスノーボールステマーでステミングして&hellip; と考えていたものが<code>spaCy</code>でほぼ実装できてしまいました。</p>
<p>深いレベル(自分でモデルのチューニングをする)の場合は分かりませんが、とりあえず自然言語処理をやってみるという点でこの<code>spaCy</code>は最高に使いやすかったです。</p>
<p>英語の自然言語処理は進んでるなーって感じです(こなみ)</p>
<ul>
<li><a href="https://sunscrapers.com/blog/8-best-python-natural-language-processing-nlp-libraries/">8 best Python Natural Language Processing (NLP) libraries</a></li>
</ul>
<p>P.S.　いくら<code>spaCy</code>が高速な言語解析ツールだからといって 10000 行を超える処理をさせると数分かかる(処理速度 ms 単位)</p>
]]></content>
        </item>
        
        <item>
            <title>Bashにおけるloopとかブレース展開とか並列行処理とか</title>
            <link>https://tomowarkar.github.io/blog/posts/bash_parallel_brace/</link>
            <pubDate>Sun, 03 May 2020 06:47:36 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/bash_parallel_brace/</guid>
            <description>ブレース展開 # こんなんとか echo {1..10} #&amp;gt; 1 2 3 4 5 6 7 8 9 10 # こんなんとか echo {{a..z},{A..Z}} #&amp;gt; a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H</description>
            <content type="html"><![CDATA[<h2 id="ブレース展開">ブレース展開</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># こんなんとか</span>
echo <span style="color:#f92672">{</span>1..10<span style="color:#f92672">}</span> <span style="color:#75715e">#&gt; 1 2 3 4 5 6 7 8 9 10</span>

<span style="color:#75715e"># こんなんとか</span>
echo <span style="color:#f92672">{{</span>a..z<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>A..Z<span style="color:#f92672">}}</span> <span style="color:#75715e">#&gt; a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span>
</code></pre></div><p>ファイル名を typo した時の変更とか, 深いディレクトリ操作とかで便利</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mv content/posts/bash_parallel_<span style="color:#f92672">{</span>braves,brace<span style="color:#f92672">}</span>.md
</code></pre></div><p>以下と同意</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mv content/posts/bash_parallel_braves.md content/posts/bash_parallel_brace.md
</code></pre></div><p>もちろん<code>cp</code> や <code>touch</code>などでも使える</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir -p test/<span style="color:#f92672">{</span>hoga,hige<span style="color:#f92672">}</span>/<span style="color:#f92672">{</span>1..3<span style="color:#f92672">}</span>
$ tree test/
test/
├── hige
│   ├── <span style="color:#ae81ff">1</span>
│   ├── <span style="color:#ae81ff">2</span>
│   └── <span style="color:#ae81ff">3</span>
└── hoga
    ├── <span style="color:#ae81ff">1</span>
    ├── <span style="color:#ae81ff">2</span>
    └── <span style="color:#ae81ff">3</span>
</code></pre></div><h3 id="mac-のブレース展開で詰まったところ">Mac のブレース展開で詰まったところ</h3>
<p>年月を<code>%Y%m</code>で表示したい</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 期待</span>
echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{</span>01..12<span style="color:#f92672">}</span> <span style="color:#75715e">#&gt; 202001 202002 202003 202004 202005 202006 202007 202008 202009 202010 202011 202012</span>

<span style="color:#75715e"># 現実 #&gt; 20201 20202 20203 20204 20205 20206 20207 20208 20209 202010 202011 202012</span>
</code></pre></div><p>0 パディングされなくて悲しい</p>
<h3 id="解決策">解決策</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># ゴリ押し法</span>
echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{{</span>01,02,03,04,05,06,07,08,09<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>10..12<span style="color:#f92672">}}</span>

<span style="color:#75715e"># xargs and printf法</span>
str<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#f92672">{</span>01..12<span style="color:#f92672">}</span> | xargs -n1 -I<span style="color:#f92672">{}</span> printf <span style="color:#e6db74">&#34;%02d,&#34;</span> <span style="color:#f92672">{}</span> | sed -e <span style="color:#e6db74">&#39;s/,$//g&#39;</span><span style="color:#66d9ef">)</span>
eval echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{</span>$str<span style="color:#f92672">}</span>

<span style="color:#75715e"># seq and sed法</span>
str<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>seq -w -s <span style="color:#e6db74">&#39;,&#39;</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">12</span> | sed -e <span style="color:#e6db74">&#39;s/,$//g&#39;</span><span style="color:#66d9ef">)</span>
eval echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{</span>$str<span style="color:#f92672">}</span>

<span style="color:#75715e"># sed法</span>
str<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#f92672">{</span>101..112<span style="color:#f92672">}</span> | sed -e <span style="color:#e6db74">&#39;s/1\([0-9]\{2\}\)/\1/g&#39;</span> -e <span style="color:#e6db74">&#39;s/\ /,/g&#39;</span><span style="color:#66d9ef">)</span>
eval echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{</span>$str<span style="color:#f92672">}</span>
</code></pre></div><h2 id="for-loop-の速度">for loop の速度</h2>
<p>ところで年月を<code>%Y%m</code>で表示したいと考えたときに一番簡単に実装できる方法が<code>for loop</code>を用いた実装ではないだろうか</p>
<p>巷では<code>for loop</code>は遅いと言われているが実際はどうなのか確かめてみる。</p>
<h3 id="0-パディングなし">0 パディングなし</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">f1<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">for</span> yy in <span style="color:#66d9ef">$(</span>seq <span style="color:#ae81ff">2020</span> 2020<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#66d9ef">for</span> m in <span style="color:#66d9ef">$(</span>seq <span style="color:#ae81ff">1</span> 12<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
            echo $yy$m &gt;/dev/null
        <span style="color:#66d9ef">done</span>
    <span style="color:#66d9ef">done</span>
<span style="color:#f92672">}</span>
time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> f1; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># &gt;real 5.02 user 1.53 sys 2.75</span>

f2<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">for</span> yy in <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#66d9ef">for</span> m in <span style="color:#f92672">{</span>1..12<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
            echo $yy$m &gt;/dev/null
        <span style="color:#66d9ef">done</span>
    <span style="color:#66d9ef">done</span>
<span style="color:#f92672">}</span>
time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> f2; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># &gt;real 0.44 user 0.21 sys 0.23</span>

<span style="color:#75715e">## 比較</span>
time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{{</span>01,02,03,04,05,06,07,08,09<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>10..12<span style="color:#f92672">}}</span>&gt;/dev/null; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e">#&gt; real 0.08 user 0.06 sys 0.02</span>
</code></pre></div><h4 id="question">question</h4>
<p>こちらのが比較としてより正しい気がするけどどうなのだろうか(ちなみにものすごく遅い)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{{</span>01,02,03,04,05,06,07,08,09<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>10..12<span style="color:#f92672">}}</span>| xargs -n1 -I<span style="color:#f92672">{}</span> echo <span style="color:#f92672">{}</span> &gt;/dev/null; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># &gt;real 16.82 user 5.57 sys 10.83</span>

<span style="color:#75715e"># 並列処理しても遅い</span>
time -p <span style="color:#f92672">(</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..1000<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> echo <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}{{</span>01,02,03,04,05,06,07,0
8,09<span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>10..12<span style="color:#f92672">}}</span>| xargs -n1 -P4 -I<span style="color:#f92672">{}</span> echo <span style="color:#f92672">{}</span> &gt;/dev/null; <span style="color:#66d9ef">done</span><span style="color:#f92672">)</span>
<span style="color:#75715e"># &gt;real 8.99 user 6.64 sys 14.65</span>
</code></pre></div><h2 id="並列処理">並列処理</h2>
<p>ついでなので<code>xargs</code>での並列処理についてメモを残しておく</p>
<h3 id="基本">基本</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ seq <span style="color:#ae81ff">10</span> | xargs echo
<span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>

$ seq <span style="color:#ae81ff">10</span> | xargs -t echo
echo <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>

$ seq <span style="color:#ae81ff">10</span> | xargs -t -n1 echo
echo <span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">1</span>
echo <span style="color:#ae81ff">2</span>
<span style="color:#ae81ff">2</span>
echo <span style="color:#ae81ff">3</span>
<span style="color:#ae81ff">3</span>
echo <span style="color:#ae81ff">4</span>
<span style="color:#ae81ff">4</span>
echo <span style="color:#ae81ff">5</span>
<span style="color:#ae81ff">5</span>
echo <span style="color:#ae81ff">6</span>
<span style="color:#ae81ff">6</span>
echo <span style="color:#ae81ff">7</span>
<span style="color:#ae81ff">7</span>
echo <span style="color:#ae81ff">8</span>
<span style="color:#ae81ff">8</span>
echo <span style="color:#ae81ff">9</span>
<span style="color:#ae81ff">9</span>
echo <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">10</span>
</code></pre></div><ul>
<li><code>-t</code> 実行コマンドを表示</li>
<li><code>-n</code> 引数の数を指定</li>
</ul>
<h3 id="n-コマンドと-l-コマンドの違い">n コマンドと L コマンドの違い</h3>
<ul>
<li><code>-n</code> 区切り文字 <code>' '</code>(スペース)で分割?</li>
<li><code>-L</code> 区切り文字 <code>\n</code>で分割?</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 以下二つは同様の結果を示す</span>
$ seq <span style="color:#ae81ff">10</span> | xargs -t -n3 echo
$ seq <span style="color:#ae81ff">10</span> | xargs -t -L3 echo

<span style="color:#75715e"># 違い</span>
$ seq  -s <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#ae81ff">10</span> | xargs -t -n3 echo
echo <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span>
<span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span>
echo <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span>
<span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span>
echo <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span>
<span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span>
echo <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">10</span>
$ seq  -s <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#ae81ff">10</span> | xargs -t -L3 echo
echo <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>
</code></pre></div><h3 id="引数の操作">引数の操作</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ seq <span style="color:#ae81ff">10</span> | xargs -t -n2 bash -c <span style="color:#e6db74">&#39;[ $0 -gt $1 ] &amp;&amp; echo $0 || echo $1&#39;</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span>
<span style="color:#ae81ff">2</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span>
<span style="color:#ae81ff">4</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">6</span>
<span style="color:#ae81ff">6</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span>
<span style="color:#ae81ff">8</span>
bash -c <span style="color:#f92672">[</span> $0 -gt $1 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $0 <span style="color:#f92672">||</span> echo $1 <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span>
<span style="color:#ae81ff">10</span>
</code></pre></div><h3 id="並列処理メイン">並列処理メイン</h3>
<p>途中経過より正しく並列処理されていることを確認</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">time -p seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
<span style="color:#75715e"># &gt;real 10.13 user 0.02 sys 0.05</span>
time -p seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> -P2 bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
<span style="color:#75715e"># &gt;real 5.07 user 0.02 sys 0.06</span>
time -p seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> -P10 bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
<span style="color:#75715e"># &gt;real 1.08 user 0.02 sys 0.07</span>
</code></pre></div><p>引数の数をしてして実行</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">time seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> -L2 bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
time seq <span style="color:#ae81ff">10</span> | xargs -t -I<span style="color:#f92672">{}</span> -L2 -P2 bash -c <span style="color:#e6db74">&#39;echo {} &gt;/dev/null &amp;&amp; sleep 1&#39;</span>
</code></pre></div><h2 id="使わなかったコード供養">使わなかったコード供養</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">red<span style="color:#f92672">(){</span> echo <span style="color:#e6db74">$&#39;\e[31m&#39;</span>$1<span style="color:#e6db74">$&#39;\e[0m&#39;</span> ;<span style="color:#f92672">}</span>
red hoge
</code></pre></div><p>参考 <a href="https://qiita.com/PruneMazui/items/8a023347772620025ad6">ANSI エスケープシーケンス チートシート</a></p>
<p>参考 <a href="https://sites.google.com/a/tatsuo.jp/programming/Home/bash/hentai-bunpou-saisoku-masuta#TOC--6">https://sites.google.com/a/tatsuo.jp/programming/Home/bash/hentai-bunpou-saisoku-masuta#TOC--6</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">eval echo <span style="color:#66d9ef">$(</span>echo <span style="color:#f92672">{</span><span style="color:#66d9ef">$(</span>seq -w <span style="color:#ae81ff">1</span> 12<span style="color:#66d9ef">)</span><span style="color:#f92672">}</span> | tr <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#e6db74">&#39;,&#39;</span><span style="color:#66d9ef">)</span> <span style="color:#75715e">#&gt; 01 02 03 04 05 06 07 08 09 10 11 12</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">f2<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">for</span> yy in <span style="color:#f92672">{</span>2020..2020<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#66d9ef">for</span> m in <span style="color:#f92672">{</span>1..12<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
            <span style="color:#f92672">[</span> $m -lt <span style="color:#ae81ff">10</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> printf <span style="color:#e6db74">&#34;%s0%s\n&#34;</span> $yy $m  <span style="color:#f92672">||</span> echo $yy$m
        <span style="color:#66d9ef">done</span>
    <span style="color:#66d9ef">done</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>日付めくりとかだと使えるかもね</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">since<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2020/01/01&#34;</span>
till<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2020/12/01&#34;</span>
dy<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>gdate -d $since +%Y%m<span style="color:#66d9ef">)</span>
ft<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>gdate -d $till +%Y%m<span style="color:#66d9ef">)</span>
monthes<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>

<span style="color:#66d9ef">while</span> <span style="color:#f92672">[</span> $dy -le $ft <span style="color:#f92672">]</span>; <span style="color:#66d9ef">do</span>
    echo $dy
    monthes<span style="color:#f92672">=</span><span style="color:#66d9ef">$((</span><span style="color:#f92672">++</span>monthes<span style="color:#66d9ef">))</span>
    dy<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>gdate -d <span style="color:#e6db74">&#34;</span>$since<span style="color:#e6db74"> </span>$monthes<span style="color:#e6db74"> month&#34;</span> +%Y%m<span style="color:#66d9ef">)</span>
<span style="color:#66d9ef">done</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Pandasの基本操作まとめ</title>
            <link>https://tomowarkar.github.io/blog/posts/ipynb_pandas_tutorial/</link>
            <pubDate>Sat, 02 May 2020 21:09:14 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/ipynb_pandas_tutorial/</guid>
            <description>備忘録的メモ この記事は Python 環境がなくても、Google Colab上で実際に動かすことができます。 実行環境 Google Colab ! cat /etc/issue Ubuntu 18.04.3 LTS \n \l ! python -V Python 3.6.9 ! pip show pandas</description>
            <content type="html"><![CDATA[<p>備忘録的メモ</p>
<p>この記事は Python 環境がなくても、<code>Google Colab</code>上で実際に動かすことができます。</p>
<h2 id="実行環境">実行環境</h2>
<ul>
<li><a href="https://colab.research.google.com/?hl=ja">Google Colab</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">! cat /etc/issue
Ubuntu 18.04.3 LTS <span style="color:#ae81ff">\n</span> <span style="color:#ae81ff">\l</span>

! python -V
Python 3.6.9

! pip show pandas | grep -e Name -e Version
Name: pandas
Version: 1.0.3
</code></pre></div><h3 id="ソースコード">ソースコード</h3>
<p><a href="https://colab.research.google.com/drive/1kodWef1HTaZeffIYQc7uyw4FTyvkr83F#forceEdit=true&amp;sandboxMode=true">https://colab.research.google.com/drive/1kodWef1HTaZeffIYQc7uyw4FTyvkr83F#forceEdit=true&amp;sandboxMode=true</a></p>
<p>ソースコードの実行には Google アカウントが必要です。</p>
<p>また実行時 <code>警告: このノートブックは Google が作成したものではありません。</code> とポップアップが出ます。データや認証情報の読み取りが無いよう留意しておりますが、実行に際しては一度ソースコードを読んでから実行することをお願い申し上げます。</p>
<h2 id="pandas-とは">Pandas とは</h2>
<p>データ操作と分析のための Python ライブラリ</p>
<p>Excel のような 2 次元のテーブルを用いて構造化されたデータへのアクセスを行う。</p>
<p>csv, json, xlsx などに対応していて, インターネット上のソースファイルも利用できる</p>
<h2 id="データセットのダウンロード">データセットのダウンロード</h2>
<p>今回は Titanic データセットを利用します。</p>
<p><a href="https://www.openml.org/d/40945">https://www.openml.org/d/40945</a></p>
<p>Unix コマンドを用いてデータセットのダウンロードと簡単な中身の確認をしていきます。</p>
<pre><code>curl -o titanic.csv https://www.openml.org/data/get_csv/16826755/phpMYEkMl
</code></pre><h3 id="内容確認">内容確認</h3>
<pre><code>head -n 3 titanic.csv &amp;&amp; tail -n 3 titanic.csv

&quot;pclass&quot;,&quot;survived&quot;,&quot;name&quot;,&quot;sex&quot;,&quot;age&quot;,&quot;sibsp&quot;,&quot;parch&quot;,&quot;ticket&quot;,&quot;fare&quot;,&quot;cabin&quot;,&quot;embarked&quot;,&quot;boat&quot;,&quot;body&quot;,&quot;home.dest&quot;
1,1,&quot;Allen, Miss. Elisabeth Walton&quot;,&quot;female&quot;,29,0,0,&quot;24160&quot;,211.3375,&quot;B5&quot;,&quot;S&quot;,&quot;2&quot;,?,&quot;St Louis, MO&quot;
1,1,&quot;Allison, Master. Hudson Trevor&quot;,&quot;male&quot;,0.9167,1,2,&quot;113781&quot;,151.55,&quot;C22 C26&quot;,&quot;S&quot;,&quot;11&quot;,?,&quot;Montreal, PQ / Chesterville, ON&quot;
3,0,&quot;Zakarian, Mr. Mapriededer&quot;,&quot;male&quot;,26.5,0,0,&quot;2656&quot;,7.225,?,&quot;C&quot;,?,304,?
3,0,&quot;Zakarian, Mr. Ortin&quot;,&quot;male&quot;,27,0,0,&quot;2670&quot;,7.225,?,&quot;C&quot;,?,?,?
3,0,&quot;Zimmerman, Mr. Leo&quot;,&quot;male&quot;,29,0,0,&quot;315082&quot;,7.875,?,&quot;S&quot;,?,?,?
</code></pre><h3 id="行数確認">行数確認</h3>
<pre><code>cat titanic.csv | wc -l

1310
</code></pre><h2 id="pandas-の-inport">pandas の inport</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pandas <span style="color:#f92672">as</span> pd
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># バージョン確認</span>
pd<span style="color:#f92672">.</span>__version__ <span style="color:#75715e">#&gt; &#39;1.0.3&#39;</span>
</code></pre></div><h2 id="データのインポート">データのインポート</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">src <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;titanic.csv&#34;</span>
df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(src)
</code></pre></div><p>データソースが<code>json</code>の場合<code>pd.read_json(src)</code>, <code>excel</code>の場合<code>pd.read_excel(src)</code>のように直感的に読み込むことができます。</p>
<p>データソースがインターネット上にある場合(例えば
<a href="https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv">COVID-19</a> )も<code>raw</code>ファイルを指定してあげることで同様に読み込むことができます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">src <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#34;</span>
</code></pre></div><h3 id="内容の確認">内容の確認</h3>
<p>頭 5 行の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>head(<span style="color:#ae81ff">5</span>)
</code></pre></div><p>うしろ 5 行の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>tail(<span style="color:#ae81ff">5</span>)
</code></pre></div><p>カラムを表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>columns
</code></pre></div><p>インデックスを表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>index
</code></pre></div><p>値を表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>values
</code></pre></div><p>各カラムのタイプを表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>dtypes
</code></pre></div><pre><code>pclass        int64
survived      int64
name         object
sex          object
age          object
sibsp         int64
parch         int64
ticket       object
fare         object
cabin        object
embarked     object
boat         object
body         object
home.dest    object
dtype: object
</code></pre><p>さらに詳しい DataFrame の基本情報を表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>info()
</code></pre></div><pre><code>RangeIndex: 1309 entries, 0 to 1308
Data columns (total 14 columns):
 #   Column     Non-Null Count  Dtype
---  ------     --------------  -----
 0   pclass     1309 non-null   int64
 1   survived   1309 non-null   int64
 2   name       1309 non-null   object
 3   sex        1309 non-null   object
 4   age        1309 non-null   object
 5   sibsp      1309 non-null   int64
 6   parch      1309 non-null   int64
 7   ticket     1309 non-null   object
 8   fare       1309 non-null   object
 9   cabin      1309 non-null   object
 10  embarked   1309 non-null   object
 11  boat       1309 non-null   object
 12  body       1309 non-null   object
 13  home.dest  1309 non-null   object
dtypes: int64(4), object(10)
memory usage: 143.3+ KB
</code></pre><h2 id="基本統計">基本統計</h2>
<p>基本統計の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>describe()
</code></pre></div><p>全てのカラムにおける統計の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>describe(include<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;all&#34;</span>)
</code></pre></div><h2 id="行列の抽出">行列の抽出</h2>
<p>行の抽出</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>loc[:, <span style="color:#e6db74">&#39;pclass&#39;</span>]

<span style="color:#75715e"># 以下のコードで同様の結果を得る</span>
df<span style="color:#f92672">.</span>pclass
df[<span style="color:#e6db74">&#34;pclass&#34;</span>]
</code></pre></div><pre><code>0       1
1       1
2       1
3       1
4       1
       ..
1304    3
1305    3
1306    3
1307    3
1308    3
Name: pclass, Length: 1309, dtype: int64
</code></pre><p>列の抽出</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>loc[<span style="color:#ae81ff">0</span>]
</code></pre></div><pre><code>pclass                                   1
survived                                 1
name         Allen, Miss. Elisabeth Walton
sex                                 female
age                                     29
sibsp                                    0
parch                                    0
ticket                               24160
fare                              211.3375
cabin                                   B5
embarked                                 S
boat                                     2
body                                     ?
home.dest                     St Louis, MO
Name: 0, dtype: object
</code></pre><h2 id="特定の行列の抽出">特定の行列の抽出</h2>
<p>行番号(index)が 100 から 104 の&quot;pclass&rdquo;, &ldquo;age&quot;のカラム</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>loc[range(<span style="color:#ae81ff">100</span>,<span style="color:#ae81ff">105</span>), [<span style="color:#e6db74">&#34;pclass&#34;</span>, <span style="color:#e6db74">&#34;age&#34;</span>]]
</code></pre></div><p>単独要素の抜き出し</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>at[<span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;ticket&#34;</span>]
</code></pre></div><pre><code>'367228'
</code></pre><p><code>loc</code>でも同様の結果を得るが、<code>at</code>の方が速い</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">%%</span>timeit
df<span style="color:#f92672">.</span>loc[<span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;ticket&#34;</span>]

    The slowest run took <span style="color:#ae81ff">14.63</span> times longer than the fastest<span style="color:#f92672">.</span> This could mean that an intermediate result <span style="color:#f92672">is</span> being cached<span style="color:#f92672">.</span>
    <span style="color:#ae81ff">100000</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">7.47</span> <span style="color:#960050;background-color:#1e0010">µ</span>s per loop

<span style="color:#f92672">%%</span>timeit
df<span style="color:#f92672">.</span>at[<span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;ticket&#34;</span>]

    The slowest run took <span style="color:#ae81ff">15.20</span> times longer than the fastest<span style="color:#f92672">.</span> This could mean that an intermediate result <span style="color:#f92672">is</span> being cached<span style="color:#f92672">.</span>
    <span style="color:#ae81ff">100000</span> loops, best of <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">4.26</span> <span style="color:#960050;background-color:#1e0010">µ</span>s per loop
</code></pre></div><h2 id="複雑な抽出">複雑な抽出</h2>
<p><code>survived</code> カラムが <code>1</code> である列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;survived&#34;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>]

df<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;survived == 1&#39;</span>)
</code></pre></div><p><code>embarked</code> カラムが <code>C</code> or <code>S</code> である列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;embarked&#34;</span>]<span style="color:#f92672">.</span>isin([<span style="color:#e6db74">&#34;C&#34;</span>, <span style="color:#e6db74">&#34;S&#34;</span>])]

df<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;embarked in [&#34;C&#34;, &#34;S&#34;]&#39;</span>)
</code></pre></div><p><code>name</code> が <code>A</code> で始まる列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;name&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;A&#34;</span>)]
</code></pre></div><p><code>name</code> が <code>e</code> で終わる列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;name&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>endswith(<span style="color:#e6db74">&#34;e&#34;</span>)]
</code></pre></div><p><code>name</code> に <code>z</code> が含まれる列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;name&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>contains(<span style="color:#e6db74">&#34;z&#34;</span>)]
</code></pre></div><p><code>name</code> に 別称(<code>()</code>で囲まれた名前)が含まれる列</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#34;name&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>match(<span style="color:#e6db74">&#34;._\([^\)]_\).\*&#34;</span>)]
</code></pre></div><h2 id="dtype-の変更">dtype の変更</h2>
<p><code>age</code> カラムは <code>int</code> もしくは <code>float</code> で表されて欲しいが、現状 <code>Object</code> で認識されている</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>dtype <span style="color:#75715e">#&gt; dtype(&#39;O&#39;)</span>
</code></pre></div><p><code>age</code> カラムで数値以外の文字が含まれるものを抽出してみると、<code>?</code>が含まれることがわかった。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">set(df[df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>match(<span style="color:#e6db74">&#34;[^\d]&#34;</span>)][<span style="color:#e6db74">&#34;age&#34;</span>]) <span style="color:#75715e">#&gt; {&#39;?&#39;}</span>
</code></pre></div><p>なので<code>?</code>を<code>NaN</code>に変更してやれば、<code>float</code>への変換ができる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># 数値以外の文字列をNaNで置換</span>
df[<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>replace({<span style="color:#e6db74">&#39;?&#39;</span>: <span style="color:#e6db74">&#39;NaN&#39;</span>})

<span style="color:#75715e"># dtypeの変更</span>
df[<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>astype(float)
</code></pre></div><p>以下のよう<code>mask</code> や <code>where</code> を使う手もある</p>
<p><code>df[&quot;age&quot;] = df[&quot;age&quot;].mask(df[&quot;age&quot;].str.match(&quot;[^\d]&quot;))</code></p>
<p><code>df[&quot;age&quot;] = df[&quot;age&quot;].where(df[&quot;age&quot;].str.match(&quot;\d&quot;))</code></p>
<h2 id="欠損地の扱い">欠損地の扱い</h2>
<p><code>?</code> を <code>NaN</code>に置換して、<code>float</code>データとして扱わせる為、<code>NaN</code>は欠損値として扱われることになる。</p>
<p>欠損値でないものの数</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>count()<span style="color:#f92672">.</span>sum() <span style="color:#75715e">#&gt; 1046</span>
</code></pre></div><p>欠損値の数</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[<span style="color:#e6db74">&#34;age&#34;</span>]<span style="color:#f92672">.</span>isnull()<span style="color:#f92672">.</span>sum() <span style="color:#75715e">#&gt; 263</span>
</code></pre></div><p>欠損値がある行の表示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df[df[<span style="color:#e6db74">&#39;age&#39;</span>]<span style="color:#f92672">.</span>isnull()]
</code></pre></div><p>欠損値を持つ行の削除 <code>dropna()</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">len(df<span style="color:#f92672">.</span>copy()<span style="color:#f92672">.</span>dropna()<span style="color:#f92672">.</span>index) <span style="color:#75715e">#&gt; 1046</span>
</code></pre></div><p>欠損値を持つ列の削除 <code>dropna(axis=1)</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">len(df<span style="color:#f92672">.</span>copy()<span style="color:#f92672">.</span>dropna(axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>columns) <span style="color:#75715e">#&gt; 13</span>
</code></pre></div><p>欠損値を 0 で置換 <code>fillna(0)</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>fillna(<span style="color:#ae81ff">0</span>)<span style="color:#f92672">.</span>at[<span style="color:#ae81ff">15</span>,<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#75715e">#&gt; 0.0</span>
</code></pre></div><p>欠損値を平均値で置換 <code>df.fillna(df.mean())</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>fillna(df<span style="color:#f92672">.</span>mean())<span style="color:#f92672">.</span>at[<span style="color:#ae81ff">15</span>,<span style="color:#e6db74">&#34;age&#34;</span>] <span style="color:#75715e">#&gt; 29.8811345124283</span>
</code></pre></div><p>中央値 <code>median()</code></p>
<p>最頻値 <code>mode()</code></p>
<p>欠損値を前の値で置換 <code>df.fillna(method='ffill')</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">df<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ffill&#39;</span>)<span style="color:#f92672">.</span>loc[[<span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">16</span>]]

<span style="color:#960050;background-color:#1e0010">欠損値を後ろの値で置換</span> <span style="color:#e6db74">`df.fillna(method=&#39;bfill&#39;)`</span>
<span style="color:#e6db74">``</span><span style="color:#960050;background-color:#1e0010">`</span>python
df<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bfill&#39;</span>)<span style="color:#f92672">.</span>loc[[<span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">16</span>]]
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BashでFizzBuzzとか素数判定とか</title>
            <link>https://tomowarkar.github.io/blog/posts/bash_fizzbuzz/</link>
            <pubDate>Tue, 28 Apr 2020 20:05:19 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/bash_fizzbuzz/</guid>
            <description>オーソドックスな FizzBuzz 数値部を弄るだけで様々なパターンに対応できる. for i in {1..30}; do if (($i % 15 == 0)); then echo FizzBuzz elif (($i % 3 == 0)); then echo Fizz elif (($i % 5 == 0)); then echo Buzz else echo $i fi done awk</description>
            <content type="html"><![CDATA[<h2 id="オーソドックスな-fizzbuzz">オーソドックスな FizzBuzz</h2>
<p>数値部を弄るだけで様々なパターンに対応できる.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..30<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>$i % 15 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span>
        echo FizzBuzz
    <span style="color:#66d9ef">elif</span> <span style="color:#f92672">((</span>$i % 3 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span>
        echo Fizz
    <span style="color:#66d9ef">elif</span> <span style="color:#f92672">((</span>$i % 5 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span>
        echo Buzz
    <span style="color:#66d9ef">else</span>
        echo $i
    <span style="color:#66d9ef">fi</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><h2 id="awk-を用いた-fizzbuzz">awk を用いた FizzBuzz</h2>
<p>テキストを処理でよく用いられる<code>awk</code>を用いた処理.
こちらも処理内容としてはオーソドックス</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">30</span> | awk <span style="color:#e6db74">&#39;{
</span><span style="color:#e6db74">    if($1 % 15 == 0){
</span><span style="color:#e6db74">        print &#34;FizzBuzz&#34;
</span><span style="color:#e6db74">    }else if($1 % 3 == 0){
</span><span style="color:#e6db74">        print &#34;Fizz&#34;
</span><span style="color:#e6db74">    }else if($1 % 5 == 0){
</span><span style="color:#e6db74">        print &#34;Buzz&#34;
</span><span style="color:#e6db74">    }else{
</span><span style="color:#e6db74">        print $1}
</span><span style="color:#e6db74">    }&#39;</span>
</code></pre></div><h2 id="sed-を用いた-fizzbuzz">sed を用いた FizzBuzz</h2>
<p><code>n コマンド</code>を用いた少し特殊な FizzBuzz</p>
<p>短くワンライナーで書けてかっこいいが, パターンが変わる場合少し面倒</p>
<p>実行環境が Mac のため?か<code>3~3</code>(3 行目から 3 行毎)みたいな表記が使えない(方法あれば教えてください 🙇‍♀️)ので以下の実装。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span>
</code></pre></div><h3 id="0-から始まる場合">0 から始まる場合</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span>

<span style="color:#75715e"># きちんと30まで表示するには以下の様にする必要がある</span>
seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">34</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span> | head -n <span style="color:#ae81ff">31</span>
</code></pre></div><h3 id="面倒なところ">面倒なところ</h3>
<p>この表記はうまくいくが&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*$/Buzz/&#39;</span>

ans1<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span><span style="color:#e6db74">`</span>
ans2<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*$/Buzz/&#39;</span><span style="color:#e6db74">`</span>

diff &lt;<span style="color:#f92672">(</span>echo $ans1<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans2<span style="color:#f92672">)</span> <span style="color:#75715e">#&gt;None</span>
</code></pre></div><p>同じ様に<code>n;</code>を<code>N;</code>に変えるだけではうまくいかないこともある</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*$/Buzz/&#39;</span>

ans1<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span><span style="color:#e6db74">`</span>
ans2<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;N;N;s/[0-9]*/Fizz/&#39;</span> | sed <span style="color:#e6db74">&#39;N;N;N;N;s/[0-9]*$/Buzz/&#39;</span><span style="color:#e6db74">`</span>

diff &lt;<span style="color:#f92672">(</span>echo $ans1<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans2<span style="color:#f92672">)</span>
1c1
&lt; FizzBuzz <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> Fizz <span style="color:#ae81ff">4</span> Buzz Fizz <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> Fizz Buzz <span style="color:#ae81ff">11</span> Fizz <span style="color:#ae81ff">13</span> <span style="color:#ae81ff">14</span> FizzBuzz <span style="color:#ae81ff">16</span> <span style="color:#ae81ff">17</span> Fizz <span style="color:#ae81ff">19</span> Buzz Fizz <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> Fizz Buzz <span style="color:#ae81ff">26</span> Fizz <span style="color:#ae81ff">28</span> <span style="color:#ae81ff">29</span>
---
&gt; Fizz <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> Fizz Buzz <span style="color:#ae81ff">5</span> Fizz <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">8</span> FizzBuzz <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">11</span> Fizz <span style="color:#ae81ff">13</span> Buzz Fizz <span style="color:#ae81ff">16</span> <span style="color:#ae81ff">17</span> Fizz Buzz <span style="color:#ae81ff">20</span> Fizz <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> FizzBuzz <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">26</span> Fizz <span style="color:#ae81ff">28</span> Buzz
</code></pre></div><p>別に<code>ans1</code>の方で問題ないが上手い書き方はないものか&hellip;</p>
<h3 id="動作確認">動作確認</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ans1<span style="color:#f92672">=</span><span style="color:#e6db74">`</span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..30<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>$i % 15 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span> echo FizzBuzz; <span style="color:#66d9ef">elif</span> <span style="color:#f92672">((</span>$i % 3 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span> echo Fizz; <span style="color:#66d9ef">elif</span> <span style="color:#f92672">((</span>$i % 5 <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span> echo Buzz; <span style="color:#66d9ef">else</span> echo $i; <span style="color:#66d9ef">fi</span> <span style="color:#66d9ef">done</span><span style="color:#e6db74">`</span>
ans2<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">30</span> | awk <span style="color:#e6db74">&#39;{if($1 % 15 == 0){print &#34;FizzBuzz&#34;}else if($1 % 3 == 0){print &#34;Fizz&#34;}else if($1 % 5 == 0){print &#34;Buzz&#34;}else{print $1}}&#39;</span><span style="color:#e6db74">`</span>
ans3<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;n;n;n;n;s/[0-9]*/Buzz/&#39;</span> | sed <span style="color:#e6db74">&#39;n;n;s/[0-9]*/Fizz/&#39;</span><span style="color:#e6db74">`</span>

<span style="color:#75715e"># デバック用</span>
diff &lt;<span style="color:#f92672">(</span>echo $ans1<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans2<span style="color:#f92672">)</span> <span style="color:#75715e">#&gt; None</span>
diff &lt;<span style="color:#f92672">(</span>echo $ans2<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans3<span style="color:#f92672">)</span> <span style="color:#75715e">#&gt; None</span>
diff &lt;<span style="color:#f92672">(</span>echo $ans3<span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>echo $ans1<span style="color:#f92672">)</span> <span style="color:#75715e">#&gt; None</span>
</code></pre></div><h4 id="memo">memo</h4>
<p>BSD ではなく GNU の<code>sed</code>では以下の様にも描ける様だ(未確認)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">30</span> | sed <span style="color:#e6db74">&#39;s/.*5$/Buzz/;3~3s/[0-9]*/Fizz/&#39;</span>
</code></pre></div><p>参考: <a href="https://qiita.com/gyu-don/items/f5440b16213200da9775">シェルコマンドで FizzBuzz</a></p>
<h2 id="素数判定">素数判定</h2>
<p>速度を考えないのであれば&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">isprime<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#f92672">[</span> $1 -lt <span style="color:#ae81ff">2</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">return</span>
    <span style="color:#f92672">[</span> $1 -eq <span style="color:#ae81ff">2</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $1 <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">for</span> p in <span style="color:#66d9ef">$(</span>seq <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">$(</span>expr $1 - 1<span style="color:#66d9ef">))</span>; <span style="color:#66d9ef">do</span>
        <span style="color:#f92672">((</span>$1 % $p <span style="color:#f92672">==</span> 0<span style="color:#f92672">))</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">done</span>
    echo $1
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">for</span> i in <span style="color:#66d9ef">$(</span>seq 100<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
    isprime $i
<span style="color:#66d9ef">done</span>
</code></pre></div><p><code>gfactor</code>(もしくは<code>factor</code>)を使う手もある(圧倒的に早い)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">seq <span style="color:#ae81ff">100</span> | gfactor | awk <span style="color:#e6db74">&#39;NF == 2&#39;</span> | cut -d : -f1
</code></pre></div><h2 id="なんか書いたけど使わなかったコード供養">なんか書いたけど使わなかったコード供養</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">max<span style="color:#f92672">(){</span> <span style="color:#f92672">[</span> $1 -gt $2 <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo $1 <span style="color:#f92672">||</span> echo $2; <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>コマンドラインからyoutubeの再生リストを取得する</title>
            <link>https://tomowarkar.github.io/blog/posts/bash_youtube/</link>
            <pubDate>Tue, 28 Apr 2020 12:26:31 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/bash_youtube/</guid>
            <description>チャンネル ID 抜き出し $ echo https://www.youtube.com/user/HikakinTV/videos | cut -d &amp;#34;/&amp;#34; -f 5 HikakinTV タイトルを取得 $ curl -s https://www.youtube.com/user/HikakinTV/videos | grep &amp;#34;yt-lockup-title&amp;#34; | sed -e &amp;#34;s/.*title=\&amp;#34;\([^\&amp;#34;]*\)\&amp;#34;.*/\1/g&amp;#34; 【悲報】新iPhone SE全色自分ごと水没！４万円台で買えるコス</description>
            <content type="html"><![CDATA[<h2 id="チャンネル-id-抜き出し">チャンネル ID 抜き出し</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ echo https://www.youtube.com/user/HikakinTV/videos | cut -d <span style="color:#e6db74">&#34;/&#34;</span> -f <span style="color:#ae81ff">5</span>
HikakinTV
</code></pre></div><h2 id="タイトルを取得">タイトルを取得</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s https://www.youtube.com/user/HikakinTV/videos | grep <span style="color:#e6db74">&#34;yt-lockup-title&#34;</span> | sed -e <span style="color:#e6db74">&#34;s/.*title=\&#34;\([^\&#34;]*\)\&#34;.*/\1/g&#34;</span>
【悲報】新iPhone SE全色自分ごと水没！４万円台で買えるコスパ抜群のiphone!【開封レビュー】【カメラ比較】【ヒカキンTV】
スーパー店員時代のヤバい話・変なお客さん【金隠しおじさん&amp;amp;クーラーおじさん】
国からもらったマスク誕生日に開封レビューしてみたw【31歳】
【悲報】ヒカキン、斉藤さんでブチギレられる…コロナのこと聞いたら危機感ないので注意してみた
ヒカキン×香取慎吾の質問コーナーで裏話や突っ込んだこと沢山聞けましたwww
1000万円のヒカキンゲームスタジオついに完成！【ゲーミングPC】
小池都知事にコロナのこと質問しまくってみた【ヒカキンTV】【新型コロナウイルス】
【開封】ニンテンドースイッチどうぶつの森セット&amp;amp;スイッチライトコーラル！【Nintendo Switch】
僕の地元でコロナが。緊急事態宣言が出ても帰省は控えよう【拡散希望】
店員さんに優しくしてあげよう。
【削除覚悟】きりたんぽ同士で無理やり共食いさせてみた…【衝撃映像】
自宅で本気の味噌ラーメン作ったらお店レベルにwww【麺処くるり】【ヒカキン&amp;amp;セイキン】
LINEでビデオ通話したら香取慎吾さんドッキリ【後編】ユーチューバーにかけまくるw【ヒカキンTV】
若いみんなへ、ヒカキンより。
LINEでビデオ通話したら香取慎吾さんドッキリ【前編】ユーチューバーにかけまくるw【ヒカキンTV】
【ドッキリ】デカキンUUUM加入！サプライズで大号泣!?【UUUM新オフィス紹介】
【ドッキリ】デカキンに無断で２人一緒に金髪にしてみたら発狂w【ヒカキンも金髪】
【費用????万円】渋谷に超巨大ヒカキントラック走らせてみたwww
BTSに間違われて空港がパニックになりました…【ヒカキンTV】
卒業式が出来なかったみんなへ、ヒカキンより。
【感動】まるおともふこがもう一匹の兄弟と再会！もふこに超ソックリでビックリ!?【家族再会】
【拡散希望】マスク詐欺が許せない。その手口と被害防止について【家族を守ろう】【注意喚起】
炎上中に質問100個答えますw【登録者800万人記念生配信】
【デマで炎上】トイレットペーパー不足はヒカキンが買い占めたせい【マスク不足について】
人間より大きい超巨大わたあめ作ったら大変すぎたwww
【旅動画】総額120万円の高級ニューヨーク旅 &amp;amp; ヒカキン流緊急パッキング！【NewYork旅行】
【ランキング】ヒカキンが選ぶマジでウマいセブンのおにぎりTOP５発表！
ママと初めてのウーバーイーツ食べ放題で大パニックwww【Uber Eats】
【わたあめ王決定戦】わたあめ作り＆ 大食いバトルで１位は誰だ!!!【ヒカキンvs関根りさvsマスオ】
【超簡単】カップヌードルチャーハンを７種類作って1位を決めたらまさかの結果に!!【炒飯】
</code></pre></div><h2 id="動画-url-を取得">動画 URL を取得</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s https://www.youtube.com/user/HikakinTV/videos | grep <span style="color:#e6db74">&#34;yt-lockup-title&#34;</span> | sed -e <span style="color:#e6db74">&#34;s/.*href=\&#34;\([^\&#34;]*\)\&#34;.*/https:\/\/www.youtube.com\1/g&#34;</span>
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>zPHERhDPIJM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>KAfULYulCJM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>RlVB-Q8eLHk
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>b0k-fdXk28c
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>DEuruU-doQM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>cEdeotYQMCM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>ofCsslfc-So
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>rzziAEhCJhI
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>YybcDn5BJAg
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>o_lfRo1_52c
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>Qq0_H0Zx51E
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>VRovUa1ioOw
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>lWEb0E1LmjE
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>ThfRyRj_1KI
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>V27iErwCs2E
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>iI7Nx3nXrdk
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>YvCQ1UZeHnA
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>E0jUYAfFHIM
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>D5gd_0dhQ00
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>VbHHk-Qw_nw
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>55dkC87QFU8
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>pqQDCOWtcZY
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>g8c0psnuDc8
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>rPTKNk1vU5w
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>WtYprWCWaVA
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>1LaaEldNh0Q
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>Np0xscEb3Dw
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>W5r3Y2TPZHo
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>anWsme7SRSs
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>jGbevSbPwOI
</code></pre></div>
    <img src="https://i.imgur.com/ZE6z532.png"  alt="blog top page"  class="center"  />


<p>うまくいってそう</p>
<h3 id="memo">memo</h3>
<ul>
<li>変更差分を取れば新規動画投稿のトリガーになりそう</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s https://www.youtube.com/user/HikakinTV/videos | grep -c <span style="color:#e6db74">&#34;yt-lockup-title&#34;</span>
<span style="color:#ae81ff">30</span>
</code></pre></div><ul>
<li>最新 30 件以上の動画の取得は<code>JavaScript</code>を用いた通信が用いられているためコマンドラインだけでは無理?</li>
<li>Chrome driver とか使う方が良さそう</li>
<li>grep 　正規表現の最短一致の記述がわからない <code>&quot;</code>内の最短一致を今回は<code>\&quot;\([^\&quot;]*\)\&quot;</code>この様に実装</li>
<li>python だと<code>\&quot;(.*?)\&quot;</code>これでいけた気がする</li>
<li>バックスラッシュの使い方が癖あるなぁ</li>
</ul>
<p>参考: <a href="https://qiita.com/hirohiro77/items/771ffb64dddceabf69a3">grep でこういう時はどうする?</a></p>
<h2 id="変更差分の取得例">変更差分の取得例</h2>
<p>簡単化のためテキストファイルを 5 行にして示す.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -s https://www.youtube.com/user/HikakinTV/videos | grep <span style="color:#e6db74">&#34;yt-lockup-title&#34;</span> | sed -e <span style="color:#e6db74">&#34;s/.*href=\&#34;\([^\&#34;]*\)\&#34;.*/https:\/\/www.youtube.com\1/g&#34;</span> &gt; hikakin<span style="color:#e6db74">`</span>date +%y%m%d<span style="color:#e6db74">`</span>.txt

$ cat -b hikakin200427.txt hikakin200428.txt
     1	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>KAfULYulCJM
     2	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>RlVB-Q8eLHk
     3	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>b0k-fdXk28c
     4	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>DEuruU-doQM
     5	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>cEdeotYQMCM
     1	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>anWsme7SRSs
     2	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>jGbevSbPwOI
     3	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>KAfULYulCJM
     4	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>RlVB-Q8eLHk
     5	https://www.youtube.com/watch?v<span style="color:#f92672">=</span>b0k-fdXk28c

$ diff hikakin200427.txt hikakin200428.txt | grep <span style="color:#e6db74">&#34;^&gt;\ &#34;</span> | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span>
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>anWsme7SRSs
https://www.youtube.com/watch?v<span style="color:#f92672">=</span>jGbevSbPwOI
</code></pre></div><p>本件関係ないけど<code>diff</code>に関して 1 へぇ<a href="https://qiita.com/wingedtw/items/2f05c5d0c37d71f209f4">diff でコマンドの出力の結果を直接比較する。</a></p>
]]></content>
        </item>
        
        <item>
            <title>BashからLINE botにメッセージを送る</title>
            <link>https://tomowarkar.github.io/blog/posts/bash_line/</link>
            <pubDate>Tue, 28 Apr 2020 00:49:59 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/bash_line/</guid>
            <description>Mac で LINE を開くのすら面倒くさい時用 参考 LINE Messaging API send push message コード line.sh #!/bin/bash # @(#) Send message to line bot. TOKEN=&amp;#34;your token&amp;#34; TO=&amp;#34;your userId on bot&amp;#34; pushMsg() { curl -s -X POST https://api.line.me/v2/bot/message/push \ -H &amp;#34;Content-Type: application/json&amp;#34; \ -H &amp;#34;Authorization: Bearer $TOKEN&amp;#34; \ -d &amp;#34;{ \&amp;#34;to\&amp;#34;: \&amp;#34;$TO\&amp;#34;, \&amp;#34;messages\&amp;#34;:[ { \&amp;#34;type\&amp;#34;:\&amp;#34;text\&amp;#34;, \&amp;#34;text\&amp;#34;:\&amp;#34;$1\&amp;#34; } ] }&amp;#34;</description>
            <content type="html"><![CDATA[<p>Mac で LINE を開くのすら面倒くさい時用</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://developers.line.biz/ja/services/messaging-api/">LINE Messaging API</a></li>
<li><a href="https://developers.line.biz/ja/docs/messaging-api/sending-messages/#methods-of-sending-message">send push message</a></li>
</ul>
<h2 id="コード">コード</h2>
<h3 id="linesh">line.sh</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># @(#) Send message to line bot.</span>

TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your token&#34;</span>
TO<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your userId on bot&#34;</span>

pushMsg<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    curl -s -X POST https://api.line.me/v2/bot/message/push <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        -H <span style="color:#e6db74">&#34;Content-Type: application/json&#34;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        -H <span style="color:#e6db74">&#34;Authorization: Bearer </span>$TOKEN<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        -d <span style="color:#e6db74">&#34;{
</span><span style="color:#e6db74">        \&#34;to\&#34;: \&#34;</span>$TO<span style="color:#e6db74">\&#34;,
</span><span style="color:#e6db74">        \&#34;messages\&#34;:[
</span><span style="color:#e6db74">            {
</span><span style="color:#e6db74">                \&#34;type\&#34;:\&#34;text\&#34;,
</span><span style="color:#e6db74">                \&#34;text\&#34;:\&#34;</span>$1<span style="color:#e6db74">\&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">        ]
</span><span style="color:#e6db74">    }&#34;</span>
<span style="color:#f92672">}</span>

res<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>pushMsg <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> | jq <span style="color:#e6db74">&#34;.message&#34;</span><span style="color:#66d9ef">)</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$res<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;null&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    echo <span style="color:#e6db74">&#34;done!&#34;</span>
<span style="color:#66d9ef">else</span>
    echo $res
<span style="color:#66d9ef">fi</span>
exit <span style="color:#ae81ff">0</span>
</code></pre></div><h2 id="usage">Usage</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ <span style="color:#75715e"># 成功した場合</span>
$ sh line.sh こんにちは
<span style="color:#66d9ef">done</span>!

$ <span style="color:#75715e"># 不正なToを指定した場合(例)</span>
$ sh line.sh こんにちは
<span style="color:#e6db74">&#34;The property, &#39;to&#39;, in the request body is invalid (line: -, column: -)&#34;</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Gmail API 受信フォルダの内容確認</title>
            <link>https://tomowarkar.github.io/blog/posts/gmail_api/</link>
            <pubDate>Tue, 28 Apr 2020 00:01:07 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/gmail_api/</guid>
            <description>コロナウイルス拡大に伴い、普段使っている UQ モバイルで学生向け（25 歳以下）に UQ mobile データ容量 30GB まで無償提供が発表された。 新型コロナウイルス感染</description>
            <content type="html"><![CDATA[<p>コロナウイルス拡大に伴い、普段使っている UQ モバイルで学生向け（25 歳以下）に UQ mobile データ容量 30GB まで無償提供が発表された。</p>
<p><a href="https://www.uqwimax.jp/annai/news_release/202004061.html">新型コロナウイルス感染症の影響拡大に伴う支援措置について</a></p>
<p>説明をよく読んでみると</p>
<blockquote>
<p>このたび、新型コロナウィルス感染症の拡大による学校・教育機関等の休校措置を踏まえ、学生のオンライン授業の利用等を支援するため、2020 年 4 月 1 日から 2020 年 4 月 30 日まで、25 歳以下のお客さまを対象（注 2）に、UQ mobile サービス(スマートフォンサービス)において、月間データ容量超過後に追加した 30GB までのデータ容量を無償で提供します（注 3）。</p>
</blockquote>
<blockquote>
<p>お客さまが「UQ mobile ポータルアプリ」または「データチャージサイト」より、追加でチャージしていただく必要がございます（注 5） 。データチャージによる追加購入手続き時の画面等には無償化対象となることが記載されませんが、本支援措置の適用条件を満たしたお客さまは、自動的に割引対象となります。</p>
</blockquote>
<blockquote>
<p>（注 5）最大 30GB を無償でご利用いただくためには、「500MB 単位」でのご購入手続きが必要となります。</p>
</blockquote>
<p>などとあり、かなりわかりづらく使いづらい仕様になっていることがわかる。最大 30GB 使うのには 60 回チャージしないとダメで、さらにそれが本当に割引されているかは引き落としまで分からないという恐怖である。やってるよっていう建前だけな気がしないでもない。</p>
<p>そもそも引き落としされるまで追加分が割引されるのかされないのか分からない仕様ってどうなんだろうか。ミスチャージによる課金を誘っている感が物すごい。（注 5）を読まずに 500MB 以上の単位で最大 30GB 分の追加チャージをすれば 30,000 円分の請求が来るのだろうか.そうなれば支援どころかコロナでお金を稼ぐ手段が限られる学生をより窮地に立たせることになる気がするのだが&hellip;</p>
<p>まあそれは置いておいて、この支援をより効率よく使いたいなということで Gmail API を使って自動化してしまおうという試み。</p>
<h2 id="前提">前提</h2>
<ul>
<li>UQ モバイルではデータ通信量が制限に近づくと自動メールが送られる</li>
<li>そのメールを元に UQ モバイルのデータチャージサイトへログイン, 500MB 分のチャージを行う</li>
</ul>
<p>以上二つのサイクルを月間 60 回(30GB 分)の制限をつけて自動化</p>
<p>今回は Gmail API の部分のみ</p>
<h2 id="セットアップ">セットアップ</h2>
<p><a href="https://developers.google.com/gmail/api/quickstart/python">https://developers.google.com/gmail/api/quickstart/python</a></p>
<h2 id="main">main</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pickle
<span style="color:#f92672">import</span> os.path
<span style="color:#f92672">from</span> googleapiclient.discovery <span style="color:#f92672">import</span> build
<span style="color:#f92672">from</span> google_auth_oauthlib.flow <span style="color:#f92672">import</span> InstalledAppFlow
<span style="color:#f92672">from</span> google.auth.transport.requests <span style="color:#f92672">import</span> Request

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GmailBase</span>:
    <span style="color:#75715e"># If modifying these scopes, delete the file token.pickle.</span>
    SCOPES <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;https://www.googleapis.com/auth/gmail.readonly&#34;</span>]
    <span style="color:#66d9ef">def</span> __init__(self, credentials_path):
        self<span style="color:#f92672">.</span>credentials_path <span style="color:#f92672">=</span> credentials_path
        self<span style="color:#f92672">.</span>service <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>build()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">build</span>(self):
        creds <span style="color:#f92672">=</span> None
        <span style="color:#75715e"># The file token.pickle stores the user&#39;s access and refresh tokens, and is</span>
        <span style="color:#75715e"># created automatically when the authorization flow completes for the first</span>
        <span style="color:#75715e"># time.</span>
        <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#34;token.pickle&#34;</span>):
            <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;token.pickle&#34;</span>, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> token:
                creds <span style="color:#f92672">=</span> pickle<span style="color:#f92672">.</span>load(token)
        <span style="color:#75715e"># If there are no (valid) credentials available, let the user log in.</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> creds <span style="color:#f92672">or</span> <span style="color:#f92672">not</span> creds<span style="color:#f92672">.</span>valid:
            <span style="color:#66d9ef">if</span> creds <span style="color:#f92672">and</span> creds<span style="color:#f92672">.</span>expired <span style="color:#f92672">and</span> creds<span style="color:#f92672">.</span>refresh_token:
                creds<span style="color:#f92672">.</span>refresh(Request())
            <span style="color:#66d9ef">else</span>:
                flow <span style="color:#f92672">=</span> InstalledAppFlow<span style="color:#f92672">.</span>from_client_secrets_file(
                    self<span style="color:#f92672">.</span>credentials_path, self<span style="color:#f92672">.</span>SCOPES)
                creds <span style="color:#f92672">=</span> flow<span style="color:#f92672">.</span>run_local_server(port<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
            <span style="color:#75715e"># Save the credentials for the next run</span>
            <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;token.pickle&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> token:
                pickle<span style="color:#f92672">.</span>dump(creds, token)

        <span style="color:#66d9ef">return</span> build(<span style="color:#e6db74">&#34;gmail&#34;</span>, <span style="color:#e6db74">&#34;v1&#34;</span>, credentials<span style="color:#f92672">=</span>creds)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GmailApiHandler</span>(GmailBase):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">list_labels</span>(self, userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;me&#34;</span>):
        <span style="color:#e6db74">&#34;&#34;&#34;Lists the user&#39;s Gmail labels.&#34;&#34;&#34;</span>
        results <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>labels()<span style="color:#f92672">.</span>list(
            userId<span style="color:#f92672">=</span>userId)<span style="color:#f92672">.</span>execute()
        labels <span style="color:#f92672">=</span> results<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;labels&#39;</span>, [])

        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> labels:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;No labels found.&#39;</span>)
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Labels:&#39;</span>)
            <span style="color:#66d9ef">for</span> label <span style="color:#f92672">in</span> labels:
                <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>, label[<span style="color:#e6db74">&#39;name&#39;</span>])

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find_messages</span>(self, userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;me&#34;</span>, count<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, query<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>):
        <span style="color:#e6db74">&#34;&#34;&#34;Returns the user&#39;s Gmail ids.&#34;&#34;&#34;</span>
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>messages()<span style="color:#f92672">.</span>list(
            userId<span style="color:#f92672">=</span>userId, maxResults<span style="color:#f92672">=</span>count, q<span style="color:#f92672">=</span>query)<span style="color:#f92672">.</span>execute()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">message_detail</span>(self, message_id, userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;me&#34;</span>):
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>messages()<span style="color:#f92672">.</span>get(userId<span style="color:#f92672">=</span>userId, id<span style="color:#f92672">=</span>message_id)<span style="color:#f92672">.</span>execute()
</code></pre></div><h3 id="usage">usage</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">gmail <span style="color:#f92672">=</span> GmailApiHandler(<span style="color:#e6db74">&#34;credentials.json&#34;</span>)
gmail_ids <span style="color:#f92672">=</span> gmail<span style="color:#f92672">.</span>find_messages(count<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, query<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UQ mobile データ通信量のご案内&#34;</span>)
gmail_id <span style="color:#f92672">=</span> gmail_ids<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;messages&#34;</span>)[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;id&#34;</span>)
message_details <span style="color:#f92672">=</span> gmail<span style="color:#f92672">.</span>message_detail(gmail_id)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_mail</span>(message_details):
    [subject] <span style="color:#f92672">=</span> list(filter(
        <span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;name&#34;</span>)<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;Subject&#34;</span>,
        message_details<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;payload&#34;</span>)<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;headers&#34;</span>)
    ))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;title:&#34;</span>, subject<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;value&#34;</span>))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;text: &#34;</span>, message_details<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;snippet&#34;</span>))

show_mail(message_details)
</code></pre></div><h3 id="out">out</h3>
<pre><code>title: UQ mobile データ通信量のご案内（自動送信メール）
text:  2020/04/27 21:05:31 ID：hogehoge 様日頃よりUQ mobileをご利用いただき誠にありがとうございます。 ご契約回線のデータ通信量のご利用状況について、お知らせいたします。 データ残量がなくなった場合、月末までデータ通信の速度に制限がかかります。 【電話番号】 08000000000 【データプラン】 データ高速（999GB） 【基本データ残量※】 0 MB ※上記
</code></pre><h2 id="日時とかデータ量とかの抽出">日時とかデータ量とかの抽出</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">extract</span>(text):
    date <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\d{4}/\d{2}/\d{2}\ \d{2}:\d{2}:\d{2}&#34;</span>, text)
    amount <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;【基本データ残量※】\ (\d)*&#34;</span>, text)
    <span style="color:#66d9ef">return</span> date, amount

text <span style="color:#f92672">=</span> message_details<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;snippet&#34;</span>)

<span style="color:#66d9ef">try</span>:
    [date], [amount] <span style="color:#f92672">=</span> extract(text)
<span style="color:#66d9ef">except</span>:
    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(f<span style="color:#e6db74">&#34;Undefined format: </span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">{text}&#34;</span>)

<span style="color:#66d9ef">print</span>(date, amount) <span style="color:#75715e">#&gt; 2020/04/27 21:05:31 0</span>
</code></pre></div><p>この本文内容を元にデータチャージ実行を行うかを判定し、データチャージの実行をさせると良さげ。</p>
<p>Gmail API の(初めてさわる)部分ができればあとは難しくないので、気が向けば続き描きます(多分書かない)</p>
<h2 id="uq-モバイルデータチャージサイト">UQ モバイルデータチャージサイト</h2>
<p>追加データが 0 になった時即時にデータチャージをするのであればメールをトリガーにするのがいいが、定時実行であれば以下のが楽かも。</p>
<h3 id="-注意">※ 注意</h3>
<p><a href="https://www.uqwimax.jp/signup/term/files/myuqmobile_service.pdf">my UQ mobile 利用規約</a>第８条の以下の部分に該当, 抵触する可能性があります。</p>
<blockquote>
<p>(12) 逆アセンブル、逆コンパイル、リバースエンジニアリング等、またはその他ソースコ
ード、構造、アイディア等を解析するような行為</p>
</blockquote>
<p>また該当しない場合においても、本来想定された利用法とは異なる操作を行っています。
いかなる損害が生じたとしても、当方は一切責任を負いませんのでコードの流用は自己責任でお願いします。</p>
<h4 id="追加データ残量の取得">追加データ残量の取得</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -F <span style="color:#e6db74">&#34;username=your username&#34;</span> -F <span style="color:#e6db74">&#34;password=your pass&#34;</span><span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  -sL https://dc.uqmobile.jp/login.action | grep -A <span style="color:#ae81ff">1</span> <span style="color:#e6db74">&#34;追加データ残量&#34;</span> | grep <span style="color:#e6db74">&#34;info-value&#34;</span> | sed -e <span style="color:#e6db74">&#34;s/.*&gt;\(.*\)&lt;\/span&gt;.*/\1/g&#34;</span> -e <span style="color:#e6db74">&#34;s/&amp;nbsp;//g&#34;</span>
0.16GB

<span style="color:#75715e"># テンプレート</span>
$ echo; echo <span style="color:#e6db74">&#34;UQモバイル 追加データの残量を表示します。ユーザー名とパスワードを入力してください&#34;</span>;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>read -sp <span style="color:#e6db74">&#34;username: &#34;</span> username; echo; read -sp <span style="color:#e6db74">&#34;password: &#34;</span> password; echo;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>curl -F <span style="color:#e6db74">&#34;username=</span>$username<span style="color:#e6db74">&#34;</span> -F <span style="color:#e6db74">&#34;password=</span>$password<span style="color:#e6db74">&#34;</span> -sL https://dc.uqmobile.jp/login.action |<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>grep -A <span style="color:#ae81ff">1</span> <span style="color:#e6db74">&#34;追加データ残量&#34;</span> | grep <span style="color:#e6db74">&#34;info-value&#34;</span> |<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sed -e <span style="color:#e6db74">&#34;s/.*&gt;\(.*\)&lt;\/span&gt;.*/追加データ残量: \1/g&#34;</span> -e <span style="color:#e6db74">&#34;s/&amp;nbsp;//g&#34;</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #05 前半</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-05/</link>
            <pubDate>Fri, 24 Apr 2020 10:51:15 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-05/</guid>
            <description>言語処理 100 本ノック(第 5 章: 係り受け解析) 夏目漱石の小説『吾輩は猫である』の文章（neko.txt）を CaboCha を使って係り受け解析し，その結果を neko.txt.cabocha</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch05.html">言語処理 100 本ノック(第 5 章: 係り受け解析)</a></p>
<blockquote>
<p>夏目漱石の小説『吾輩は猫である』の文章（neko.txt）を CaboCha を使って係り受け解析し，その結果を neko.txt.cabocha というファイルに保存せよ．このファイルを用いて，以下の問に対応するプログラムを実装せよ．</p>
</blockquote>
<h2 id="環境">環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ python3 -V
Python 3.6.8

$ cabocha --version
cabocha of 0.69
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat neko.txt | cabocha -f1 &gt; neko.txt.cabocha
$ more neko.txt.cabocha
* <span style="color:#ae81ff">0</span> -1D 0/0 0.000000
一      名詞,数,*,*,*,*,一,イチ,イチ
EOS
EOS
* <span style="color:#ae81ff">0</span> -1D 1/1 0.000000
　      記号,空白,*,*,*,*,　,　,　
吾輩は猫である  名詞,固有名詞,一般,*,*,*,吾輩は猫である,ワガハイハネコデアル,ワガハイワネコデアル
。      記号,句点,*,*,*,*,。,。,。
EOS
* <span style="color:#ae81ff">0</span> 2D 0/1 -1.911675
名前    名詞,一般,*,*,*,*,名前,ナマエ,ナマエ
は      助詞,係助詞,*,*,*,*,は,ハ,ワ
* <span style="color:#ae81ff">1</span> 2D 0/0 -1.911675
まだ    副詞,助詞類接続,*,*,*,*,まだ,マダ,マダ
* <span style="color:#ae81ff">2</span> -1D 0/0 0.000000
無い    形容詞,自立,*,*,形容詞・アウオ段,基本形,無い,ナイ,ナイ
。      記号,句点,*,*,*,*,。,。,。
EOS
</code></pre></div><h2 id="40-係り受け解析結果の読み込み形態素">40. 係り受け解析結果の読み込み（形態素）</h2>
<p>形態素を表すクラス Morph を実装せよ．このクラスは表層形（surface），基本形（base），品詞（pos），品詞細分類 1（pos1）をメンバ変数に持つこととする．さらに，CaboCha の解析結果（neko.txt.cabocha）を読み込み，各文を Morph オブジェクトのリストとして表現し，3 文目の形態素列を表示せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Morph</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;cabochaの形態素解析結果
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">        line (str): e.x. &#39;名前</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">名詞,一般,*,*,*,*,名前,ナマエ,ナマエ&#39;
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">        surface (str): 表層形
</span><span style="color:#e6db74">        base (str): 基本形
</span><span style="color:#e6db74">        pos (str): 品詞
</span><span style="color:#e6db74">        pos1 (str): 品詞細分類1
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">def</span> __init__(self, line):
        pattern <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;^([^,]*?)\t([^,]*?),([^,]*?)(?:,[^,]*?){4},([^,]*?)(?:(?:,[^,]*?){2})?$&#34;</span>
        <span style="color:#66d9ef">try</span>:
            [(self<span style="color:#f92672">.</span>surface, self<span style="color:#f92672">.</span>pos, self<span style="color:#f92672">.</span>pos1, self<span style="color:#f92672">.</span>base)] <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(pattern, line)
        <span style="color:#66d9ef">except</span>:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(f<span style="color:#e6db74">&#34;Invalid line pattern: </span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">{repr(line)}&#34;</span>, )

    <span style="color:#66d9ef">def</span> __str__(self):
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>surface

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_cabocha</span>(file_name):
    <span style="color:#66d9ef">with</span> open(file_name) <span style="color:#66d9ef">as</span> f:
        lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

    p <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>compile(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;^\*\ \d+\ (?:-1|\d+)D\ \d+\/\d+\ -?\d+\.\d+$&#34;</span>)
    sentence<span style="color:#f92672">=</span>[]
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
        <span style="color:#66d9ef">if</span> line <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;EOS&#34;</span>:
            <span style="color:#66d9ef">if</span> sentence:
                <span style="color:#66d9ef">yield</span> sentence
            sentence <span style="color:#f92672">=</span> []
            <span style="color:#66d9ef">continue</span>
        <span style="color:#66d9ef">elif</span> p<span style="color:#f92672">.</span>match(line):
            <span style="color:#66d9ef">continue</span>
        sentence<span style="color:#f92672">.</span>append(Morph(line))

sentences <span style="color:#f92672">=</span> list(read_cabocha(<span style="color:#e6db74">&#34;neko.txt.cabocha&#34;</span>))
<span style="color:#66d9ef">print</span>(list(map(str, sentences[<span style="color:#ae81ff">2</span>]))) <span style="color:#75715e">#&gt; [&#39;名前&#39;, &#39;は&#39;, &#39;まだ&#39;, &#39;無い&#39;, &#39;。&#39;]</span>
</code></pre></div><p>参考: <a href="http://taku910.github.io/cabocha/">係り受け解析レイヤの出力フォーマット</a></p>
<p>sentences ⊃ sentence = chunks ⊃ chunk = morphs ⊃ morph</p>
<h3 id="memo">memo</h3>
<ul>
<li>attributes は<code>'名前\t名詞,一般,*,*,*,*,名前,ナマエ,ナマエ\n'</code>のように(surface を除く)9 つがデフォ</li>
<li><code>'頸筋\t名詞,一般,*,*,*,*,*\n'</code>この様に attributes が 7 つしかないものもある</li>
</ul>
<h2 id="41-係り受け解析結果の読み込み文節係り受け">41. 係り受け解析結果の読み込み（文節・係り受け）</h2>
<p>40 に加えて，文節を表すクラス Chunk を実装せよ．このクラスは形態素（Morph オブジェクト）のリスト（morphs），係り先文節インデックス番号（dst），係り元文節インデックス番号のリスト（srcs）をメンバ変数に持つこととする．さらに，入力テキストの CaboCha の解析結果を読み込み，１文を Chunk オブジェクトのリストとして表現し，8 文目の文節の文字列と係り先を表示せよ．第 5 章の残りの問題では，ここで作ったプログラムを活用せよ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Chunk</span>:
    <span style="color:#66d9ef">def</span> __init__(self, dst):
        self<span style="color:#f92672">.</span>morphs <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>srcs <span style="color:#f92672">=</span> []
        self<span style="color:#f92672">.</span>dst <span style="color:#f92672">=</span> dst

    <span style="color:#66d9ef">def</span>  __str__(self):
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(list(map(str, self<span style="color:#f92672">.</span>morphs)))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_cabocha_v2</span>(file):
    <span style="color:#66d9ef">with</span> open(file) <span style="color:#66d9ef">as</span> f:
        sentences <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;EOS</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

    p <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>compile(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\*\ (\d+)\ (-1|\d+)D\ \d+\/\d+\ -?\d+\.\d+&#34;</span>)
    <span style="color:#66d9ef">for</span> sentence <span style="color:#f92672">in</span> sentences:
        dep <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>findall(sentence)
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> dep:
            <span style="color:#66d9ef">continue</span>

        chunks <span style="color:#f92672">=</span> []
        <span style="color:#66d9ef">for</span> (index, dst) <span style="color:#f92672">in</span> dep:
            c <span style="color:#f92672">=</span> Chunk(int(dst))
            c<span style="color:#f92672">.</span>srcs <span style="color:#f92672">=</span> [int(f) <span style="color:#66d9ef">for</span> f, t <span style="color:#f92672">in</span> dep <span style="color:#66d9ef">if</span> t <span style="color:#f92672">==</span> index]
            chunks<span style="color:#f92672">.</span>append(c)

        cnt <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> sentence<span style="color:#f92672">.</span>splitlines():
            <span style="color:#66d9ef">if</span> p<span style="color:#f92672">.</span>match(line):
                cnt <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
                <span style="color:#66d9ef">continue</span>
            <span style="color:#66d9ef">else</span>:
                chunks[cnt]<span style="color:#f92672">.</span>morphs<span style="color:#f92672">.</span>append(Morph(line))
        <span style="color:#66d9ef">yield</span> chunks

sentences <span style="color:#f92672">=</span> list(read_cabocha_v2(<span style="color:#e6db74">&#34;neko.txt.cabocha&#34;</span>))
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sentence <span style="color:#f92672">=</span> sentences[<span style="color:#ae81ff">5</span>] <span style="color:#75715e"># 空文を除しているので6行目が該当部</span>
<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{i}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{chunk.dst}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>, chunk)
</code></pre></div><pre><code>0	5	 吾輩 は
1	2	 ここ で
2	3	 始め て
3	4	 人間 という
4	5	 もの を
5	-1	 見 た 。
</code></pre><h2 id="42-係り元と係り先の文節の表示">42. 係り元と係り先の文節の表示</h2>
<p>係り元の文節と係り先の文節のテキストをタブ区切り形式ですべて抽出せよ．ただし，句読点などの記号は出力しないようにせよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sentence <span style="color:#f92672">=</span> sentences[<span style="color:#ae81ff">5</span>]
<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: list(filter(<span style="color:#66d9ef">lambda</span> y: y<span style="color:#f92672">.</span>pos <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;記号&#34;</span> , x))
    dst <span style="color:#f92672">=</span> i <span style="color:#66d9ef">if</span> chunk<span style="color:#f92672">.</span>dst <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">else</span> chunk<span style="color:#f92672">.</span>dst
    <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>f(chunk<span style="color:#f92672">.</span>morphs),<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">*</span>f(sentence[dst]<span style="color:#f92672">.</span>morphs))
</code></pre></div><pre><code>吾輩 は 	 見 た
ここ で 	 始め て
始め て 	 人間 という
人間 という 	 もの を
もの を 	 見 た
見 た 	 見 た
</code></pre><h2 id="43-名詞を含む文節が動詞を含む文節に係るものを抽出">43. 名詞を含む文節が動詞を含む文節に係るものを抽出</h2>
<p>名詞を含む文節が，動詞を含む文節に係るとき，これらをタブ区切り形式で抽出せよ．ただし，句読点などの記号は出力しないようにせよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sentence <span style="color:#f92672">=</span> sentences[<span style="color:#ae81ff">5</span>]
<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    <span style="color:#66d9ef">if</span> chunk<span style="color:#f92672">.</span>dst <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
        <span style="color:#66d9ef">continue</span>
    f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y: any([m<span style="color:#f92672">.</span>pos<span style="color:#f92672">==</span>y <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> x])
    a, b <span style="color:#f92672">=</span> chunk<span style="color:#f92672">.</span>morphs, sentence[chunk<span style="color:#f92672">.</span>dst]<span style="color:#f92672">.</span>morphs
    <span style="color:#66d9ef">if</span> f(a, <span style="color:#e6db74">&#34;名詞&#34;</span>) <span style="color:#f92672">and</span> f(b, <span style="color:#e6db74">&#34;動詞&#34;</span>):
        f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: list(filter(<span style="color:#66d9ef">lambda</span> y: y<span style="color:#f92672">.</span>pos <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;記号&#34;</span> , x))
        <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>f(a),<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">*</span>f(b))
</code></pre></div><pre><code>吾輩 は 	 見 た
ここ で 	 始め て
もの を 	 見 た
</code></pre><h2 id="44-係り受け木の可視化">44. 係り受け木の可視化</h2>
<p>与えられた文の係り受け木を有向グラフとして可視化せよ．可視化には，係り受け木を DOT 言語に変換し，Graphviz を用いるとよい．また，Python から有向グラフを直接的に可視化するには，pydot を使うとよい．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pydot <span style="color:#f92672">import</span> Dot, Edge, Node
graph <span style="color:#f92672">=</span> Dot(graph_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;digraph&#39;</span>)

<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    node <span style="color:#f92672">=</span> Node(i, label <span style="color:#f92672">=</span> chunk)
    graph<span style="color:#f92672">.</span>add_node(node)

<span style="color:#66d9ef">for</span> i, chunk <span style="color:#f92672">in</span> enumerate(sentence):
    <span style="color:#66d9ef">if</span> chunk<span style="color:#f92672">.</span>dst <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
        edge <span style="color:#f92672">=</span> Edge(i, chunk<span style="color:#f92672">.</span>dst)
        graph<span style="color:#f92672">.</span>add_edge(edge)

<span style="color:#f92672">from</span> PIL <span style="color:#f92672">import</span> Image
<span style="color:#f92672">from</span> io <span style="color:#f92672">import</span> BytesIO
img <span style="color:#f92672">=</span> Image<span style="color:#f92672">.</span>open(BytesIO(graph<span style="color:#f92672">.</span>create_png()))
img<span style="color:#f92672">.</span>show()
</code></pre></div>
    <img src="https://i.imgur.com/HnpGEwK.png"  alt="blog top page"  class="center"  />


]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #04</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-04/</link>
            <pubDate>Fri, 24 Apr 2020 07:07:28 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-04/</guid>
            <description>言語処理 100 本ノック(第 4 章: 形態素解析) 夏目漱石の小説『吾輩は猫である』の文章（[neko.txt](https://nlp100.gith</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch04.html">言語処理 100 本ノック(第 4 章: 形態素解析)</a></p>
<blockquote>
<p>夏目漱石の小説『吾輩は猫である』の文章（[neko.txt](<a href="https://nlp100.github.io/data/neko.txt">https://nlp100.github.io/data/neko.txt</a>）を MeCab を使って形態素解析し，その結果を neko.txt.mecab というファイルに保存せよ．このファイルを用いて，以下の問に対応するプログラムを実装せよ．</p>
<p>なお，問題 37, 38, 39 は matplotlib もしくは Gnuplot を用いるとよい．</p>
</blockquote>
<h2 id="環境">環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ python3 -V
Python 3.6.8
</code></pre></div><h3 id="mecab">mecab</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mecab --version
mecab of 0.996

$ more /usr/local/etc/mecabrc
;
; Configuration file of MeCab
;
; $Id: mecabrc.in,v 1.3 2006/05/29 15:36:08 taku-ku Exp $;
;
;dicdir <span style="color:#f92672">=</span>  /usr/local/lib/mecab/dic/ipadic
dicdir <span style="color:#f92672">=</span> /usr/local/lib/mecab/dic/mecab-ipadic-neologd
userdic <span style="color:#f92672">=</span> /path/to/user.dic

; output-format-type <span style="color:#f92672">=</span> wakati
; input-buffer-size <span style="color:#f92672">=</span> <span style="color:#ae81ff">8192</span>

; node-format <span style="color:#f92672">=</span> %m<span style="color:#ae81ff">\n</span>
; bos-format <span style="color:#f92672">=</span> %S<span style="color:#ae81ff">\n</span>
; eos-format <span style="color:#f92672">=</span> EOS<span style="color:#ae81ff">\n</span>
</code></pre></div><h3 id="memo">memo</h3>
<ul>
<li>mecab を通すと<code>surface\tpos,pos1,pos2,pos3,conjugation,form,base,read,spell\n</code>の形に解析結果が出力される</li>
</ul>
<p>久しぶりに mecab を触ったら以下のエラーが出た。どうやら昔定義したユーザー辞書が見つからないらしい。</p>
<p>なので mecab の設定ファイル(<code>/usr/local/etc/mecabrc</code>(Mac OS X))から<code>userdic = /path/to/user.dic</code>の 1 行を消してあげれば問題なく動く。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mecab
viterbi.cpp<span style="color:#f92672">(</span>50<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>tokenizer_-&gt;open<span style="color:#f92672">(</span>param<span style="color:#f92672">)]</span> tokenizer.cpp<span style="color:#f92672">(</span>127<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>d-&gt;open<span style="color:#f92672">(</span>dicfile<span style="color:#f92672">[</span>i<span style="color:#f92672">])]</span> dictionary.cpp<span style="color:#f92672">(</span>79<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>dmmap_-&gt;open<span style="color:#f92672">(</span>file, mode<span style="color:#f92672">)]</span> no such file or directory: /path/to/user.dic
</code></pre></div><h2 id="30-形態素解析結果の読み込み">30. 形態素解析結果の読み込み)</h2>
<p>形態素解析結果（neko.txt.mecab）を読み込むプログラムを実装せよ．ただし，各形態素は表層形（surface），基本形（base），品詞（pos），品詞細分類 1（pos1）をキーとするマッピング型に格納し，1 文を形態素（マッピング型）のリストとして表現せよ．第 4 章の残りの問題では，ここで作ったプログラムを活用せよ．</p>
<h3 id="download-nekotxt">Download neko.txt</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -Os https://nlp100.github.io/data/neko.txt
$ :&gt; neko.txt.mecab <span style="color:#f92672">&amp;&amp;</span> mecab &lt; neko.txt &gt; neko.txt.mecab
$ more neko.txt.mecab
一      名詞,数,*,*,*,*,一,イチ,イチ
EOS
EOS
　      記号,空白,*,*,*,*,　,　,　
吾輩は猫である  名詞,固有名詞,一般,*,*,*,吾輩は猫である,ワガハイハネコデアル,ワ
ガハイワネコデアル
。      記号,句点,*,*,*,*,。,。,。
EOS
名前    名詞,一般,*,*,*,*,名前,ナマエ,ナマエ
は      助詞,係助詞,*,*,*,*,は,ハ,ワ
まだ    副詞,助詞類接続,*,*,*,*,まだ,マダ,マダ
無い    形容詞,自立,*,*,形容詞・アウオ段,基本形,無い,ナイ,ナイ
。      記号,句点,*,*,*,*,。,。,。
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> MeCab

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_mecab</span>(file_name):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">      file_name (str): path to txt file.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Returns:
</span><span style="color:#e6db74">      Generator ([[word_shape]]): 一文毎のword_shapeの配列が返される.
</span><span style="color:#e6db74">      word_shape (dict): keys=[&#34;surface&#34;, &#34;base&#34;, &#34;pos&#34;, &#34;pos1&#34;]
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">with</span> open(file_name) <span style="color:#66d9ef">as</span> f:
        lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

    sentence <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        <span style="color:#66d9ef">if</span> line <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;EOS</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>:
            <span style="color:#66d9ef">if</span> sentence:
                <span style="color:#66d9ef">yield</span> sentence
            sentence <span style="color:#f92672">=</span> []
            <span style="color:#66d9ef">continue</span>

        surface, attr <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)
        cols <span style="color:#f92672">=</span> attr<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)
        sentence<span style="color:#f92672">.</span>append({
            <span style="color:#e6db74">&#39;surface&#39;</span>: surface,
            <span style="color:#e6db74">&#39;base&#39;</span>: cols[<span style="color:#ae81ff">6</span>],
            <span style="color:#e6db74">&#39;pos&#39;</span>: cols[<span style="color:#ae81ff">0</span>],
            <span style="color:#e6db74">&#39;pos1&#39;</span>: cols[<span style="color:#ae81ff">1</span>]
        })


wss  <span style="color:#f92672">=</span> list(read_mecab(<span style="color:#e6db74">&#34;neko.txt.mecab&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>wss[:<span style="color:#ae81ff">3</span>], sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;一&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;一&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;名詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;数&#39;</span><span style="color:#f92672">}]</span>
<span style="color:#f92672">[{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;\u3000&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;\u3000&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;記号&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;空白&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;吾輩は猫である&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;吾輩は猫である&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;名詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;固有名詞&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;。&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;。&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;記号&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;句点&#39;</span><span style="color:#f92672">}]</span>
<span style="color:#f92672">[{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;名前&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;名前&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;名詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;一般&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;は&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;は&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;助詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;係助詞&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;まだ&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;まだ&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;副詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;助詞類接続&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;無い&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;無い&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;形容詞&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;自立&#39;</span><span style="color:#f92672">}</span>, <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;surface&#39;</span>: <span style="color:#e6db74">&#39;。&#39;</span>, <span style="color:#e6db74">&#39;base&#39;</span>: <span style="color:#e6db74">&#39;。&#39;</span>, <span style="color:#e6db74">&#39;pos&#39;</span>: <span style="color:#e6db74">&#39;記号&#39;</span>, <span style="color:#e6db74">&#39;pos1&#39;</span>: <span style="color:#e6db74">&#39;句点&#39;</span><span style="color:#f92672">}]</span>
</code></pre></div><h2 id="functions">functions</h2>
<p>今回使うプログラムに対応した関数群.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filter_</span>(sentences, <span style="color:#f92672">*</span>, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x, target<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>, flatten<span style="color:#f92672">=</span>False):
    <span style="color:#e6db74">&#34;&#34;&#34;辞書型の配列を内包する配列に特化したフィルタ&#34;&#34;&#34;</span>
    out <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> sentence <span style="color:#f92672">in</span> sentences:
        filtered <span style="color:#f92672">=</span> list(filter(f, sentence))
        <span style="color:#66d9ef">if</span> target:
            filtered <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(target), filtered))
        <span style="color:#66d9ef">if</span> flatten:
            out<span style="color:#f92672">+=</span>filtered
        <span style="color:#66d9ef">else</span>:
            out<span style="color:#f92672">.</span>append(filtered)
    <span style="color:#66d9ef">return</span> out

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">frequency</span>(sentences):
    <span style="color:#e6db74">&#34;&#34;&#34;辞書型の配列を内包する配列の単語出現頻度を返す&#34;&#34;&#34;</span>
    dic <span style="color:#f92672">=</span> dict()
    <span style="color:#66d9ef">for</span> sentence <span style="color:#f92672">in</span> sentences:
        <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> sentence:
            surface <span style="color:#f92672">=</span> word<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;surface&#34;</span>)
            <span style="color:#66d9ef">if</span> dic<span style="color:#f92672">.</span>get(surface):
                dic[surface] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
            <span style="color:#66d9ef">else</span>:
                dic[surface] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">return</span> dic

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">top_n</span>(frequency, n<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>):
    <span style="color:#e6db74">&#34;&#34;&#34;単語出現頻度をソートし, 上位n件を返す&#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> sorted(frequency<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span>True)[:n]

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wc_plot</span>(freq):
    <span style="color:#e6db74">&#34;&#34;&#34;出現頻度を棒グラフでプロット&#34;&#34;&#34;</span>
    plt<span style="color:#f92672">.</span>bar(range(<span style="color:#ae81ff">1</span>, len(freq)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>), list(dict(freq)<span style="color:#f92672">.</span>values()))
    plt<span style="color:#f92672">.</span>show()
</code></pre></div><h2 id="31-動詞">31. 動詞</h2>
<p>動詞の表層形をすべて抽出せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">verb_surfaces <span style="color:#f92672">=</span> filter_(wss, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;動詞&#34;</span>, target<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;surface&#34;</span>, flatten<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(verb_surfaces) <span style="color:#75715e">#&gt; [&#39;生れ&#39;, &#39;つか&#39;, &#39;泣い&#39;, &#39;し&#39;, &#39;いる&#39;, &#39;始め&#39;, &#39;見&#39;, &#39;聞く&#39;, ...</span>
</code></pre></div><h2 id="32-動詞の原形">32. 動詞の原形</h2>
<p>動詞の原形をすべて抽出せよ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">verb_bases <span style="color:#f92672">=</span> filter_(wss, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;動詞&#34;</span>, target<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;base&#34;</span>, flatten<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(verb_bases) <span style="color:#75715e">#&gt; [&#39;生れる&#39;, &#39;つく&#39;, &#39;泣く&#39;, &#39;する&#39;, &#39;いる&#39;, &#39;始める&#39;, &#39;見る&#39;, &#39;聞く&#39;, ...</span>
</code></pre></div><h2 id="33-a-の-b">33. 「A の B」</h2>
<p>2 つの名詞が「の」で連結されている名詞句を抽出せよ．</p>
<h3 id="memo-1">memo</h3>
<ul>
<li>文意的に連体修飾格の「の」でありそうだが, trigram で実装する</li>
</ul>
<p>参考: <a href="https://dictionary.goo.ne.jp/word/%E3%81%AE/#jn-171157">の の意味</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> ws <span style="color:#f92672">in</span> wss:
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(ws) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>):
        n1, no, n2 <span style="color:#f92672">=</span> ws[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>]
        <span style="color:#66d9ef">if</span> no<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;surface&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;の&#34;</span> <span style="color:#f92672">and</span>\
            n1<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;名詞&#34;</span> <span style="color:#f92672">and</span>\
            n2<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;名詞&#34;</span>:

            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{n1.get(&#39;surface&#39;)}の{n2.get(&#39;surface&#39;)}&#34;</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">彼の掌
掌の上
書生の顔
はずの顔
顔の真中
穴の中
書生の掌
...
</code></pre></div><h2 id="34-名詞の連接">34. 名詞の連接</h2>
<p>名詞の連接（連続して出現する名詞）を最長一致で抽出せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">norn_series</span>(word_shapes):
    words <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> ws <span style="color:#f92672">in</span> word_shapes:
        <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> ws:
            <span style="color:#66d9ef">if</span> e<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;名詞&#34;</span>:
                words<span style="color:#f92672">.</span>append(e<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;surface&#34;</span>))
            <span style="color:#66d9ef">else</span>:
                <span style="color:#66d9ef">if</span> len(words) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
                    <span style="color:#66d9ef">yield</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(words)
                words <span style="color:#f92672">=</span> []
ns <span style="color:#f92672">=</span> list(norn_series(wss))
<span style="color:#66d9ef">print</span>(ns) <span style="color:#75715e">#&gt; [&#39;した所&#39;, &#39;人間中&#39;, &#39;一番獰悪&#39;, &#39;時妙&#39;, &#39;一毛&#39;, &#39;その後猫&#39;, &#39;一度&#39;, ...</span>
</code></pre></div><h2 id="35-単語の出現頻度">35. 単語の出現頻度</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">foa <span style="color:#f92672">=</span> frequency(wss)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>top_n(foa, <span style="color:#ae81ff">10</span>), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>('の', 9101)
('。', 7484)
('、', 6772)
('て', 6697)
('は', 6384)
('に', 6145)
('を', 6068)
('と', 5474)
('が', 5259)
('た', 3916)
</code></pre><p>品詞毎に分けずに出すので当然助詞が上位を占めている</p>
<h2 id="36-頻度上位-10-語">36. 頻度上位 10 語</h2>
<p>出現頻度が高い 10 語とその出現頻度をグラフ（例えば棒グラフなど）で表示せよ．</p>
<h3 id="memo-2">memo</h3>
<ul>
<li>せっかくなので名詞で出現頻度が高い 10 語とその出現頻度をグラフにする</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#f92672">as</span> plt

foa <span style="color:#f92672">=</span> top_n(frequency(filter_(wss, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>)<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;名詞&#34;</span>)), <span style="color:#ae81ff">10</span>)
<span style="color:#66d9ef">print</span>(list(map(<span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">0</span>], foa)))

wc_plot(foa)
</code></pre></div>
    <img src="https://i.imgur.com/ltYSxbZ.png"  alt="blog top page"  class="center"  />


<h2 id="37-猫と共起頻度の高い上位-10-語">37. 「猫」と共起頻度の高い上位 10 語</h2>
<p>「猫」とよく共起する（共起頻度が高い）10 語とその出現頻度をグラフ（例えば棒グラフなど）で表示せよ．</p>
<h3 id="memo-3">memo</h3>
<ul>
<li>共起の定義が不明瞭だが、今回は「猫」と同一文中に出現する物を共起すると定義する</li>
<li>せっかくなので動詞で出現頻度が高い 10 語とその出現頻度をグラフにする</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cat_rerations <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> ws <span style="color:#f92672">in</span> wss:
    <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> ws:
        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;猫&#34;</span> <span style="color:#f92672">in</span>  e<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;surface&#34;</span>):
            cat_rerations<span style="color:#f92672">.</span>append(ws)
            <span style="color:#66d9ef">break</span>
cat_rerations <span style="color:#f92672">=</span> top_n(frequency(filter_(cat_rerations, f<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;pos&#34;</span>)<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;動詞&#34;</span>)), <span style="color:#ae81ff">10</span>)
<span style="color:#66d9ef">print</span>(cat_rerations)
wc_plot(cat_rerations)
</code></pre></div>
    <img src="https://i.imgur.com/dqbrtCT.png"  alt="blog top page"  class="center"  />


<h2 id="38-ヒストグラム">38. ヒストグラム</h2>
<p>単語の出現頻度のヒストグラム（横軸に出現頻度，縦軸に出現頻度をとる単語の種類数を棒グラフで表したもの）を描け．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">arr <span style="color:#f92672">=</span> list(dict(sorted(foa<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span>True))<span style="color:#f92672">.</span>values())
plt<span style="color:#f92672">.</span>hist(arr, bins<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, range<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>))
plt<span style="color:#f92672">.</span>show()
</code></pre></div>
    <img src="https://i.imgur.com/SxRTS3A.png"  alt="blog top page"  class="center"  />


<h2 id="39-zipf-の法則">39. Zipf の法則</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plt<span style="color:#f92672">.</span>plot(range(<span style="color:#ae81ff">1</span>, len(arr)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>), arr,marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.&#39;</span>)
plt<span style="color:#f92672">.</span>xscale(<span style="color:#e6db74">&#39;log&#39;</span>)
plt<span style="color:#f92672">.</span>yscale(<span style="color:#e6db74">&#39;log&#39;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div>
    <img src="https://i.imgur.com/XUSWFbE.png"  alt="blog top page"  class="center"  />


]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #03</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-03/</link>
            <pubDate>Thu, 23 Apr 2020 14:16:41 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-03/</guid>
            <description>言語処理 100 本ノック(第 3 章: 正規表現) Wikipedia の記事を以下のフォーマットで書き出したファイルjawiki-country.json.gzがある． 1</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch03.html">言語処理 100 本ノック(第 3 章: 正規表現)</a></p>
<blockquote>
<p>Wikipedia の記事を以下のフォーマットで書き出したファイル<a href="https://nlp100.github.io/data/jawiki-country.json.gz">jawiki-country.json.gz</a>がある．
1 行に 1 記事の情報が JSON 形式で格納される
各行には記事名が”title”キーに，記事本文が”text”キーの辞書オブジェクトに格納され，そのオブジェクトが JSON 形式で書き出される
ファイル全体は gzip で圧縮される
以下の処理を行うプログラムを作成せよ．</p>
</blockquote>
<h2 id="環境">環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ python3 -V
Python 3.6.8
</code></pre></div><h2 id="20-json-データの読み込み">20. JSON データの読み込み</h2>
<p>Wikipedia 記事の JSON ファイルを読み込み，「イギリス」に関する記事本文を表示せよ．問題 21-29 では，ここで抽出した記事本文に対して実行せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gzip
<span style="color:#f92672">import</span> json

<span style="color:#66d9ef">with</span> gzip<span style="color:#f92672">.</span>open(<span style="color:#e6db74">&#34;jawiki-country.json.gz&#34;</span>, <span style="color:#e6db74">&#34;rt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

lines <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: json<span style="color:#f92672">.</span>loads(x), lines))
uk, <span style="color:#f92672">*</span>_ <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;title&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;イギリス&#34;</span>, lines))

uk_text <span style="color:#f92672">=</span> uk<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;text&#34;</span>)
<span style="color:#66d9ef">print</span>(uk_text)
</code></pre></div><pre><code>{{redirect|UK}}
{{redirect|英国|春秋時代の諸侯国|英 (春秋)}}
{{Otheruses|ヨーロッパの国|長崎県・熊本県の郷土料理|いぎりす}}
{{基礎情報 国
|略名  =イギリス
...
</code></pre><h2 id="21-カテゴリ名を含む行を抽出">21. カテゴリ名を含む行を抽出</h2>
<p>記事中でカテゴリ名を宣言している行を抽出せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re
category_lines <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x:re<span style="color:#f92672">.</span>search(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[Category:.*?\]\]&#34;</span>, x), uk_text<span style="color:#f92672">.</span>splitlines()))
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>category_lines, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>[[Category:イギリス|*]]
[[Category:イギリス連邦加盟国]]
[[Category:英連邦王国|*]]
[[Category:G8加盟国]]
[[Category:欧州連合加盟国|元]]
[[Category:海洋国家]]
[[Category:現存する君主国]]
[[Category:島国]]
[[Category:1801年に成立した国家・領域]]
</code></pre><h2 id="22-カテゴリ名の抽出-permalink">22. カテゴリ名の抽出 Permalink</h2>
<p>記事のカテゴリ名を（行単位ではなく名前で）抽出せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">categories <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[Category:(.*?)\]\]&#34;</span>, uk_text)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>categories, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>イギリス|*
イギリス連邦加盟国
英連邦王国|*
G8加盟国
欧州連合加盟国|元
海洋国家
現存する君主国
島国
1801年に成立した国家・領域
</code></pre><h3 id="純粋なカテゴリ名を取得">純粋なカテゴリ名を取得</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">categories <span style="color:#f92672">=</span> [c <span style="color:#66d9ef">for</span> c, _ <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[Category:(.*?)(\|.*)?\]\]&#34;</span>, uk_text)]
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>categories, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>イギリス
イギリス連邦加盟国
英連邦王国
G8加盟国
欧州連合加盟国
海洋国家
現存する君主国
島国
1801年に成立した国家・領域
</code></pre><h2 id="23-セクション構造-permalink">23. セクション構造 Permalink</h2>
<p>記事中に含まれるセクション名とそのレベル（例えば”== セクション名 ==”なら 1）を表示せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sections <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x: re<span style="color:#f92672">.</span>search(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;^=(.+)=$&#34;</span>, x), uk_text<span style="color:#f92672">.</span>splitlines()))
section_levels <span style="color:#f92672">=</span> [(section<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;=&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>), section<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;=&#34;</span>)<span style="color:#f92672">//</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> section <span style="color:#f92672">in</span> sections]
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>section_levels, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h3 id="きれいに書くならこう">きれいに書くならこう?</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> section_structure <span style="color:#f92672">=</span> [(j, len(i) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> i, j <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;(=+)(.*?)\1\n&#34;</span>, uk_text)]
 <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>section_structure, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>('国名', 1)
('歴史', 1)
('地理', 1)
('主要都市', 2)
('気候', 2)
('政治', 1)
('元首', 2)
('法', 2)
('内政', 2)
('地方行政区分', 2)
('外交・軍事', 2)
('経済', 1)
('鉱業', 2)
('農業', 2)
('貿易', 2)
('不動産', 2)
('エネルギー政策', 2)
('通貨', 2)
('企業', 2)
('通信', 3)
('交通', 1)
('道路', 2)
('鉄道', 2)
('海運', 2)
('航空', 2)
('科学技術', 1)
('国民', 1)
('言語', 2)
('宗教', 2)
('婚姻', 2)
('移住', 2)
('教育', 2)
('医療', 2)
('文化', 1)
('食文化', 2)
('文学', 2)
('哲学', 2)
('音楽', 2)
('ポピュラー音楽', 3)
('映画', 2)
('コメディ', 2)
('国花', 2)
('世界遺産', 2)
('祝祭日', 2)
('スポーツ', 2)
('サッカー', 3)
('クリケット', 3)
('競馬', 3)
('モータースポーツ', 3)
('野球', 3)
(' カーリング ', 3)
(' 自転車競技 ', 3)
('脚注', 1)
('関連項目', 1)
('外部リンク', 1)
</code></pre><h3 id="memo">memo</h3>
<ul>
<li>空白対処しないとなぁ</li>
</ul>
<h2 id="24-ファイル参照の抽出">24. ファイル参照の抽出</h2>
<p>記事から参照されているメディアファイルをすべて抜き出せ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">media_files <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[ファイル:([^|\]]*)&#34;</span>, uk_text)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>media_files, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>Royal Coat of Arms of the United Kingdom.svg
United States Navy Band - God Save the Queen.ogg
Descriptio Prime Tabulae Europae.jpg
Lenepveu, Jeanne d'Arc au siège d'Orléans.jpg
London.bankofengland.arp.jpg
Battle of Waterloo 1815.PNG
Uk topo en.jpg
BenNevis2005.jpg
Population density UK 2011 census.png
2019 Greenwich Peninsula &amp; Canary Wharf.jpg
Birmingham Skyline from Edgbaston Cricket Ground crop.jpg
Leeds CBD at night.jpg
Glasgow and the Clyde from the air (geograph 4665720).jpg
Palace of Westminster, London - Feb 2007.jpg
Scotland Parliament Holyrood.jpg
Donald Trump and Theresa May (33998675310) (cropped).jpg
Soldiers Trooping the Colour, 16th June 2007.jpg
City of London skyline from London City Hall - Oct 2008.jpg
Oil platform in the North SeaPros.jpg
Eurostar at St Pancras Jan 2008.jpg
Heathrow Terminal 5C Iwelumo-1.jpg
Airbus A380-841 G-XLEB British Airways (10424102995).jpg
UKpop.svg
Anglospeak.svg
Royal Aberdeen Children's Hospital.jpg
CHANDOS3.jpg
The Fabs.JPG
Wembley Stadium, illuminated.jpg
</code></pre><h2 id="25-テンプレートの抽出">25. テンプレートの抽出</h2>
<p>記事中に含まれる「基礎情報」テンプレートのフィールド名と値を抽出し，辞書オブジェクトとして格納せよ．</p>
<h3 id="memo-1">memo</h3>
<ul>
<li>何が正解かわからん&hellip;</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">num <span style="color:#f92672">=</span> <span style="color:#ae81ff">999999</span>
<span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>finditer(<span style="color:#e6db74">&#34;{{基礎情報|{{|}}&#34;</span>,uk_text):
    <span style="color:#66d9ef">if</span> item<span style="color:#f92672">.</span>group() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;{{基礎情報&#34;</span>:
        start <span style="color:#f92672">=</span> item<span style="color:#f92672">.</span>end()
        num<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">elif</span> item<span style="color:#f92672">.</span>group() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;{{&#34;</span>:
        num<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">elif</span> item<span style="color:#f92672">.</span>group() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;}}&#34;</span>:
        num<span style="color:#f92672">-=</span><span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">if</span> num <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1</span>:
        end <span style="color:#f92672">=</span> item<span style="color:#f92672">.</span>start()
        <span style="color:#66d9ef">break</span>

ans <span style="color:#f92672">=</span> dict(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\|(.*?)\ *?=\ ?(.*?)\n&#34;</span>, uk_text[start:end]))
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>ans<span style="color:#f92672">.</span>items(), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>('略名', 'イギリス')
('日本語国名', 'グレートブリテン及び北アイルランド連合王国')
('公式国名', '{{lang|en|United Kingdom of Great Britain and Northern Ireland}}&lt;ref&gt;英語以外での正式国名:&lt;br /&gt;')
('国旗画像', 'Flag of the United Kingdom.svg')
('国章画像', '[[ファイル:Royal Coat of Arms of the United Kingdom.svg|85px|イギリスの国章]]')
('国章リンク', '（[[イギリスの国章|国章]]）')
('標語', '{{lang|fr|[[Dieu et mon droit]]}}&lt;br /&gt;（[[フランス語]]:[[Dieu et mon droit|神と我が権利]]）')
('国歌', &quot;[[女王陛下万歳|{{lang|en|God Save the Queen}}]]{{en icon}}&lt;br /&gt;''神よ女王を護り賜え''&lt;br /&gt;{{center|[[ファイル:United States Navy Band - God Save the Queen.ogg]]}}&quot;)
('地図画像', 'Europe-UK.svg')
('位置画像', 'United Kingdom (+overseas territories) in the World (+Antarctica claims).svg')
('公用語', '[[英語]]')
('首都', '[[ロンドン]]（事実上）')
('最大都市', 'ロンドン')
('元首等肩書', '[[イギリスの君主|女王]]')
('元首等氏名', '[[エリザベス2世]]')
('首相等肩書', '[[イギリスの首相|首相]]')
('首相等氏名', '[[ボリス・ジョンソン]]')
('他元首等肩書1', '[[貴族院 (イギリス)|貴族院議長]]')
('他元首等氏名1', '[[:en:Norman Fowler, Baron Fowler|ノーマン・ファウラー]]')
('他元首等肩書2', '[[庶民院 (イギリス)|庶民院議長]]')
('他元首等氏名2', '{{仮リンク|リンゼイ・ホイル|en|Lindsay Hoyle}}')
('他元首等肩書3', '[[連合王国最高裁判所|最高裁判所長官]]')
('他元首等氏名3', '[[:en:Brenda Hale, Baroness Hale of Richmond|ブレンダ・ヘイル]]')
('面積順位', '76')
('面積大きさ', '1 E11')
('面積値', '244,820')
('水面積率', '1.3%')
('人口統計年', '2018')
('人口順位', '22')
('人口大きさ', '1 E7')
('人口値', '6643万5600&lt;ref&gt;{{Cite web|url=https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates|title=Population estimates - Office for National Statistics|accessdate=2019-06-26|date=2019-06-26}}&lt;/ref&gt;')
('人口密度値', '271')
('GDP統計年元', '2012')
('GDP値元', '1兆5478億&lt;ref name=&quot;imf-statistics-gdp&quot;&gt;[http://www.imf.org/external/pubs/ft/weo/2012/02/weodata/weorept.aspx?pr.x=70&amp;pr.y=13&amp;sy=2010&amp;ey=2012&amp;scsm=1&amp;ssd=1&amp;sort=country&amp;ds=.&amp;br=1&amp;c=112&amp;s=NGDP%2CNGDPD%2CPPPGDP%2CPPPPC&amp;grp=0&amp;a=IMF&gt;Data and Statistics&gt;World Economic Outlook Databases&gt;By Countrise&gt;United Kingdom]&lt;/ref&gt;')
('GDP統計年MER', '2012')
('GDP順位MER', '6')
('GDP値MER', '2兆4337億&lt;ref name=&quot;imf-statistics-gdp&quot; /&gt;')
('GDP統計年', '2012')
('GDP順位', '6')
('GDP値', '2兆3162億&lt;ref name=&quot;imf-statistics-gdp&quot; /&gt;')
('GDP/人', '36,727&lt;ref name=&quot;imf-statistics-gdp&quot; /&gt;')
('建国形態', '建国')
('確立形態1', '[[イングランド王国]]／[[スコットランド王国]]&lt;br /&gt;（両国とも[[合同法 (1707年)|1707年合同法]]まで）')
('確立年月日1', '927年／843年')
('確立形態2', '[[グレートブリテン王国]]成立&lt;br /&gt;（1707年合同法）')
('確立年月日2', '1707年{{0}}5月{{0}}1日')
('確立形態3', '[[グレートブリテン及びアイルランド連合王国]]成立&lt;br /&gt;（[[合同法 (1800年)|1800年合同法]]）')
('確立年月日3', '1801年{{0}}1月{{0}}1日')
('確立形態4', &quot;現在の国号「'''グレートブリテン及び北アイルランド連合王国'''」に変更&quot;)
('確立年月日4', '1927年{{0}}4月12日')
('通貨', '[[スターリング・ポンド|UKポンド]] (£)')
('通貨コード', 'GBP')
('時間帯', '±0')
('夏時間', '+1')
('ISO 3166-1', 'GB / GBR')
('ccTLD', '[[.uk]] / [[.gb]]&lt;ref&gt;使用は.ukに比べ圧倒的少数。&lt;/ref&gt;')
('国際電話番号', '44')
('注記', '&lt;references/&gt;')
</code></pre><h3 id="debug">debug</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">len(list(filter(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#34;|&#34;</span>), uk_text[start:end]<span style="color:#f92672">.</span>splitlines()))) <span style="color:#f92672">==</span> len(ans)
<span style="color:#f92672">&gt;&gt;</span> True
</code></pre></div><h3 id="memo-2">memo</h3>
<ul>
<li>正規表現だけで空白削除頑張った</li>
</ul>
<h2 id="26-強調マークアップの除去-permalink">26. 強調マークアップの除去 Permalink</h2>
<p>25 の処理時に，テンプレートの値から MediaWiki の強調マークアップ（弱い強調，強調，強い強調のすべて）を除去してテキストに変換せよ（参考: マークアップ早見表）．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">new_ans <span style="color:#f92672">=</span> dict((k, re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;&#39;{2,3}|&#39;{5}&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, v)) <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> ans<span style="color:#f92672">.</span>items())
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;before: &#34;</span>, ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;確立形態4&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;after : &#34;</span>, new_ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;確立形態4&#34;</span>))
</code></pre></div><pre><code>before:  現在の国号「'''グレートブリテン及び北アイルランド連合王国'''」に変更
after :  現在の国号「グレートブリテン及び北アイルランド連合王国」に変更
</code></pre><h2 id="27-内部リンクの除去">27. 内部リンクの除去</h2>
<p>26 の処理に加えて，テンプレートの値から MediaWiki の内部リンクマークアップを除去し，テキストに変換せよ（参考: <a href="https://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8">マークアップ早見表</a>）．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">new_ans <span style="color:#f92672">=</span> dict((k, re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[(?!.*ファイル)(?!.*Category)([^|\]]+\|)*(.*?)\]\]&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">2&#34;</span>, v)) <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> ans<span style="color:#f92672">.</span>items())
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;before: &#34;</span>, ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;通貨&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;after : &#34;</span>, new_ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;通貨&#34;</span>))
<span style="color:#66d9ef">print</span>()
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;before: &#34;</span>, ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;確立形態3&#34;</span>))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;after : &#34;</span>, new_ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;確立形態3&#34;</span>))
</code></pre></div><pre><code>before:  [[スターリング・ポンド|UKポンド]] (£)
after :  UKポンド (£)

before:  [[グレートブリテン及びアイルランド連合王国]]成立&lt;br /&gt;（[[合同法 (1800年)|1800年合同法]]）
after :  グレートブリテン及びアイルランド連合王国成立&lt;br /&gt;（1800年合同法）
</code></pre><h3 id="memo-3">memo</h3>
<ul>
<li>漏れてる部分</li>
<li><code>{{}}</code>が干渉してそうだから先にこれを置換するのがいいか?</li>
</ul>
<pre><code>before:  [[女王陛下万歳|{{lang|en|God Save the Queen}}]]{{en icon}}&lt;br /&gt;''神よ女王を護り賜え''&lt;br /&gt;{{center|[[ファイル:United States Navy Band - God Save the Queen.ogg]]}}
after :  [[女王陛下万歳|{{lang|en|God Save the Queen}}]]{{en icon}}&lt;br /&gt;''神よ女王を護り賜え''&lt;br /&gt;{{center|[[ファイル:United States Navy Band - God Save the Queen.ogg]]}}
</code></pre><h2 id="28-mediawiki-マークアップの除去">28. MediaWiki マークアップの除去</h2>
<p>27 の処理に加えて，テンプレートの値から MediaWiki マークアップを可能な限り除去し，国の基本情報を整形せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">new_ans <span style="color:#f92672">=</span> dict()
<span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> ans<span style="color:#f92672">.</span>items():
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;&#39;{2,3}|&#39;{5}&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, v) <span style="color:#75715e"># 26</span>
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;{{(.*)\||:?(.*?)}}&#34;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">2&#39;</span>, v) <span style="color:#75715e"># {{}} 置換</span>
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;&lt;br\s*?/&gt;&#34;</span>, <span style="color:#e6db74">&#39; &#39;</span>, v) <span style="color:#75715e"># &lt;br /&gt;</span>
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;&lt;ref[^&gt;]*?/&gt;|&lt;ref[^&gt;]*?&gt;.*?/ref&gt;&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, v) <span style="color:#75715e"># &lt;ref&gt;&lt;/ref&gt;, &lt;ref /&gt;</span>
  v <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;\[\[([^|\]]+\|)*(.*?)\]\]&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">2&#34;</span>, v) <span style="color:#75715e"># 27改 ファイルもカテゴリーも置換</span>
  new_ans[k] <span style="color:#f92672">=</span> v
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>new_ans<span style="color:#f92672">.</span>items(), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><pre><code>('略名', 'イギリス')
('日本語国名', 'グレートブリテン及び北アイルランド連合王国')
('公式国名', 'United Kingdom of Great Britain and Northern Ireland&lt;ref&gt;英語以外での正式国名: ')
('国旗画像', 'Flag of the United Kingdom.svg')
('国章画像', 'イギリスの国章')
('国章リンク', '（国章）')
('標語', '神と我が権利]]）')
('国歌', 'God Save the Queen{{en icon 神よ女王を護り賜え {{center|ファイル:United States Navy Band - God Save the Queen.ogg')
('地図画像', 'Europe-UK.svg')
('位置画像', 'United Kingdom (+overseas territories) in the World (+Antarctica claims).svg')
('公用語', '英語')
('首都', 'ロンドン（事実上）')
('最大都市', 'ロンドン')
('元首等肩書', '女王')
('元首等氏名', 'エリザベス2世')
('首相等肩書', '首相')
('首相等氏名', 'ボリス・ジョンソン')
('他元首等肩書1', '貴族院議長')
('他元首等氏名1', 'ノーマン・ファウラー')
('他元首等肩書2', '庶民院議長')
('他元首等氏名2', 'Lindsay Hoyle')
('他元首等肩書3', '最高裁判所長官')
('他元首等氏名3', 'ブレンダ・ヘイル')
('面積順位', '76')
('面積大きさ', '1 E11')
('面積値', '244,820')
('水面積率', '1.3%')
('人口統計年', '2018')
('人口順位', '22')
('人口大きさ', '1 E7')
('人口値', '6643万5600')
('人口密度値', '271')
('GDP統計年元', '2012')
('GDP値元', '1兆5478億')
('GDP統計年MER', '2012')
('GDP順位MER', '6')
('GDP値MER', '2兆4337億')
('GDP統計年', '2012')
('GDP順位', '6')
('GDP値', '2兆3162億')
('GDP/人', '36,727')
('建国形態', '建国')
('確立形態1', 'イングランド王国／スコットランド王国 （両国とも1707年合同法まで）')
('確立年月日1', '927年／843年')
('確立形態2', 'グレートブリテン王国成立 （1707年合同法）')
('確立年月日2', '1707年{{05月{{01日')
('確立形態3', 'グレートブリテン及びアイルランド連合王国成立 （1800年合同法）')
('確立年月日3', '1801年{{01月{{01日')
('確立形態4', '現在の国号「グレートブリテン及び北アイルランド連合王国」に変更')
('確立年月日4', '1927年{{04月12日')
('通貨', 'UKポンド (£)')
('通貨コード', 'GBP')
('時間帯', '±0')
('夏時間', '+1')
('ISO 3166-1', 'GB / GBR')
('ccTLD', '.uk / .gb')
('国際電話番号', '44')
('注記', '')
</code></pre><h3 id="memo-4">memo</h3>
<ul>
<li>１行に複数該当がある場合に実装もれがある</li>
<li>該当を loop で置換するのがいいか?</li>
<li>疲れたのでここまで</li>
</ul>
<h2 id="29-国旗画像の-url-を取得する">29. 国旗画像の URL を取得する</h2>
<p>テンプレートの内容を利用し，国旗画像の URL を取得せよ．（ヒント: <a href="https://www.mediawiki.org/wiki/API:Main_page/ja">MediaWiki API</a>の<a href="https://www.mediawiki.org/wiki/API:**Imageinfo**">imageinfo</a>を呼び出して，ファイル参照を URL に変換すればよい）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> requests
URL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://en.wikipedia.org/w/api.php&#34;</span>
params <span style="color:#f92672">=</span> {
    <span style="color:#e6db74">&#34;action&#34;</span>: <span style="color:#e6db74">&#34;query&#34;</span>,
    <span style="color:#e6db74">&#34;format&#34;</span>: <span style="color:#e6db74">&#34;json&#34;</span>,
    <span style="color:#e6db74">&#34;prop&#34;</span>: <span style="color:#e6db74">&#34;imageinfo&#34;</span>,
    <span style="color:#e6db74">&#34;titles&#34;</span>: <span style="color:#e6db74">&#34;File:&#34;</span><span style="color:#f92672">+</span>ans<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;国旗画像&#34;</span>),
     <span style="color:#e6db74">&#39;iiprop&#39;</span> : <span style="color:#e6db74">&#39;url&#39;</span>,
}
r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(URL, params<span style="color:#f92672">=</span>params)
pages <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>json()[<span style="color:#e6db74">&#34;query&#34;</span>][<span style="color:#e6db74">&#34;pages&#34;</span>]
out <span style="color:#f92672">=</span> list(pages<span style="color:#f92672">.</span>values())[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;imageinfo&#34;</span>)[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;url&#34;</span>)
<span style="color:#66d9ef">print</span>(out)
</code></pre></div><pre><code>https://upload.wikimedia.org/wikipedia/en/a/ae/Flag_of_the_United_Kingdom.svg
</code></pre>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #02-bash</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-02/</link>
            <pubDate>Wed, 22 Apr 2020 13:01:34 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-02/</guid>
            <description>言語処理 100 本ノック(第 2 章: UNIX コマンド) popular-names.txtは，アメリカで生まれた赤ちゃんの「名前」「性別」「人数」「年」をタ</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch02.html">言語処理 100 本ノック(第 2 章: UNIX コマンド)</a></p>
<blockquote>
<p><a href="https://nlp100.github.io/data/popular-names.txt">popular-names.txt</a>は，アメリカで生まれた赤ちゃんの「名前」「性別」「人数」「年」をタブ区切り形式で格納したファイルである．以下の処理を行うプログラムを作成し，<a href="https://nlp100.github.io/data/popular-names.txt">popular-names.txt</a>を入力ファイルとして実行せよ．さらに，同様の処理を UNIX コマンドでも実行し，プログラムの実行結果を確認せよ．</p>
</blockquote>
<h2 id="環境">環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ sh --version
GNU bash, version 3.2.57<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>-release <span style="color:#f92672">(</span>x86_64-apple-darwin19<span style="color:#f92672">)</span>
Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2007</span> Free Software Foundation, Inc.
</code></pre></div><h3 id="popular-namestxt">popular-names.txt</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> popular-names.txt
Mary    F       <span style="color:#ae81ff">7065</span>    <span style="color:#ae81ff">1880</span>
Anna    F       <span style="color:#ae81ff">2604</span>    <span style="color:#ae81ff">1880</span>
Emma    F       <span style="color:#ae81ff">2003</span>    <span style="color:#ae81ff">1880</span>
Elizabeth       F       <span style="color:#ae81ff">1939</span>    <span style="color:#ae81ff">1880</span>
Minnie  F       <span style="color:#ae81ff">1746</span>    <span style="color:#ae81ff">1880</span>
</code></pre></div><h2 id="10-行数のカウント">10. 行数のカウント</h2>
<p>行数をカウントせよ．確認には wc コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ wc -l popular-names.txt
    <span style="color:#ae81ff">2780</span> popular-names.txt

$ more popular-names.txt | wc -l
    <span style="color:#ae81ff">2780</span>
</code></pre></div><h3 id="参考">参考</h3>
<p><a href="https://www.atmarkit.co.jp/ait/articles/1611/07/news026.html#sample3">【 wc 】コマンド――テキストファイルの文字数や行数を数える</a></p>
<h2 id="11-タブをスペースに置換">11. タブをスペースに置換</h2>
<p>タブ 1 文字につきスペース 1 文字に置換せよ．確認には sed コマンド，tr コマンド，もしくは expand コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sed -e <span style="color:#e6db74">&#39;s/[[:cntrl:]]/\ /g&#39;</span> popular-names.txt &gt; popular-names-11.txt

cat -t popular-names.txt | sed -e <span style="color:#e6db74">&#34;s/\^I/\ /g&#34;</span> &gt; popular-names-11.txt

tr <span style="color:#e6db74">&#34;\t&#34;</span> <span style="color:#e6db74">&#34;\ &#34;</span> &lt; popular-names.txt &gt; popular-names-11.txt

cat popular-names.txt | tr <span style="color:#e6db74">&#34;\t&#34;</span> <span style="color:#e6db74">&#34;\ &#34;</span> &gt; popular-names-11.txt

expand -t <span style="color:#ae81ff">1</span> popular-names.txt &gt; popular-names-11.txt
</code></pre></div><h3 id="popular-names-11txt">popular-names-11.txt</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> popular-names-11.txt
Mary F <span style="color:#ae81ff">7065</span> <span style="color:#ae81ff">1880</span>
Anna F <span style="color:#ae81ff">2604</span> <span style="color:#ae81ff">1880</span>
Emma F <span style="color:#ae81ff">2003</span> <span style="color:#ae81ff">1880</span>
Elizabeth F <span style="color:#ae81ff">1939</span> <span style="color:#ae81ff">1880</span>
Minnie F <span style="color:#ae81ff">1746</span> <span style="color:#ae81ff">1880</span>
</code></pre></div><h3 id="memo">memo</h3>
<ul>
<li>mac の sed でタブを置換できないのでつまづき</li>
<li>cat の&ndash;show-tabs オプションでタブを置換してからサイド置換が個人的には良さげ</li>
<li>gsed コマンドをインストールするのもいいと思われる</li>
</ul>
<h3 id="参考-1">参考</h3>
<p><a href="https://qiita.com/kohashi/items/73708dea71a3ac233b29">mac OSX で sed を使って tab の文字列を置換</a>
<a href="https://www.atmarkit.co.jp/ait/articles/1610/03/news017.html">【 tr 】コマンド――テキストファイルの文字を置換する／削除する</a>
<a href="https://eng-entrance.com/linux-command-expand">expand コマンドについて詳しくまとめました 【Linux コマンド集】</a></p>
<h2 id="12-1-列目を-col1txt-に2-列目を-col2txt-に保存-permalink">12. 1 列目を col1.txt に，2 列目を col2.txt に保存 Permalink</h2>
<p>各行の 1 列目だけを抜き出したものを col1.txt に，2 列目だけを抜き出したものを col2.txt としてファイルに保存せよ．確認には cut コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cut -f <span style="color:#ae81ff">1</span> popular-names.txt &gt; col1.txt
$ cut -f <span style="color:#ae81ff">2</span> popular-names.txt &gt; col2.txt
</code></pre></div><h3 id="col1txt-col2txt">col1.txt, col2.txt</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> col1.txt
Mary
Anna
Emma
Elizabeth
Minnie

$ head -n <span style="color:#ae81ff">5</span> col2.txt
F
F
F
F
F
</code></pre></div><h3 id="memo-1">memo</h3>
<p>とりあえず cut コマンドを動かしてみたらうまくいった</p>
<h3 id="参考-2">参考</h3>
<p><a href="https://qiita.com/pekepek/items/c28bc87171983d756e32">CSV ファイルの特定の列を取り出す</a></p>
<h2 id="13-col1txt-と-col2txt-をマージ">13. col1.txt と col2.txt をマージ</h2>
<p>12 で作った col1.txt と col2.txt を結合し，元のファイルの 1 列目と 2 列目をタブ区切りで並べたテキストファイルを作成せよ．確認には paste コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ paste col1.txt col2.txt &gt; cols.txt
</code></pre></div><h3 id="colstxt">cols.txt</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> cols.txt
Mary    F
Anna    F
Emma    F
Elizabeth       F
Minnie  F
</code></pre></div><h2 id="14-先頭から-n-行を出力">14. 先頭から N 行を出力</h2>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のうち先頭の N 行だけを表示せよ．確認には head コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># デバックで使っていたので割愛</span>
</code></pre></div><h2 id="15-末尾の-n-行を出力">15. 末尾の N 行を出力</h2>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のうち末尾の N 行だけを表示せよ．確認には tail コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ tail -n <span style="color:#ae81ff">5</span> popular-names.txt
Benjamin        M       <span style="color:#ae81ff">13381</span>   <span style="color:#ae81ff">2018</span>
Elijah  M       <span style="color:#ae81ff">12886</span>   <span style="color:#ae81ff">2018</span>
Lucas   M       <span style="color:#ae81ff">12585</span>   <span style="color:#ae81ff">2018</span>
Mason   M       <span style="color:#ae81ff">12435</span>   <span style="color:#ae81ff">2018</span>
Logan   M       <span style="color:#ae81ff">12352</span>   <span style="color:#ae81ff">2018</span>
</code></pre></div><h2 id="16-ファイルを-n-分割する">16. ファイルを N 分割する</h2>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のファイルを行単位で N 分割せよ．同様の処理を split コマンドで実現せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ split -l  <span style="color:#66d9ef">$(</span>expr <span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">`</span>cat popular-names.txt | wc -l<span style="color:#e6db74">`</span> / 3<span style="color:#66d9ef">)</span> + 1<span style="color:#66d9ef">)</span> popular-names.txt  popular-names-

$ read chunks <span style="color:#f92672">&amp;&amp;</span> split -l  <span style="color:#66d9ef">$(</span>expr <span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">`</span>cat popular-names.txt | wc -l<span style="color:#e6db74">`</span> / $chunks<span style="color:#66d9ef">)</span> + 1<span style="color:#66d9ef">)</span> popular-names.txt  popular-names-
</code></pre></div><h3 id="memo-2">memo</h3>
<ul>
<li>mac OSX の仕様?で split に n オプションがないのでむりくり実装</li>
<li><code>行数 % n == 0</code>のときの要素数が違ってくる</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ split -h
split: illegal option -- h
usage: split <span style="color:#f92672">[</span>-a sufflen<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-b byte_count<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-l line_count<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-p pattern<span style="color:#f92672">]</span>
             <span style="color:#f92672">[</span>file <span style="color:#f92672">[</span>prefix<span style="color:#f92672">]]</span>
</code></pre></div><h3 id="参考-3">参考</h3>
<p><a href="https://stackoverflow.com/questions/2016894/how-to-split-a-large-text-file-into-smaller-files-with-equal-number-of-lines">How to split a large text file into smaller files with equal number of lines?</a></p>
<h2 id="17-１列目の文字列の異なり">17. １列目の文字列の異なり</h2>
<p>1 列目の文字列の種類（異なる文字列の集合）を求めよ．確認には cut, sort, uniq コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cut -f <span style="color:#ae81ff">1</span> popular-names.txt | sort | uniq | head -n <span style="color:#ae81ff">5</span>
Abigail
Aiden
Alexander
Alexis
Alice
</code></pre></div><h2 id="18-各行を-3-コラム目の数値の降順にソート">18. 各行を 3 コラム目の数値の降順にソート</h2>
<p>各行を 3 コラム目の数値の逆順で整列せよ（注意: 各行の内容は変更せずに並び替えよ）．確認には sort コマンドを用いよ（この問題はコマンドで実行した時の結果と合わなくてもよい）．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat -t popular-names.txt | sed -e <span style="color:#e6db74">&#34;s/\^I/\ /g&#34;</span> | sort -r -n -t <span style="color:#e6db74">&#34; &#34;</span> -k <span style="color:#ae81ff">3</span> | head -n <span style="color:#ae81ff">5</span>
Linda F <span style="color:#ae81ff">99689</span> <span style="color:#ae81ff">1947</span>
Linda F <span style="color:#ae81ff">96211</span> <span style="color:#ae81ff">1948</span>
James M <span style="color:#ae81ff">94757</span> <span style="color:#ae81ff">1947</span>
Michael M <span style="color:#ae81ff">92704</span> <span style="color:#ae81ff">1957</span>
Robert M <span style="color:#ae81ff">91640</span> <span style="color:#ae81ff">1947</span>
</code></pre></div><h3 id="memo-3">memo</h3>
<ul>
<li><code>r</code> リバース</li>
<li><code>n</code> 数字順を明示</li>
<li><code>t</code> 区切り文字</li>
<li><code>k</code> 列番号</li>
</ul>
<h3 id="参考-4">参考</h3>
<p><a href="https://genzouw.com/entry/2019/04/24/083709">sort コマンドで CSV ファイルをソートする場合はソート列の指定方法に注意</a></p>
<h2 id="19-各行の-1-コラム目の文字列の出現頻度を求め出現頻度の高い順に並べる">19. 各行の 1 コラム目の文字列の出現頻度を求め，出現頻度の高い順に並べる</h2>
<p>各行の 1 列目の文字列の出現頻度を求め，その高い順に並べて表示せよ．確認には cut, uniq, sort コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cut -f <span style="color:#ae81ff">1</span> popular-names.txt | sort | uniq -c | sort -r | head -n <span style="color:#ae81ff">5</span>
 <span style="color:#ae81ff">118</span> James
 <span style="color:#ae81ff">111</span> William
 <span style="color:#ae81ff">108</span> Robert
 <span style="color:#ae81ff">108</span> John
  <span style="color:#ae81ff">92</span> Mary
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #02-python</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-02-py/</link>
            <pubDate>Wed, 22 Apr 2020 13:01:34 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-02-py/</guid>
            <description>言語処理 100 本ノック(第 2 章: UNIX コマンド) popular-names.txtは，アメリカで生まれた赤ちゃんの「名前」「性別」「人数」「年」をタ</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch02.html">言語処理 100 本ノック(第 2 章: UNIX コマンド)</a></p>
<blockquote>
<p><a href="https://nlp100.github.io/data/popular-names.txt">popular-names.txt</a>は，アメリカで生まれた赤ちゃんの「名前」「性別」「人数」「年」をタブ区切り形式で格納したファイルである．以下の処理を行うプログラムを作成し，<a href="https://nlp100.github.io/data/popular-names.txt">popular-names.txt</a>を入力ファイルとして実行せよ．さらに，同様の処理を UNIX コマンドでも実行し，プログラムの実行結果を確認せよ．</p>
</blockquote>
<h2 id="環境">環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ python3 -V
Python 3.6.8
</code></pre></div><h3 id="popular-namestxt">popular-names.txt</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ head -n <span style="color:#ae81ff">5</span> popular-names.txt
Mary    F       <span style="color:#ae81ff">7065</span>    <span style="color:#ae81ff">1880</span>
Anna    F       <span style="color:#ae81ff">2604</span>    <span style="color:#ae81ff">1880</span>
Emma    F       <span style="color:#ae81ff">2003</span>    <span style="color:#ae81ff">1880</span>
Elizabeth       F       <span style="color:#ae81ff">1939</span>    <span style="color:#ae81ff">1880</span>
Minnie  F       <span style="color:#ae81ff">1746</span>    <span style="color:#ae81ff">1880</span>
</code></pre></div><h2 id="10-行数のカウント">10. 行数のカウント</h2>
<p>行数をカウントせよ．確認には wc コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    <span style="color:#66d9ef">print</span>(len(f<span style="color:#f92672">.</span>readlines()))

<span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">2780</span>
</code></pre></div><h2 id="11-タブをスペースに置換">11. タブをスペースに置換</h2>
<p>タブ 1 文字につきスペース 1 文字に置換せよ．確認には sed コマンド，tr コマンド，もしくは expand コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    text <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()

replaced_text <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">&#34; &#34;</span>)
<span style="color:#66d9ef">print</span>(replaced_text)
</code></pre></div><h2 id="12-1-列目を-col1txt-に2-列目を-col2txt-に保存-permalink">12. 1 列目を col1.txt に，2 列目を col2.txt に保存 Permalink</h2>
<p>各行の 1 列目だけを抜き出したものを col1.txt に，2 列目だけを抜き出したものを col2.txt としてファイルに保存せよ．確認には cut コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

col1 <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>], lines))
col2 <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">1</span>], lines))

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;col1-py.txt&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(col1) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;col2-py.txt&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(col2) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h2 id="13-col1txt-と-col2txt-をマージ">13. col1.txt と col2.txt をマージ</h2>
<p>12 で作った col1.txt と col2.txt を結合し，元のファイルの 1 列目と 2 列目をタブ区切りで並べたテキストファイルを作成せよ．確認には paste コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;col1-py.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    col1 <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;col2-py.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    col2 <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

lines <span style="color:#f92672">=</span> [f<span style="color:#e6db74">&#34;{x}</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">{y}&#34;</span> <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(col1, col2)]
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;cols-py.txt&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(lines))
</code></pre></div><h2 id="14-先頭から-n-行を出力">14. 先頭から N 行を出力</h2>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のうち先頭の N 行だけを表示せよ．確認には head コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">N <span style="color:#f92672">=</span> int(input())
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>lines[:N], sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><h2 id="15-末尾の-n-行を出力">15. 末尾の N 行を出力</h2>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のうち末尾の N 行だけを表示せよ．確認には tail コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">N <span style="color:#f92672">=</span> int(input())
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>lines[<span style="color:#f92672">-</span>N:], sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><h2 id="16-ファイルを-n-分割する">16. ファイルを N 分割する</h2>
<p>自然数 N をコマンドライン引数などの手段で受け取り，入力のファイルを行単位で N 分割せよ．同様の処理を split コマンドで実現せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#f92672">as</span> np

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

N <span style="color:#f92672">=</span> int(input())
idx <span style="color:#f92672">=</span> list(map(int, np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, len(lines), N <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)))
files <span style="color:#f92672">=</span> [lines[idx[i]:idx[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(N)]
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>files, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h3 id="memo">memo</h3>
<ul>
<li>bash の方とは違う実装をしている</li>
<li>小数点の扱いがざる</li>
</ul>
<h2 id="17-１列目の文字列の異なり">17. １列目の文字列の異なり</h2>
<p>1 列目の文字列の種類（異なる文字列の集合）を求めよ．確認には cut, sort, uniq コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

uniq_names <span style="color:#f92672">=</span> set([line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines])
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>sorted(uniq_names), sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h2 id="18-各行を-3-コラム目の数値の降順にソート">18. 各行を 3 コラム目の数値の降順にソート</h2>
<p>各行を 3 コラム目の数値の逆順で整列せよ（注意: 各行の内容は変更せずに並び替えよ）．確認には sort コマンドを用いよ（この問題はコマンドで実行した時の結果と合わなくてもよい）．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

sorted_lines <span style="color:#f92672">=</span> sorted(lines, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: int(x<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">2</span>]), reverse<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>sorted_lines, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><h2 id="19-各行の-1-コラム目の文字列の出現頻度を求め出現頻度の高い順に並べる">19. 各行の 1 コラム目の文字列の出現頻度を求め，出現頻度の高い順に並べる</h2>
<p>各行の 1 列目の文字列の出現頻度を求め，その高い順に並べて表示せよ．確認には cut, uniq, sort コマンドを用いよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;popular-names.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()

col1_count <span style="color:#f92672">=</span> dict()
<span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> lines:
    c <span style="color:#f92672">=</span> l<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">0</span>]
    <span style="color:#66d9ef">if</span> col1_count<span style="color:#f92672">.</span>get(c):
        col1_count[c]<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">else</span>:
        col1_count[c] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
sorted_col1 <span style="color:#f92672">=</span> sorted(col1_count<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>], reverse<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(<span style="color:#f92672">*</span>sorted_col1, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><h3 id="memo-1">memo</h3>

    <img src="https://i.imgur.com/2PTQM3P.png"  alt="blog top page"  class="center"  />


]]></content>
        </item>
        
        <item>
            <title>最近よく書くシェルスクリプトの備忘録</title>
            <link>https://tomowarkar.github.io/blog/posts/mac_bash/</link>
            <pubDate>Tue, 21 Apr 2020 19:16:51 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/mac_bash/</guid>
            <description>実行環境 $ sw_vers ProductName: Mac OS X ProductVersion: 10.15.4 BuildVersion: 19E266 $ sh --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin19) Copyright (C) 2007 Free Software Foundation, Inc. Linux コマンド ファイルの中身を表示する # 一番有名? 間違えてバイナリファイルなどを指定す</description>
            <content type="html"><![CDATA[<h2 id="実行環境">実行環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.15.4
BuildVersion:   19E266

$ sh --version
GNU bash, version 3.2.57<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>-release <span style="color:#f92672">(</span>x86_64-apple-darwin19<span style="color:#f92672">)</span>
Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2007</span> Free Software Foundation, Inc.
</code></pre></div><h2 id="linux-コマンド">Linux コマンド</h2>
<h3 id="ファイルの中身を表示する">ファイルの中身を表示する</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 一番有名? 間違えてバイナリファイルなどを指定すると悲惨</span>
cat /path/to/file
<span style="color:#75715e"># ファイルの一部を表示, スクロールして中身を見ることができる。</span>
less /path/to/file
<span style="color:#75715e"># less の出力結果を残す版</span>
more /path/to/file
</code></pre></div><h3 id="ヒアドキュメント">ヒアドキュメント</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat <span style="color:#e6db74">&lt;&lt;EOL &gt;/path/to/file
</span><span style="color:#e6db74">hoge
</span><span style="color:#e6db74">huga
</span><span style="color:#e6db74">EOL</span>
</code></pre></div><p>参考 <a href="https://qiita.com/take4s5i/items/e207cee4fb04385a9952">bashのヒアドキュメントを活用する</a></p>
<h3 id="dateコマンド">dateコマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ date -R
Tue, <span style="color:#ae81ff">21</span> Apr <span style="color:#ae81ff">2020</span> 18:50:48 +0900

$ date +%y%m%d
<span style="color:#ae81ff">200421</span>
<span style="color:#75715e"># 昨日の日付</span>
$ date -v -1d +%y%m%d
<span style="color:#ae81ff">200420</span>
</code></pre></div><h3 id="sayコマンド">sayコマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ say -v ? | grep <span style="color:#e6db74">&#34;ja_JP&#34;</span>
Kyoko               ja_JP    <span style="color:#75715e"># こんにちは、私の名前はKyokoです。日本語の音声をお届けします。</span>
Otoya               ja_JP    <span style="color:#75715e"># こんにちは、私の名前はOtoyaです。日本語の音声をお届けします。</span>

$ say -v Bad<span style="color:#ae81ff">\ </span>News Kgo mo ichi ni chi gamba lu zowi Kgo mo ichi ni chi gamba lu zowi
</code></pre></div><p>参考 <a href="https://gist.github.com/susisu/c9b106745f94c85e482c">非実用 say コマンド</a></p>
<h3 id="afplay-コマンド">afplay コマンド</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># バックグラウンド再生</span>
$ afplay -q <span style="color:#ae81ff">1</span> /path/to/audio/file &amp;
<span style="color:#75715e"># 中断</span>
$ killall afplay
</code></pre></div><h2 id="シェルスクリプト">シェルスクリプト</h2>
<h3 id="シェルスクリプトの説明文">シェルスクリプトの説明文</h3>
<h5 id="hogesh">hoge.sh</h5>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># @(#) This script is hoge.</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ what hoge.sh 
hoge.sh
         This script is hoge.
</code></pre></div><h3 id="ファイルの初期化">ファイルの初期化</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># touch だと作成済みのファイルは初期化されない</span>
touch /path/to/file

<span style="color:#75715e"># これでもいいけど</span>
echo -n <span style="color:#e6db74">&#34;&#34;</span> &gt; /path/to/file

<span style="color:#75715e"># こっちのがスマート</span>
:&gt; /path/to/file
</code></pre></div><h3 id="演算子">演算子</h3>
<p>コマンドが成功した時と失敗した時とでの場合わけ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ true <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> echo <span style="color:#ae81ff">2</span>
&gt;&gt; <span style="color:#ae81ff">1</span>
$ false <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> echo <span style="color:#ae81ff">2</span>
&gt;&gt; <span style="color:#ae81ff">2</span>
</code></pre></div><h3 id="拡張子を取り除きたい">拡張子を取り除きたい</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ f<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hoge.md&#34;</span>
$ echo <span style="color:#e6db74">${</span>f%.*<span style="color:#e6db74">}</span>
&gt;&gt; hoge
</code></pre></div><p>参考 <a href="https://qiita.com/mriho/items/b30b3a33e8d2e25e94a8">bashの変数展開によるファイル名や拡張子の取得</a></p>
<h3 id="引数をループ">引数をループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> arg; <span style="color:#66d9ef">do</span>
    echo $arg
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="無限ループ">無限ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">while</span> true; <span style="color:#66d9ef">do</span>
    :
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="for-ループ">for ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> i in aa bb cc; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>

<span style="color:#66d9ef">for</span> i in <span style="color:#66d9ef">$(</span>seq 10<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>

<span style="color:#66d9ef">for</span> <span style="color:#f92672">((</span>i <span style="color:#f92672">=</span> 1; i &lt; 11; i++<span style="color:#f92672">))</span>; <span style="color:#66d9ef">do</span>
    echo $i
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="ls-ループ">ls ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> f in *; <span style="color:#66d9ef">do</span>
    echo $f
<span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="ファイル内ループ">ファイル内ループ</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">while</span> read line; <span style="color:#66d9ef">do</span>
　　echo $line
<span style="color:#66d9ef">done</span> &lt; /path/to/file
</code></pre></div><h2 id="引数解析">引数解析</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">COMMAND<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>basename $0<span style="color:#e6db74">`</span>
<span style="color:#66d9ef">while</span> getopts ab: OPT
<span style="color:#66d9ef">do</span>
  <span style="color:#66d9ef">case</span> $OPT in
    a <span style="color:#f92672">)</span> OPTION_a<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TRUE&#34;</span> ;;
    b <span style="color:#f92672">)</span> OPTION_b<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TRUE&#34;</span> ; VALUE_b<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$OPTARG<span style="color:#e6db74">&#34;</span> ;;
    * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Usage: &#34;</span> ; exit <span style="color:#ae81ff">1</span> ;;
  <span style="color:#66d9ef">esac</span>
<span style="color:#66d9ef">done</span>

shift <span style="color:#66d9ef">$((</span>$OPTIND <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">))</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$OPTION_b<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TRUE&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    :
<span style="color:#66d9ef">fi</span>
</code></pre></div><h3 id="途中終了時実行コマンド">途中終了時実行コマンド</h3>
<p>Ctl+c でスクリプト実行が途中終了した時のコマンドを指定できる</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">trap <span style="color:#e6db74">&#34;echo \&#34;\n途中終了!!\&#34;&#34;</span> <span style="color:#ae81ff">0</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>今さら言語処理100本ノック #01</title>
            <link>https://tomowarkar.github.io/blog/posts/nlp100-01/</link>
            <pubDate>Mon, 13 Apr 2020 09:56:10 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nlp100-01/</guid>
            <description>言語処理 100 本ノック(第 1 章: 準備運動) 環境 Python 3.6.8 00. 文字列の逆順 Permalink 文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を</description>
            <content type="html"><![CDATA[<p><a href="https://nlp100.github.io/ja/ch01.html">言語処理 100 本ノック(第 1 章: 準備運動)</a></p>
<h2 id="環境">環境</h2>
<p>Python 3.6.8</p>
<h2 id="00-文字列の逆順-permalink">00. 文字列の逆順 Permalink</h2>
<p>文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;stressed&#34;</span>[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
<span style="color:#e6db74">&#39;desserts&#39;</span>
</code></pre></div><h2 id="01-パタトクカシーーpermalink">01. 「パタトクカシーー」Permalink</h2>
<p>「パタトクカシーー」という文字列の 1,3,5,7 文字目を取り出して連結した文字列を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;パタトクカシーー&#34;</span>[<span style="color:#ae81ff">1</span>::<span style="color:#ae81ff">2</span>]
<span style="color:#e6db74">&#39;タクシー&#39;</span>
</code></pre></div><h2 id="02-パトカータクシーパタトクカシーー">02. 「パトカー」＋「タクシー」＝「パタトクカシーー」</h2>
<p>「パトカー」＋「タクシー」の文字を先頭から交互に連結して文字列「パタトクカシーー」を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([i <span style="color:#f92672">+</span> j <span style="color:#66d9ef">for</span> i, j <span style="color:#f92672">in</span> zip(<span style="color:#e6db74">&#34;パトカー&#34;</span>, <span style="color:#e6db74">&#34;タクシー&#34;</span>)])
<span style="color:#e6db74">&#39;パタトクカシーー&#39;</span>
</code></pre></div><h2 id="03-円周率">03. 円周率</h2>
<p>“Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.”という文を単語に分解し，各単語の（アルファベットの）文字数を先頭から出現順に並べたリストを作成せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> list(map(<span style="color:#66d9ef">lambda</span> x: len(x), re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s)))
[<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>]
</code></pre></div><h2 id="04-元素記号-permalink">04. 元素記号 Permalink</h2>
<p>“Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.”という文を単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19 番目の単語は先頭の 1 文字，それ以外の単語は先頭に 2 文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列（辞書型もしくはマップ型）を作成せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> p <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">19</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> {word[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> p <span style="color:#66d9ef">else</span> word[:<span style="color:#ae81ff">2</span>] :i <span style="color:#66d9ef">for</span> i, word <span style="color:#f92672">in</span> enumerate(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), start<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)}
{<span style="color:#e6db74">&#39;H&#39;</span>: <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;He&#39;</span>: <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;Li&#39;</span>: <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;Be&#39;</span>: <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#39;B&#39;</span>: <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#39;C&#39;</span>: <span style="color:#ae81ff">6</span>, <span style="color:#e6db74">&#39;N&#39;</span>: <span style="color:#ae81ff">7</span>, <span style="color:#e6db74">&#39;O&#39;</span>: <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#39;F&#39;</span>: <span style="color:#ae81ff">9</span>, <span style="color:#e6db74">&#39;Ne&#39;</span>: <span style="color:#ae81ff">10</span>, <span style="color:#e6db74">&#39;Na&#39;</span>: <span style="color:#ae81ff">11</span>, <span style="color:#e6db74">&#39;Mi&#39;</span>: <span style="color:#ae81ff">12</span>, <span style="color:#e6db74">&#39;Al&#39;</span>: <span style="color:#ae81ff">13</span>, <span style="color:#e6db74">&#39;Si&#39;</span>: <span style="color:#ae81ff">14</span>, <span style="color:#e6db74">&#39;P&#39;</span>: <span style="color:#ae81ff">15</span>, <span style="color:#e6db74">&#39;S&#39;</span>: <span style="color:#ae81ff">16</span>, <span style="color:#e6db74">&#39;Cl&#39;</span>: <span style="color:#ae81ff">17</span>, <span style="color:#e6db74">&#39;Ar&#39;</span>: <span style="color:#ae81ff">18</span>, <span style="color:#e6db74">&#39;K&#39;</span>: <span style="color:#ae81ff">19</span>, <span style="color:#e6db74">&#39;Ca&#39;</span>: <span style="color:#ae81ff">20</span>}
</code></pre></div><h2 id="05-n-grampermalink">05. n-gramPermalink</h2>
<p>与えられたシーケンス（文字列やリストなど）から n-gram を作る関数を作成せよ．この関数を用い，”I am an NLPer”という文から単語 bi-gram，文字 bi-gram を得よ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I am an NLPer&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y: [ <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(x[i:i<span style="color:#f92672">+</span>y]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(x) <span style="color:#f92672">-</span> y <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) ]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">1</span>)
[<span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;n&#39;</span>, <span style="color:#e6db74">&#39;N&#39;</span>, <span style="color:#e6db74">&#39;L&#39;</span>, <span style="color:#e6db74">&#39;P&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">2</span>)
[<span style="color:#e6db74">&#39;Ia&#39;</span>, <span style="color:#e6db74">&#39;am&#39;</span>, <span style="color:#e6db74">&#39;ma&#39;</span>, <span style="color:#e6db74">&#39;an&#39;</span>, <span style="color:#e6db74">&#39;nN&#39;</span>, <span style="color:#e6db74">&#39;NL&#39;</span>, <span style="color:#e6db74">&#39;LP&#39;</span>, <span style="color:#e6db74">&#39;Pe&#39;</span>, <span style="color:#e6db74">&#39;er&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]&#34;</span>, s), <span style="color:#ae81ff">3</span>)
[<span style="color:#e6db74">&#39;Iam&#39;</span>, <span style="color:#e6db74">&#39;ama&#39;</span>, <span style="color:#e6db74">&#39;man&#39;</span>, <span style="color:#e6db74">&#39;anN&#39;</span>, <span style="color:#e6db74">&#39;nNL&#39;</span>, <span style="color:#e6db74">&#39;NLP&#39;</span>, <span style="color:#e6db74">&#39;LPe&#39;</span>, <span style="color:#e6db74">&#39;Per&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">1</span>)
[<span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#e6db74">&#39;am&#39;</span>, <span style="color:#e6db74">&#39;an&#39;</span>, <span style="color:#e6db74">&#39;NLPer&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">2</span>)
[<span style="color:#e6db74">&#39;Iam&#39;</span>, <span style="color:#e6db74">&#39;aman&#39;</span>, <span style="color:#e6db74">&#39;anNLPer&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> n_gram(re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;[a-zA-Z]+&#34;</span>, s), <span style="color:#ae81ff">3</span>)
[<span style="color:#e6db74">&#39;Iaman&#39;</span>, <span style="color:#e6db74">&#39;amanNLPer&#39;</span>]
</code></pre></div><h2 id="06-集合-permalink">06. 集合 Permalink</h2>
<p>“paraparaparadise”と”paragraph”に含まれる文字 bi-gram の集合を，それぞれ, X と Y として求め，X と Y の和集合，積集合，差集合を求めよ．さらに，’se’という bi-gram が X および Y に含まれるかどうかを調べよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> bi_gram <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: [ x[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(x) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)]
<span style="color:#f92672">&gt;&gt;&gt;</span> X <span style="color:#f92672">=</span> bi_gram(<span style="color:#e6db74">&#34;paraparaparadise&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> Y <span style="color:#f92672">=</span> bi_gram(<span style="color:#e6db74">&#34;paragraph&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> X
[<span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;se&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> Y
[<span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ag&#39;</span>, <span style="color:#e6db74">&#39;gr&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;ph&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">|</span> set(Y)
{<span style="color:#e6db74">&#39;se&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ag&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;ph&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>, <span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;gr&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">&amp;</span> set(Y)
{<span style="color:#e6db74">&#39;ar&#39;</span>, <span style="color:#e6db74">&#39;pa&#39;</span>, <span style="color:#e6db74">&#39;ra&#39;</span>, <span style="color:#e6db74">&#39;ap&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> set(X) <span style="color:#f92672">-</span> set(Y)
{<span style="color:#e6db74">&#39;se&#39;</span>, <span style="color:#e6db74">&#39;ad&#39;</span>, <span style="color:#e6db74">&#39;is&#39;</span>, <span style="color:#e6db74">&#39;di&#39;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;se&#34;</span> <span style="color:#f92672">in</span> X
True
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;se&#34;</span> <span style="color:#f92672">in</span> Y
False
</code></pre></div><h2 id="07-テンプレートによる文生成">07. テンプレートによる文生成</h2>
<p>引数 x, y, z を受け取り「x 時の y は z」という文字列を返す関数を実装せよ．さらに，x=12, y=”気温”, z=22.4 として，実行結果を確認せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x, y, z: <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{x} 時の {y} は {z}&#34;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> f(x<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;気温&#34;</span>, z<span style="color:#f92672">=</span><span style="color:#ae81ff">22.4</span>)
<span style="color:#ae81ff">12</span> <span style="color:#960050;background-color:#1e0010">時の</span> <span style="color:#960050;background-color:#1e0010">気温</span> <span style="color:#960050;background-color:#1e0010">は</span> <span style="color:#ae81ff">22.4</span>
</code></pre></div><h2 id="08-暗号文">08. 暗号文</h2>
<p>与えられた文字列の各文字を，以下の仕様で変換する関数 cipher を実装せよ．</p>
<ul>
<li>英小文字ならば(219 - 文字コード)の文字に置換</li>
<li>その他の文字はそのまま出力</li>
</ul>
<p>この関数を用い，英語のメッセージを暗号化・復号化せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(<span style="color:#ae81ff">219</span><span style="color:#f92672">-</span>ord(e)) <span style="color:#66d9ef">if</span> re<span style="color:#f92672">.</span>match(<span style="color:#e6db74">&#34;[a-z]&#34;</span>, e) <span style="color:#66d9ef">else</span> e <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x])
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(<span style="color:#e6db74">&#34;abcde01Aaz&#34;</span>)
<span style="color:#e6db74">&#39;zyxwv01Aza&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(i) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">97</span><span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>)])
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(s)
<span style="color:#e6db74">&#39;zyxwvutsrqponmlkjihgfedcba&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(cipher(s))
<span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(i) <span style="color:#66d9ef">if</span> i<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> chr(i)<span style="color:#f92672">.</span>upper() <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">97</span><span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>)])
<span style="color:#f92672">&gt;&gt;&gt;</span> s
<span style="color:#e6db74">&#39;abCdeFghIjkLmnOpqRstUvwXyz&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> cipher(s)
<span style="color:#e6db74">&#39;zyCwvFtsIqpLnmOkjRhgUedXba&#39;</span>
</code></pre></div><h3 id="memo">memo</h3>
<p>英小文字の文字コード範囲は 79-122</p>
<p>219 - 文字コードの範囲は 122-79</p>
<p>つまり丁度 反転の形をとり cipher によって a-z が z-a に対応するよう暗号化されることがわかる。</p>
<p>また同じく cipher を 1 度かけると暗号化, 2 度かけると複合化されることがわかる.</p>
<h3 id="参考">参考</h3>
<p><a href="https://docs.python.org/ja/3/library/functions.html#ord">Python 組み込み関数</a></p>
<p><a href="https://note.nkmk.me/python-chr-ord-unicode-code-point/">Python で Unicode コードポイントと文字を相互変換（chr, ord, \x, \u, \U）</a></p>
<h2 id="09-typoglycemia">09. Typoglycemia</h2>
<p>スペースで区切られた単語列に対して，各単語の先頭と末尾の文字は残し，それ以外の文字の順序をランダムに並び替えるプログラムを作成せよ．ただし，長さが４以下の単語は並び替えないこととする．適当な英語の文（例えば”I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .”）を与え，その実行結果を確認せよ．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> sample
<span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([e <span style="color:#66d9ef">if</span> len(e) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">else</span> e[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([e[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> sample(range(<span style="color:#ae81ff">1</span>, len(e)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>), len(e)<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>)]) <span style="color:#f92672">+</span> e[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>split()])
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I codln’ut bivleee that I cloud aaltculy usaertdnnd what I was randeig : the pnnmeoahel peowr of the hmuan mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I cl’duont belevie that I colud actaully udtsnaenrd what I was rieadng : the pmnehoeanl pewor of the huamn mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f(s)
<span style="color:#e6db74">&#39;I coludn’t beevlie that I culod acltualy udestnnrad what I was rdeaing : the pnmoneehal power of the hmaun mind .&#39;</span>
</code></pre></div><p>こちらでもいけた</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> f2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join([e <span style="color:#66d9ef">if</span> len(e) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">else</span> e[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(sample(e[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], len(e[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))) <span style="color:#f92672">+</span> e[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>split()])
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I cnudlo’t belivee that I colud aaulclty utnansredd what I was rediang : the pahemnneol peowr of the hamun mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I culn’odt belivee that I culod acalulty uraetndnsd what I was reaindg : the pennoeamhl peowr of the haumn mind .&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> f2(s)
<span style="color:#e6db74">&#39;I codlnu’t beevile that I cloud atluclay unrntsaedd what I was rneidag : the paeehnomnl peowr of the hmaun mind .&#39;</span>
</code></pre></div><h3 id="参考-1">参考</h3>
<p><a href="https://note.nkmk.me/python-random-shuffle/#_1">文字列やタプルのシャッフル</a></p>
<h2 id="おわりに">おわりに</h2>
<p><a href="https://github.com/yoyoyo-yo/Gasyori100knock">画像処理 100 本ノック!!</a>もあるようなので言語処理 100 本ノック が終わり次第やりたい。</p>
<p>(まずは言語処理 100 本ノック )</p>
]]></content>
        </item>
        
        <item>
            <title>[macOS] コマンドラインで音楽を流したい</title>
            <link>https://tomowarkar.github.io/blog/posts/afplay/</link>
            <pubDate>Sun, 12 Apr 2020 23:33:30 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/afplay/</guid>
            <description>環境 $ bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin19) Copyright (C) 2007 Free Software Foundation, Inc. $ afplay -h Audio File Play Version: 2.0 Copyright 2003-2013, Apple Inc. All Rights Reserved. Specify -h (-help) for command options Usage: afplay [option...] audio_file Options: (may appear before or after arguments) {-v | --volume} VOLUME set the volume for playback of the file {-h | --help} print help { --leaks} run leaks</description>
            <content type="html"><![CDATA[<h2 id="環境">環境</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ bash --version
GNU bash, version 3.2.57<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>-release <span style="color:#f92672">(</span>x86_64-apple-darwin19<span style="color:#f92672">)</span>
Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2007</span> Free Software Foundation, Inc.
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay -h

    Audio File Play
    Version: 2.0
    Copyright 2003-2013, Apple Inc. All Rights Reserved.
    Specify -h <span style="color:#f92672">(</span>-help<span style="color:#f92672">)</span> <span style="color:#66d9ef">for</span> command options

Usage:
afplay <span style="color:#f92672">[</span>option...<span style="color:#f92672">]</span> audio_file

Options: <span style="color:#f92672">(</span>may appear before or after arguments<span style="color:#f92672">)</span>
  <span style="color:#f92672">{</span>-v | --volume<span style="color:#f92672">}</span> VOLUME
    set the volume <span style="color:#66d9ef">for</span> playback of the file
  <span style="color:#f92672">{</span>-h | --help<span style="color:#f92672">}</span>
    print help
  <span style="color:#f92672">{</span> --leaks<span style="color:#f92672">}</span>
    run leaks analysis
  <span style="color:#f92672">{</span>-t | --time<span style="color:#f92672">}</span> TIME
    play <span style="color:#66d9ef">for</span> TIME seconds
  <span style="color:#f92672">{</span>-r | --rate<span style="color:#f92672">}</span> RATE
    play at playback rate
  <span style="color:#f92672">{</span>-q | --rQuality<span style="color:#f92672">}</span> QUALITY
    set the quality used <span style="color:#66d9ef">for</span> rate-scaled playback <span style="color:#f92672">(</span>default is <span style="color:#ae81ff">0</span> - low quality, <span style="color:#ae81ff">1</span> - high quality<span style="color:#f92672">)</span>
  <span style="color:#f92672">{</span>-d | --debug<span style="color:#f92672">}</span>
    debug print output
</code></pre></div><h3 id="再生">再生</h3>
<p>quality はデフォルト値が low である 0 なので 1 に変更</p>
<p>音量は適宜</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay -q <span style="color:#ae81ff">1</span> -v .1 path/to/audio_file
</code></pre></div><h3 id="バックグラウンド実行-プロセスの確認-プロセス-kill">バックグラウンド実行, プロセスの確認, プロセス kill</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ afplay path/to/audio_file &amp;
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span> PID
$ jobs
<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>+  Running afplay path/to/audio_file &amp;
$ <span style="color:#75715e"># kill %ジョブ番号</span>
$ kill %1
$ <span style="color:#75715e"># もしくは</span>
$ kill PID
</code></pre></div><p>見つからない場合や、他のターミナルから kill</p>
<pre><code>ps aux | grep afplay | grep -v grep | awk '{ print &quot;kill -9&quot;, $2 }' | sh
</code></pre><h2 id="参考">参考</h2>
<ul>
<li><a href="https://zariganitosh.hatenablog.jp/entry/20100908/itunes">徹底的にソフトウェアで豊かな音を奏でてみよう</a></li>
<li><a href="https://qiita.com/inosy22/items/341cfc589494b8211844">Linux コマンド(Bash)でバックグラウンド実行する方法のまとめメモ</a></li>
<li><a href="https://qiita.com/nyango/items/7b6b719f248b2ee8d379">シェルスクリプトで単純に並列実行・直列実行を行う</a></li>
<li><a href="https://qiita.com/masarufuruya/items/409679c1006980ef1b60">プロセス名で grep した結果を kill するシェルスクリプトを作る</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>VSCodeのインストール済み拡張機能とその用途</title>
            <link>https://tomowarkar.github.io/blog/posts/vscode_list_extensions/</link>
            <pubDate>Fri, 10 Apr 2020 15:16:15 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/vscode_list_extensions/</guid>
            <description>個人的メモ 定期的に確認すると良さげですね VSCode プラグイン一覧の表示 code --list-extensions | xargs -L 1 echo code --install-extension 2020/04/10 現在 code --install-extension bbenoist.shell code --install-extension christian-kohler.npm-intellisense code --install-extension christian-kohler.path-intellisense code --install-extension dariofuzinato.vue-peek code --install-extension dbaeumer.vscode-eslint code --install-extension donjayamanne.jupyter code --install-extension eg2.vscode-npm-script code --install-extension esbenp.prettier-vscode code --install-extension formulahendry.auto-close-tag</description>
            <content type="html"><![CDATA[<p>個人的メモ</p>
<p>定期的に確認すると良さげですね</p>
<h2 id="vscode-プラグイン一覧の表示">VSCode プラグイン一覧の表示</h2>
<pre><code>code --list-extensions | xargs -L 1 echo code --install-extension
</code></pre><h1 id="20200410-現在">2020/04/10 現在</h1>
<pre><code>code --install-extension bbenoist.shell
code --install-extension christian-kohler.npm-intellisense
code --install-extension christian-kohler.path-intellisense
code --install-extension dariofuzinato.vue-peek
code --install-extension dbaeumer.vscode-eslint
code --install-extension donjayamanne.jupyter
code --install-extension eg2.vscode-npm-script
code --install-extension esbenp.prettier-vscode
code --install-extension formulahendry.auto-close-tag
code --install-extension formulahendry.auto-complete-tag
code --install-extension formulahendry.auto-rename-tag
code --install-extension formulahendry.code-runner
code --install-extension jcbuisson.vue
code --install-extension KnisterPeter.vscode-github
code --install-extension ms-azuretools.vscode-docker
code --install-extension MS-CEINTL.vscode-language-pack-ja
code --install-extension ms-mssql.mssql
code --install-extension ms-python.python
code --install-extension ms-vscode.cpptools
code --install-extension ms-vscode.Go
code --install-extension ms-vscode.vscode-typescript-tslint-plugin
code --install-extension mubaidr.vuejs-extension-pack
code --install-extension octref.vetur
code --install-extension robertoachar.vscode-essentials-snippets
code --install-extension tht13.python
code --install-extension tombonnike.vscode-status-bar-format-toggle
code --install-extension tomoki1207.pdf
code --install-extension VisualStudioExptTeam.vscodeintellicode
code --install-extension xabikos.JavaScriptSnippets
code --install-extension xaver.clang-format
code --install-extension yzhang.markdown-all-in-one
</code></pre><h2 id="用途">用途</h2>
<h3 id="bbenoistshellhttpsmarketplacevisualstudiocomitemsitemnamebbenoistshell"><a href="https://marketplace.visualstudio.com/items?itemName=bbenoist.shell">bbenoist.shell</a></h3>
<ul>
<li>エディタから直接 shell コマンドを実行できる</li>
<li>ほぼ使っていない</li>
</ul>
<h3 id="christian-kohlerpath-intellisensehttpsmarketplacevisualstudiocomitemsitemnamechristian-kohlerpath-intellisense"><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">christian-kohler.path-intellisense</a></h3>
<ul>
<li>ファイル名を自動補完</li>
<li>賢くて良き</li>
</ul>
<h3 id="dbaeumervscode-eslinthttpsmarketplacevisualstudiocomitemsitemnamedbaeumervscode-eslint"><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">dbaeumer.vscode-eslint</a></h3>
<ul>
<li>コードフォーマッター</li>
<li>よくわからん</li>
</ul>
<h3 id="esbenpprettier-vscodehttpsmarketplacevisualstudiocomitemsitemnameesbenpprettier-vscode"><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">esbenp.prettier-vscode</a></h3>
<ul>
<li>コードフォーマッター</li>
<li><a href="https://qiita.com/soarflat/items/06377f3b96964964a65d">Prettier 入門 ～ ESLint との違いを理解して併用する～</a></li>
</ul>
<h3 id="eg2vscode-npm-scripthttpsmarketplacevisualstudiocomitemsitemnameeg2vscode-npm-script"><a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script">eg2.vscode-npm-script</a></h3>
<ul>
<li>npm の hogehoge</li>
<li>よくわからん</li>
</ul>
<h3 id="christian-kohlernpm-intellisensehttpsmarketplacevisualstudiocomitemsitemnamechristian-kohlernpm-intellisense"><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">christian-kohler.npm-intellisense</a></h3>
<ul>
<li>npm モジュールを自動補完</li>
</ul>
<h3 id="dariofuzinatovue-peekhttpsmarketplacevisualstudiocomitemsitemnamedariofuzinatovue-peek"><a href="https://marketplace.visualstudio.com/items?itemName=dariofuzinato.vue-peek">dariofuzinato.vue-peek</a></h3>
<ul>
<li>vue の hogehoge</li>
<li>vue をあまり書いてないからよくわからん</li>
</ul>
<h3 id="jcbuissonvuehttpsmarketplacevisualstudiocomitemsitemnamejcbuissonvue"><a href="https://marketplace.visualstudio.com/items?itemName=jcbuisson.vue">jcbuisson.vue</a></h3>
<ul>
<li>vue の Syntax Highlight</li>
<li>まあいるよね</li>
</ul>
<h3 id="mubaidrvuejs-extension-packhttpsmarketplacevisualstudiocomitemsitemnamemubaidrvuejs-extension-pack"><a href="https://marketplace.visualstudio.com/items?itemName=mubaidr.vuejs-extension-pack">mubaidr.vuejs-extension-pack</a></h3>
<ul>
<li>vue 関連</li>
</ul>
<h3 id="octrefveturhttpsmarketplacevisualstudiocomitemsitemnameoctrefvetur"><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">octref.vetur</a></h3>
<ul>
<li>同上</li>
</ul>
<h3 id="formulahendryauto-complete-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-complete-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-complete-tag">formulahendry.auto-complete-tag</a></h3>
<ul>
<li>以下二つのまとめ役</li>
</ul>
<h3 id="formulahendryauto-close-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-close-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">formulahendry.auto-close-tag</a></h3>
<ul>
<li>html などの close tag 自動補完</li>
<li>必須</li>
</ul>
<h3 id="formulahendryauto-rename-taghttpsmarketplacevisualstudiocomitemsitemnameformulahendryauto-rename-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">formulahendry.auto-rename-tag</a></h3>
<ul>
<li>便利</li>
<li>時々うざい</li>
</ul>
<h3 id="formulahendrycode-runnerhttpsmarketplacevisualstudiocomitemsitemnameformulahendrycode-runner"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">formulahendry.code-runner</a></h3>
<ul>
<li>VScode 上でのショートカット操作で外部の shell script を実行できる</li>
<li>入れたてホヤホヤ未使用様</li>
</ul>
<h3 id="knisterpetervscode-githubhttpsmarketplacevisualstudiocomitemsitemnameknisterpetervscode-github"><a href="https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-github">KnisterPeter.vscode-github</a></h3>
<ul>
<li>github 関連</li>
<li>どこからどこまで何をしているのかわからない</li>
</ul>
<h3 id="ms-azuretoolsvscode-dockerhttpsmarketplacevisualstudiocomitemsitemnamems-azuretoolsvscode-docker"><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker">ms-azuretools.vscode-docker</a></h3>
<ul>
<li>docker for vscode</li>
<li>あまり docker 触ってないなぁ</li>
</ul>
<h3 id="ms-ceintlvscode-language-pack-jahttpsmarketplacevisualstudiocomitemsitemnamems-ceintlvscode-language-pack-ja"><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ja">MS-CEINTL.vscode-language-pack-ja</a></h3>
<ul>
<li>VSCode の日本語対応</li>
<li>必須</li>
</ul>
<h3 id="ms-mssqlmssqlhttpsmarketplacevisualstudiocomitemsitemnamems-mssqlmssql"><a href="https://marketplace.visualstudio.com/items?itemName=ms-mssql.mssql">ms-mssql.mssql</a></h3>
<ul>
<li>sql 関連</li>
</ul>
<h3 id="ms-pythonpythonhttpsmarketplacevisualstudiocomitemsitemnamems-pythonpython"><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">ms-python.python</a></h3>
<ul>
<li>python 関連</li>
<li>必須</li>
</ul>
<h3 id="tht13pythonhttpsmarketplacevisualstudiocomitemsitemnametht13python"><a href="https://marketplace.visualstudio.com/items?itemName=tht13.python">tht13.python</a></h3>
<ul>
<li>python 関連</li>
<li>よくわからん</li>
</ul>
<h3 id="donjayamannejupyterhttpsmarketplacevisualstudiocomitemsitemnamedonjayamannejupyter"><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.jupyter">donjayamanne.jupyter</a></h3>
<ul>
<li>jupyter notebook 　の hogehoge</li>
<li>あると便利</li>
<li>なくても困らん</li>
</ul>
<h3 id="xaverclang-formathttpsmarketplacevisualstudiocomitemsitemnamexaverclang-format"><a href="https://marketplace.visualstudio.com/items?itemName=xaver.clang-format">xaver.clang-format</a></h3>
<ul>
<li>c 関連</li>
</ul>
<h3 id="ms-vscodecpptoolshttpsmarketplacevisualstudiocomitemsitemnamems-vscodecpptools"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">ms-vscode.cpptools</a></h3>
<ul>
<li>c/c++関連</li>
</ul>
<h3 id="ms-vscodegohttpsmarketplacevisualstudiocomitemsitemnamems-vscodego"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go">ms-vscode.Go</a></h3>
<ul>
<li>go 関連</li>
<li>必須</li>
</ul>
<h3 id="ms-vscodevscode-typescript-tslint-pluginhttpsmarketplacevisualstudiocomitemsitemnamems-vscodevscode-typescript-tslint-plugin"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin">ms-vscode.vscode-typescript-tslint-plugin</a></h3>
<ul>
<li>使ってないなぁ</li>
</ul>
<h3 id="robertoacharvscode-essentials-snippetshttpsmarketplacevisualstudiocomitemsitemnamerobertoacharvscode-essentials-snippets"><a href="https://marketplace.visualstudio.com/items?itemName=robertoachar.vscode-essentials-snippets">robertoachar.vscode-essentials-snippets</a></h3>
<ul>
<li>見た感じ便利そう</li>
<li>なお使ったことはない</li>
</ul>
<h3 id="tombonnikevscode-status-bar-format-togglehttpsmarketplacevisualstudiocomitemsitemnametombonnikevscode-status-bar-format-toggle"><a href="https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle">tombonnike.vscode-status-bar-format-toggle</a></h3>
<ul>
<li>なんだ&hellip; これは&hellip;</li>
</ul>
<h3 id="tomoki1207pdfhttpsmarketplacevisualstudiocomitemsitemnametomoki1207pdf"><a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf">tomoki1207.pdf</a></h3>
<ul>
<li>VSCode で PDF が見れる</li>
<li>benri</li>
</ul>
<h3 id="visualstudioexptteamvscodeintellicodehttpsmarketplacevisualstudiocomitemsitemnamevisualstudioexptteamvscodeintellicode"><a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode">VisualStudioExptTeam.vscodeintellicode</a></h3>
<ul>
<li>ものゴッツ便利</li>
</ul>
<h3 id="xabikosjavascriptsnippetshttpsmarketplacevisualstudiocomitemsitemnamexabikosjavascriptsnippets"><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">xabikos.JavaScriptSnippets</a></h3>
<ul>
<li>JS</li>
<li>こんなん知らんかった</li>
<li>今度使いたい</li>
</ul>
<h3 id="yzhangmarkdown-all-in-onehttpsmarketplacevisualstudiocomitemsitemnameyzhangmarkdown-all-in-one"><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">yzhang.markdown-all-in-one</a></h3>
<ul>
<li>markdown 関連</li>
<li>必須</li>
</ul>
<h2 id="参考">参考</h2>
<p><a href="https://qiita.com/koshilife/items/3ed4b1c28de233f39ebb">Qiita::VSCode インストール済 プラグイン一覧の確認方法 (コマンド)</a></p>
]]></content>
        </item>
        
        <item>
            <title>imgurに画像をアップロードするBashスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/imgur_api/</link>
            <pubDate>Fri, 10 Apr 2020 11:32:50 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/imgur_api/</guid>
            <description>選ばれたのはimgurでした. このブログでの画像の管理をどうしようかと 30 秒程考えた結果、imgur で管理することにしました。 それに応じて imgur に</description>
            <content type="html"><![CDATA[<p>選ばれたのは<a href="https://imgur.com/">imgur</a>でした.</p>
<p>このブログでの画像の管理をどうしようかと 30 秒程考えた結果、imgur で管理することにしました。</p>
<p>それに応じて imgur にブログ用の画像を簡単にアップロードする bash スクリプトを書いたので備忘録。</p>
<h2 id="なぜこのブログの画像管理に-imgur-を選んだか">なぜこのブログの画像管理に imgur を選んだか</h2>
<p>imgur を選んだ理由はこんな感じ</p>
<ul>
<li>api が使える</li>
<li>無料であある</li>
<li>投稿オプションが豊富(匿名、アルバム, タグなど)</li>
</ul>
<p>デメリットとしては、</p>
<ul>
<li>画像サイズ制限</li>
<li>使われない画像の自動削除</li>
</ul>
<p>などがあるが、画像サイズ制限はそこまで画質を重視しないのと,アップロード時の通信料を考えて元々圧縮した画像をアップロードするつもりなので OK</p>
<p>使われない画像の自動削除については正直どうなるか未知数なので、今後の運用を見て適宜考えていくこととする。とはいえそこまで画像を多用するつもりはないので最悪消えても大丈夫だろう。</p>
<h2 id="スクリプト本文">スクリプト本文</h2>
<h3 id="依存">依存</h3>
<p><a href="https://apidocs.imgur.com/?version=latest">imgur api doc</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ffmpeg -version
ffmpeg version 4.2.2

$ jq --version
jq-1.6

$ curl --version
curl 7.64.1
</code></pre></div><h3 id="imgursh">imgur.sh</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># !/bin/bash</span>
<span style="color:#75715e"># imgurの特定のアルバムに写真をアップロードする。</span>
COMMAND<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>basename $0<span style="color:#e6db74">`</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! $# -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
echo <span style="color:#e6db74">&#34;Usage: </span>$COMMAND<span style="color:#e6db74"> img_path&#34;</span>
exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># 画像を横600pxになるようにリサイズ</span>
tmp_img<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;resized_img.png&#34;</span>
ffmpeg -i <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> -vf scale<span style="color:#f92672">=</span>600:-1 $tmp_img

ACCESS_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your imgur api auth acess token&#34;</span>
ALBUM_HASH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;your imgur album hash&#34;</span>

JSON_RESPONSE<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl --request POST --url https://api.imgur.com/3/image --header <span style="color:#e6db74">&#34;authorization: Bearer </span><span style="color:#e6db74">${</span>ACCESS_TOKEN<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> -F <span style="color:#e6db74">&#34;image=@</span>$tmp_img<span style="color:#e6db74">&#34;</span> -F <span style="color:#e6db74">&#34;album=</span>$ALBUM_HASH<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span>

success<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>echo $JSON_RESPONSE | jq <span style="color:#e6db74">&#34;.success&#34;</span><span style="color:#e6db74">`</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $success <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;true&#34;</span> <span style="color:#f92672">]</span>;<span style="color:#66d9ef">then</span>
  echo
  url<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>echo $JSON_RESPONSE | jq <span style="color:#e6db74">&#34;.data.link&#34;</span><span style="color:#e6db74">`</span>
  echo $url
  <span style="color:#75715e"># ショートコード扱いになるため{{_ としているが、_は不要。</span>
  echo <span style="color:#e6db74">&#34;{{_&lt;image src=</span>$url<span style="color:#e6db74"> alt=\&#34;blog top page\&#34; position=\&#34;center\&#34;&gt;}}&#34;</span>

  <span style="color:#75715e"># アップロードに成功したら元画像をゴミ箱に入れる</span>
  mv <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;/Users/username/.Trash/&#34;</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># 可否によらず削除</span>
rm $tmp_img
exit <span style="color:#ae81ff">0</span>

</code></pre></div><p>少し改変してあるが、大まかにこんな感じで実装。</p>
<p>相変わらず <code>jq</code> は便利である。</p>
<h2 id="個人的ポイント">個人的ポイント</h2>
<h3 id="アップロード前のリサイズ">アップロード前のリサイズ</h3>
<pre><code>ffmpeg -i &quot;$1&quot; -vf scale=600:-1 $tmp_img
</code></pre><p>私の Mac(MacBook Pro, 13-inch, 2016)でフルサイズのスクリーンショットをすると 2880×1800 の画像が保存される 518 万画素の 3K 画質である。</p>
<p>流石にそんなに高画質な画像は必要ないのと、手軽さを考え横のスケールを 600px に圧縮してアップロードすることにした。</p>
<p>フルサイズのスクリーンショットだと 2880×1800 が 600×375 になるので約 1/23 のサイズになる</p>
<h3 id="アウトプットを-hugo-のショートコードで出力">アウトプットを Hugo のショートコードで出力</h3>
<p>Hugo には Markdown で使える便利なショートコードがある</p>
<p><a href="https://gohugo.io/content-management/shortcodes/">Hugo :: Shortcodes</a></p>
<p>アウトプットの形をショートコードにすることで画像のリサイズ・アップロードから、ショートコードの生成までを一気に任せてしまうことにした。</p>
<h3 id="rm-の仕様">rm の仕様</h3>
<p>この辺りの操作</p>
<pre><code>  # アップロードに成功したら元画像をゴミ箱に入れる
  mv &quot;$1&quot; &quot;/Users/username/.Trash/&quot;
fi

# 可否によらず削除
rm $tmp_img
</code></pre><p>自動生成の $tmp_img は <code>rm</code> で、元画像は <code>mv</code> でゴミ箱へって感じで運用しているが、<code>rm</code> は基本的には不可逆削除って認識であってるのかな?</p>
<p>軽く調べた限り時間が経ってないのであれば復元手段もあるらしいけど&hellip;</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://newfivefour.com/unix-imgur-basic-upload.html">https://newfivefour.com/unix-imgur-basic-upload.html</a></li>
<li><a href="https://apidocs.imgur.com/?version=latest">https://apidocs.imgur.com/?version=latest</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>HugoのソーシャルアイコンにQiitaアイコンを追加した備忘録</title>
            <link>https://tomowarkar.github.io/blog/posts/hugo_social_icon/</link>
            <pubDate>Thu, 09 Apr 2020 15:33:43 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/hugo_social_icon/</guid>
            <description>当然といえば当然だが、hello-friend-ng のREADMEにもあるように、ソーシャルアイコンに Qiita は対応していない。 そこに画像(もしく</description>
            <content type="html"><![CDATA[
    <img src="https://i.imgur.com/AYyMNK5.png"  alt="blog top page"  class="center"  />


<p>当然といえば当然だが、hello-friend-ng の<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng#user-content-available-social-icons">README</a>にもあるように、ソーシャルアイコンに Qiita は対応していない。</p>
<p>そこに画像(もしくはこのブログの<a href="https://tomowarkar.github.io/blog/">トップページ</a>)のように qiita アイコンを追加したという備忘録。</p>
<p>対応するコミットは<a href="https://github.com/tomowarkar/blog/commit/6b88f224fa1d6e473be03875255b211e4367670c">こちら</a></p>
<h2 id="はじめに">はじめに</h2>
<h2 id="テーマの管理に関して">テーマの管理に関して</h2>
<ul>
<li>hugo でのテーマは<code>themes</code> フォルダの配下でサブモジュールとして管理されている。</li>
<li>直接ソースコードをいじればもちろん変更は可能だが、サブモジュール自体のアップデートがあった時に変更が消えてしまう。</li>
<li>なので直接ソースをいじるのは無し(wordpress のテーマなどでもお馴染みではあるが)</li>
</ul>
<h2 id="ソーシャルアイコンに関して">ソーシャルアイコンに関して</h2>
<p>今現在私が使わせてもらっているテーマは<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng">hugo-theme-hello-friend-ng</a></p>
<ul>
<li>README を読んでいくとソーシャルアイコンは<a href="https://simpleicons.org/">simpleicons</a>のアイコンを使っている。</li>
<li>テーマ内でのアイコン管理はどうやら<a href="https://github.com/itsjoeoui/hugo-theme-hello-friend-ng/blob/master/layouts/partials/svg.html">ここ</a>で行っている。</li>
</ul>
<h2 id="テーマ編集に関して">テーマ編集に関して</h2>
<p>どうやら<code>layouts</code>配下に仕様しているテーマの変更したいソースコードパスをコピーしてこればいいらしい。(参考サイト忘れてしまいました。すいません。)</p>
<p>なので</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cp blog/themes/hello-friend-ng/layouts/partials/svg.html blog/layouts/partials/
</code></pre></div><p>このようにコピーして,コピーしたものを編集すれば Hugo さんがよしなにしてくれる。</p>
<h3 id="layoutspartialssvghtml">layouts/partials/svg.html</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">+ {{- else if (eq .name &#34;qiita&#34;) -}}
+     &lt;<span style="color:#f92672">svg</span> <span style="color:#a6e22e">xmlns</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.w3.org/2000/svg&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;26&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;24&#34;</span> <span style="color:#a6e22e">viewBox</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0 0 24 24&#34;</span> <span style="color:#a6e22e">fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;none&#34;</span> <span style="color:#a6e22e">stroke</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;currentColor&#34;</span> <span style="color:#a6e22e">stroke-width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#a6e22e">stroke-linecap</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;round&#34;</span> <span style="color:#a6e22e">stroke-linejoin</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;round&#34;</span>&gt;&lt;<span style="color:#f92672">path</span> <span style="color:#a6e22e">xmlns</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.w3.org/2000/svg&#34;</span> <span style="color:#a6e22e">d</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;M7.883 11.615c0-1.92-1.474-3.904-3.974-3.904C1.987 7.71 0 9.183 0 11.679c0 1.92 1.474 3.905 3.973 3.905.801 0 1.602-.256 2.275-.736L7.402 16l.513-.512-1.09-1.088c.673-.736 1.058-1.696 1.058-2.785zm-3.974-3.2c1.827 0 3.269 1.408 3.269 3.232 0 1.569-1.218 3.233-3.237 3.233-2.018 0-3.236-1.632-3.236-3.2 0-2.049 1.634-3.265 3.204-3.265zm5.864 1.568h.673v5.44h-.673zm.32-.736a.574.574 0 0 1-.576-.576c0-.32.256-.576.576-.576.32 0 .577.256.577.576 0 .32-.256.576-.577.576zm2.724 0a.574.574 0 0 1-.577-.576c0-.32.257-.576.577-.576.32 0 .577.256.577.576 0 .32-.256.576-.577.576zm-.32.736h.673v5.44h-.673zm4.71 5.537c-1.25 0-1.987-.96-1.987-1.92V8.479h.673v1.504h2.371v.672h-2.37v2.977c0 .608.48 1.248 1.313 1.248.224 0 .449-.064.64-.192l.065-.032.32.576-.064.032c-.288.16-.64.256-.961.256zm4.454.032c-1.827 0-2.916-1.44-2.916-2.848 0-1.825 1.442-2.913 2.852-2.913.737 0 1.314.256 1.73.736v-.544H24v5.44h-.673v-.607c-.384.48-.961.736-1.666.736zm-.064-5.089c-1.09 0-2.18.832-2.18 2.24 0 1.089.834 2.177 2.244 2.177.64 0 1.282-.288 1.698-.8v-2.817a2.29 2.29 0 0 0-1.762-.8z&#34;</span>/&gt;&lt;/<span style="color:#f92672">polygon</span>&gt;&lt;/<span style="color:#f92672">svg</span>&gt;
{{- end -}}
</code></pre></div><p>あとの変更は<a href="https://github.com/tomowarkar/blog/commit/6b88f224fa1d6e473be03875255b211e4367670c">こちら</a>の通り。お手軽にテーマの編集ができた。</p>
<p>※ docs/index.html は自動生成されたもの。</p>
]]></content>
        </item>
        
        <item>
            <title>はてなブログ自動投稿Pythonスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/hatena_api/</link>
            <pubDate>Thu, 09 Apr 2020 01:46:56 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/hatena_api/</guid>
            <description>はてなブログの投稿を自動化、ローカル管理がしたい ということで Hatena api を叩いてみた備忘録 参考 はてな API 一覧 下準備 ローカルでの記事管理は以下のようなも</description>
            <content type="html"><![CDATA[<p>はてなブログの投稿を自動化、ローカル管理がしたい</p>
<p>ということで Hatena api を叩いてみた備忘録</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="http://developer.hatena.ne.jp/ja/documents/apis">はてな API 一覧</a></li>
</ul>
<h2 id="下準備">下準備</h2>
<p>ローカルでの記事管理は以下のようなものを想定する</p>
<ul>
<li>markdown 形式</li>
<li>1 行目にブログタイトル</li>
<li>2 行目にブログタグ</li>
<li>3 行目以降は本文</li>
</ul>
<h3 id="examplemd">example.md</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">タイトル
Python,日常,hoge

<span style="color:#75715e">## 今日の
</span><span style="color:#75715e"></span>
hugahuga

<span style="color:#75715e">### 天気は
</span><span style="color:#75715e"></span>
hogahoga
</code></pre></div><p>ローカルでの投稿済みか未投稿かの判別や、投稿日時の判別は対応できないが最低限の仕様ではあると思う。</p>
<h2 id="python-スクリプト">Python スクリプト</h2>
<h3 id="mainpy">main.py</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
<span style="color:#f92672">import</span> requests <span style="color:#f92672">as</span> req

HATENA_ID <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your hatena id&#34;</span>
BLOG_DOMAIN <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your blog domain&#34;</span>
API_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your api key&#34;</span>
BASE_URL <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;https://blog.hatena.ne.jp/{HATENA_ID}/{BLOG_DOMAIN}/atom&#34;</span>


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hatena_entry</span>(title, content, categorys<span style="color:#f92672">=</span>[], updated<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>, draft<span style="color:#f92672">=</span>False):
    <span style="color:#e6db74">&#34;&#34;&#34;はてなブログへの投稿
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">      HATENA_ID, API_KEY, BASE_URL (str)
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">      title (str):
</span><span style="color:#e6db74">      content (str):
</span><span style="color:#e6db74">      categorys (List[str]):
</span><span style="color:#e6db74">      updated (str): %Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">T%H:%M:%S
</span><span style="color:#e6db74">      draft (bool):
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Returns:
</span><span style="color:#e6db74">      str: xml
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    updated <span style="color:#f92672">=</span> updated <span style="color:#66d9ef">if</span> updated <span style="color:#66d9ef">else</span> datetime<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">T%H:%M:%S&#34;</span>)
    draft <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;yes&#34;</span> <span style="color:#66d9ef">if</span> draft <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;no&#34;</span>
    category <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x: <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join([f<span style="color:#e6db74">&#34;&lt;category term=&#39;{e}&#39; /&gt;&#34;</span> <span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> x])
    categorys <span style="color:#f92672">=</span> category(categorys) <span style="color:#66d9ef">if</span> category <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;&#34;</span>

    xml <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;&#34;&#34;&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;&lt;entry xmlns=&#34;http://www.w3.org/2005/Atom&#34; xmlns:app=&#34;http://www.w3.org/2007/app&#34;&gt;
</span><span style="color:#e6db74">      &lt;title&gt;{title}&lt;/title&gt;&lt;author&gt;&lt;name&gt;name&lt;/name&gt;&lt;/author&gt;&lt;content type=&#34;text/markdown&#34;&gt;{content}&lt;/content&gt;
</span><span style="color:#e6db74">      &lt;updated&gt;{updated}&lt;/updated&gt;{categorys}&lt;app:control&gt;&lt;app:draft&gt;{draft}&lt;/app:draft&gt;
</span><span style="color:#e6db74">      &lt;/app:control&gt;&lt;/entry&gt;&#34;&#34;&#34;</span><span style="color:#f92672">.</span>encode(
        <span style="color:#e6db74">&#34;UTF-8&#34;</span>
    )
    r <span style="color:#f92672">=</span> req<span style="color:#f92672">.</span>post(BASE_URL <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/entry&#34;</span>, auth<span style="color:#f92672">=</span>(HATENA_ID, API_KEY), data<span style="color:#f92672">=</span>xml)
    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>text


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    <span style="color:#f92672">import</span> sys

    _, arg <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>argv
    <span style="color:#66d9ef">with</span> open(arg, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
        title, categorys, <span style="color:#f92672">*</span>content <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    categorys <span style="color:#f92672">=</span> categorys<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)
    content <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(content)
    r <span style="color:#f92672">=</span> hatena_entry(title, content, categorys)
    <span style="color:#66d9ef">print</span>(r)

</code></pre></div><p>はてなブログの api では xml を扱う。これまで xml にあまり触れてこなかったが、自動投稿ぐらいだと大して詰まることもなく書けた。</p>
<h2 id="usage">usage</h2>
<pre><code>python3 main.py example.md
</code></pre>]]></content>
        </item>
        
        <item>
            <title>ニコニコ動画のチャンネルにおける動画のurlリストを取得するPythonスクリプト</title>
            <link>https://tomowarkar.github.io/blog/posts/nicovideo/</link>
            <pubDate>Wed, 08 Apr 2020 23:04:57 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/nicovideo/</guid>
            <description>main from time import sleep from selenium import webdriver from selenium.webdriver.chrome.options import Options MAIL = &amp;#34;&amp;#34; #ログインに使うメールアドレス PSWD = &amp;#34;&amp;#34; #ログインに使うパスワード class NicoVideo(object): &amp;#34;&amp;#34;&amp;#34;ニコニコ動画</description>
            <content type="html"><![CDATA[<h2 id="main">main</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> time <span style="color:#f92672">import</span> sleep
<span style="color:#f92672">from</span> selenium <span style="color:#f92672">import</span> webdriver
<span style="color:#f92672">from</span> selenium.webdriver.chrome.options <span style="color:#f92672">import</span> Options

MAIL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e">#ログインに使うメールアドレス</span>
PSWD <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e">#ログインに使うパスワード</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">NicoVideo</span>(object):
    <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画の操作を行う
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">      headless (bool): ヘッドレスモード使用の有無
</span><span style="color:#e6db74">    Attributes:
</span><span style="color:#e6db74">      driver: selenium.webdriver.chrome.webdriver.WebDriver
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">def</span> __init__(self, headless<span style="color:#f92672">=</span>False):
        options <span style="color:#f92672">=</span> Options()
        options<span style="color:#f92672">.</span>headless <span style="color:#f92672">=</span> headless
        self<span style="color:#f92672">.</span>driver <span style="color:#f92672">=</span> webdriver<span style="color:#f92672">.</span>Chrome(options<span style="color:#f92672">=</span>options)

    <span style="color:#66d9ef">def</span> __del__(self):
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>close()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">login</span>(self, mail, pswd):
        <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画へのログイン
</span><span style="color:#e6db74">        Args:
</span><span style="color:#e6db74">          mail (str)
</span><span style="color:#e6db74">          pswd (str)
</span><span style="color:#e6db74">        Returns:
</span><span style="color:#e6db74">          None
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://account.nicovideo.jp/login&#34;</span>
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>get(url)
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;[driver] get&#34;</span>, url)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;input__mailtel&#34;</span>)<span style="color:#f92672">.</span>send_keys(mail)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;input__password&#34;</span>)<span style="color:#f92672">.</span>send_keys(pswd)
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_element_by_id(<span style="color:#e6db74">&#34;login__submit&#34;</span>)<span style="color:#f92672">.</span>submit()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">channel_video_list</span>(self, channel_name, page<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>):
        <span style="color:#e6db74">&#34;&#34;&#34;ニコニコ動画のあるチャンネルにおける動画のURLリストの取得
</span><span style="color:#e6db74">        Args:
</span><span style="color:#e6db74">          channel_name (str): channel name
</span><span style="color:#e6db74">          page (int): page num　( &gt; 0 )
</span><span style="color:#e6db74">        Returns:
</span><span style="color:#e6db74">          List[str]
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        url <span style="color:#f92672">=</span> f<span style="color:#e6db74">&#34;https://ch.nicovideo.jp/{channel_name}/video?page={page}&#34;</span>
        self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>get(url)
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;[driver] get&#34;</span>, url)

        items <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>driver<span style="color:#f92672">.</span>find_elements_by_css_selector(<span style="color:#e6db74">&#34;ul.items &gt; li.item&#34;</span>)

        <span style="color:#66d9ef">return</span> [
            item<span style="color:#f92672">.</span>find_element_by_css_selector(<span style="color:#e6db74">&#34;div.item_left &gt; a&#34;</span>)<span style="color:#f92672">.</span>get_attribute(<span style="color:#e6db74">&#34;href&#34;</span>)
            <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> items
        ]


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    output_file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nicovideo.txt&#34;</span>

    <span style="color:#75715e"># ファイルの初期化</span>
    <span style="color:#66d9ef">with</span> open(output_file, <span style="color:#e6db74">&#34;w&#34;</span>):
        <span style="color:#66d9ef">pass</span>

    nv <span style="color:#f92672">=</span> NicoVideo(headless<span style="color:#f92672">=</span>True)
    nv<span style="color:#f92672">.</span>login(MAIL, PSWD)

    page <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">while</span> True:
        channel_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mentalist&#34;</span>
        vlist <span style="color:#f92672">=</span> nv<span style="color:#f92672">.</span>channel_video_list(channel_name, page<span style="color:#f92672">=</span>page)
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> vlist:
            <span style="color:#66d9ef">break</span>
        text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>join(vlist) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
        <span style="color:#66d9ef">with</span> open(output_file, <span style="color:#e6db74">&#34;a&#34;</span>) <span style="color:#66d9ef">as</span> f:
            f<span style="color:#f92672">.</span>write(text)

        page <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Github Pages でブログ始めました。</title>
            <link>https://tomowarkar.github.io/blog/posts/init/</link>
            <pubDate>Wed, 08 Apr 2020 22:41:43 +0900</pubDate>
            
            <guid>https://tomowarkar.github.io/blog/posts/init/</guid>
            <description>Hello Hugo! こんにちは tomowarkar です。 GitHub Pages と Go 製のウェブサイト生成フレームワークである Hugo を使って Github でブログを始めました。 これまでも他の形でブログを運用してい</description>
            <content type="html"><![CDATA[<h2 id="hello-hugo">Hello Hugo!</h2>
<p>こんにちは tomowarkar です。</p>
<p>GitHub Pages と Go 製のウェブサイト生成フレームワークである Hugo を使って Github でブログを始めました。</p>
<p>これまでも他の形でブログを運用していたのですが、技術ブログと日常ブログが混じってしまったり、サーバーやらドメインやらの管理が面倒になってきた(技術的なアウトプットをするだけなら、それ以外の運営コストをできるだけ下げたい)ので新しく Github でブログを始めた次第です。</p>
<p>あまり硬くならずとりあえず書いたコードの供養の場として使っていけたらと思っています。</p>
<p>今回 GitHub Pages と Hugo を使ってブログを始めるにあたって、以下の記事を参考にさせていただきました。ありがとうございます 🙏</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://qiita.com/Blank71/items/88a6c76ca9e162af73fe">https://qiita.com/Blank71/items/88a6c76ca9e162af73fe</a></li>
<li><a href="https://qiita.com/yotsak83/items/017734d5f873f4f194d4">https://qiita.com/yotsak83/items/017734d5f873f4f194d4</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
